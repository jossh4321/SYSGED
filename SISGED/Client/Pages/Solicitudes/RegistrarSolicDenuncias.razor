@inject IRepository repository
@inject ISwalFireMessage swalfire
@using Blazored.Typeahead
@using SISGED.Client.Pages.Samples.WorkEnvironment
<style>
    .div-form {
        background-color: #a6a6a6;
        flex-basis: 100%;
        border-radius: 5px 5px 0px 0px;
        width: 100%;
    }

    .field-container {
        display: block;
        padding: 10px;
    }

    .text-field-style {
        display: block !important;
    }
    /*validacion*/
    .validation-message {
        display: inline;
    }

    div.invalid .correcto {
        display: none;
    }

    div.valid .incorrecto,
    div.valid:not(.modified) .correcto {
        display: none;
    }

    .correcto {
        color: green !important;
        font-family: sans-serif;
        font-size: 15px;
        display: flex;
        height: 18px;
    }

    .incorrecto {
        color: red !important;
        font-family: sans-serif;
        font-size: 15px;
        display: flex;
        height: 18px;
    }

    i.val-icon {
        font-size: 20px;
    }

    .good-msg, div.correcto i.good-icon {
        color: green !important;
    }

    div.incorrecto i.bad-icon {
        color: red !important;
    }
</style>

<div class="div-form">
    <EditForm EditContext="@_editContext" Context="CurrentEditContext"
              OnValidSubmit="handleValidSubmit" OnInvalidSubmit="handleInvalidSubmit">
        <FluentValidator></FluentValidator>
        <MatTabGroup>
            <MatTab Label="Datos Generales">

                <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass( () => solicitudDenuncia.nombrecliente)">
                    <MatTextField @bind-Value="@solicitudDenuncia.nombrecliente" Class="text-field-style"
                                  Label="Nombre del cliente" @oninput='@(e => KeyUp(e,"nombrecliente",solicitudDenuncia))'></MatTextField>
                    <div class="incorrecto">
                        <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                        <ValidationMessage For="@(() => solicitudDenuncia.nombrecliente)" />
                    </div>
                    <div class="correcto">
                        <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                        <span class="good-msg">Correcto</span>
                    </div>
                </div>
                <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass( () => solicitudDenuncia.tipodocumento)">
                    <InputSelect @bind-Value="@solicitudDenuncia.tipodocumento" class="text-field-style custom-select">
                        <option value="nulo">--Seleccione el Tipo de Documento--</option>
                        <option value="CE">Carnet de Extranjeria</option>
                        <option value="DNI">D.N.I.</option>
                        <option value="pasaporte">Pasaporte</option>
                    </InputSelect>
                    <div class="incorrecto">
                        <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                        <ValidationMessage For="@(() => solicitudDenuncia.tipodocumento)" />
                    </div>
                    <div class="correcto">
                        <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                        <span class="good-msg">Correcto</span>
                    </div>
                </div>

                <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass( () => solicitudDenuncia.numerodocumento)">
                    <MatTextField @bind-Value="@solicitudDenuncia.numerodocumento" Class="text-field-style"
                                  Label="Numero de Documento" @oninput='@(e => KeyUp(e,"numerodocumento",solicitudDenuncia))'></MatTextField>
                    <div class="incorrecto">
                        <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                        <ValidationMessage For="@(() => solicitudDenuncia.numerodocumento)" />
                    </div>
                    <div class="correcto">
                        <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                        <span class="good-msg">Correcto</span>
                    </div>
                </div>
                <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass( () => solicitudDenuncia.contenidoDTO.codigo)">
                    <MatTextField @bind-Value="@solicitudDenuncia.contenidoDTO.codigo" Class="text-field-style"
                                  Label="Codigo" @oninput='@(e => KeyUp(e,"codigo",solicitudDenuncia.contenidoDTO))'></MatTextField>
                    <div class="incorrecto">
                        <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                        <ValidationMessage For="@(() => solicitudDenuncia.contenidoDTO.codigo)" />
                    </div>
                    <div class="correcto">
                        <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                        <span class="good-msg">Correcto</span>
                    </div>
                </div>
                <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass( () => solicitudDenuncia.contenidoDTO.titulo)">
                    <MatTextField @bind-Value="@solicitudDenuncia.contenidoDTO.titulo" Class="text-field-style"
                                  Label="Titulo de la Solicitud" @oninput='@(e => KeyUp(e,"titulo",solicitudDenuncia.contenidoDTO))'></MatTextField>
                    <div class="incorrecto">
                        <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                        <ValidationMessage For="@(() => solicitudDenuncia.contenidoDTO.titulo)" />
                    </div>
                    <div class="correcto">
                        <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                        <span class="good-msg">Correcto</span>
                    </div>
                </div>
                <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass( () => solicitudDenuncia.contenidoDTO.descripcion)">
                    <textarea class="form-control text-field-style txt-area" @bind="@solicitudDenuncia.contenidoDTO.descripcion"
                              @oninput='@(e => KeyUp(e,"descripcion",solicitudDenuncia.contenidoDTO))' placeholder="Descripcion de la Solicitud"></textarea>
                    <div class="incorrecto">
                        <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                        <ValidationMessage For="@(() => solicitudDenuncia.contenidoDTO.descripcion)" />
                    </div>
                    <div class="correcto">
                        <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                        <span class="good-msg">Correcto</span>
                    </div>
                </div>
                <div class="field-container">
                    <InputFile Label="" ImagenSeleccionada="ImagenSeleccionada"></InputFile>
                </div>
                @*<div class="field-container">
                    <MatButton type="submit"
                               Disabled="@loadprocess"
                               Icon="@MatBlazor.MatIconNames.Check_circle_outline"
                               Class="button-input-style mat-success-c sub-but">Registrar</MatButton>
                </div>*@
            </MatTab>
            <MatTab Label="Subir Anexo">
                <DragnDrop Label="" ImagenSeleccionada="ImagenSeleccionada2"></DragnDrop>
                <div class="field-container">
                    <MatButton type="submit"
                               Disabled="@loadprocess"
                               Icon="@MatBlazor.MatIconNames.Check_circle_outline"
                               Class="button-input-style mat-success-c sub-but">Registrar</MatButton>
                </div>
            </MatTab>
        </MatTabGroup>
    </EditForm>
</div>
@code {
    [CascadingParameter] WorkEnvironment workspace { get; set; }
    [CascadingParameter]
    MainLayout layout { get; set; }
    private SolicitudDenunciaDTO solicitudDenuncia = new SolicitudDenunciaDTO();
    [CascadingParameter(Name = "SesionUsuario")] protected Sesion sesion { get; set; }
    private EditContext _editContext;
    private string documentoTemporal { get; set; } = null;
    private string imagenTemporal;
    private string imagenTemporal2;
    private bool loadprocess = false;
    protected override void OnInitialized()
    {
        solicitudDenuncia.contenidoDTO.Urlanexo = new List<string>();

        _editContext = new EditContext(solicitudDenuncia);
        foreach (string u in solicitudDenuncia.contenidoDTO.Urlanexo)
        {
            if (!string.IsNullOrWhiteSpace(u))
            {
                imagenTemporal2 = u;
                solicitudDenuncia.contenidoDTO.Urlanexo = null;
            }
        }
        if (!string.IsNullOrEmpty(solicitudDenuncia.contenidoDTO.urldata))
        {
            imagenTemporal = solicitudDenuncia.contenidoDTO.urldata;
            solicitudDenuncia.contenidoDTO.urldata = null;
        }
    }

    void KeyUp(ChangeEventArgs e, string memberName, object val)
    {
        var property = val.GetType().GetProperty(memberName);
        property.SetValue(val, e.Value.ToString());
        var fi = new FieldIdentifier(val, memberName);
        _editContext.NotifyFieldChanged(fi);
    }

    private void ImagenSeleccionada(string imagenbase64)
    {
        solicitudDenuncia.contenidoDTO.urldata = imagenbase64;
    }
    private void ImagenSeleccionada2(string imagenbase64)
    {
        solicitudDenuncia.contenidoDTO.Urlanexo.Add(imagenbase64);
    }
    public async Task handleValidSubmit()
    {
        loadprocess = true;
        if (solicitudDenuncia.contenidoDTO.urldata != "" && solicitudDenuncia.contenidoDTO.urldata != null)
        {
            ExpedienteWrapper expedienteWrapper = new ExpedienteWrapper();
            //solicitudDenuncia.contenidoDTO.nombrecliente = solicitudDenuncia.nombrecliente;
            expedienteWrapper.documento = solicitudDenuncia;
            expedienteWrapper.idusuarioactual = "GAAAADenuncia";

            var httpResponse = await repository.Post<ExpedienteWrapper, ExpedienteDocumentoSDDTO>("api/documentos/documentosd", expedienteWrapper);
            if (httpResponse.Error)
            {
                await swalfire.errorMessage("Error en el servidor, intentelo de nuevo");
            }
            else
            {
                /*
                ExpedienteBandejaDTO expedientebandeja = new ExpedienteBandejaDTO();

                expedientebandeja = httpResponse.Response;
                Item itemSalida = new Item()
                {
                    nombre = expedientebandeja.tipo,
                    valor = expedientebandeja,
                    icono = "alarm_add",
                    descripcion = ((DocumentoDTO)expedientebandeja.documento).tipo,
                    currentPlace = "outputs",
                    originPlace = "outputs",
                    cliente = expedientebandeja.cliente
                };
                workspace.UpdateComponentBandeja(itemSalida);*/
                ExpedienteBandejaDTO expedientebandeja = new ExpedienteBandejaDTO();
                expedientebandeja.idexpediente = httpResponse.Response.expediente.id;
                SolicitudDenuncia solicitudD = new SolicitudDenuncia();
                solicitudD = httpResponse.Response.solicitudD;
                expedientebandeja.documento = new DocumentoDTO();
                expedientebandeja.documentosobj = new List<DocumentoDTO>();
                expedientebandeja.cliente = new Cliente();
                expedientebandeja.documento.id = solicitudD.id;
                expedientebandeja.documento.tipo = solicitudD.tipo;
                expedientebandeja.documento.historialcontenido = solicitudD.historialcontenido;
                expedientebandeja.documento.historialproceso = solicitudD.historialproceso;
                expedientebandeja.documento.contenido = solicitudD.contenido;
                expedientebandeja.documento.estado = solicitudD.estado;
                expedientebandeja.cliente = httpResponse.Response.expediente.cliente;
                expedientebandeja.documentosobj.Add(expedientebandeja.documento);
                expedientebandeja.tipo = httpResponse.Response.expediente.tipo;
                await layout.Send("josue", expedientebandeja);
                await swalfire.successMessage("Solicitud de Denuncia Registrada Correctamente");
            }
        }
        else
        {
            await swalfire.errorMessage("Debe subir un PDF obligatoriamente");
        }
        loadprocess = false;
    }

    public void handleInvalidSubmit()
    {
        loadprocess = false;
        swalfire.errorMessage("Por favor, Verifique los Datos Ingresados");
    }
}