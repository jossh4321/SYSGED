@inject IRepository repository
@inject ISwalFireMessage swalfire
@using Blazored.Typeahead
@using SISGED.Client.Pages.Samples.WorkEnvironment
@using Newtonsoft.Json;
<style>
    .div-form {
        background-color: #a6a6a6;
        flex-basis: 100%;
        border-radius: 5px 5px 0px 0px;
        width: 100%;
    }

    .field-container {
        display: block;
        padding: 10px;
    }

    .text-field-style {
        display: block !important;
    }
    /*validacion*/
    .validation-message {
        display: inline;
    }

    div.invalid .correcto {
        display: none;
    }

    div.valid .incorrecto,
    div.valid:not(.modified) .correcto {
        display: none;
    }

    .correcto {
        color: green !important;
        font-family: sans-serif;
        font-size: 15px;
        display: flex;
        height: 18px;
    }

    .incorrecto {
        color: red !important;
        font-family: sans-serif;
        font-size: 15px;
        display: flex;
        height: 18px;
    }

    i.val-icon {
        font-size: 20px;
    }

    .good-msg, div.correcto i.good-icon {
        color: green !important;
    }

    div.incorrecto i.bad-icon {
        color: red !important;
    }
</style>

<div class="div-form">
    <EditForm EditContext="@_editContext" Context="CurrentEditContext"
              OnValidSubmit="handleValidSubmit" OnInvalidSubmit="handleInvalidSubmit">
        <FluentValidator></FluentValidator>
        <MatTabGroup>
            <MatTab Label="Datos Generales">


                @*<div class="field-container input-group-2 @CurrentEditContext.FieldCssClass( () => solicitudDenuncia.contenidoDTO.codigo)">
                        <MatTextField @bind-Value="@solicitudDenuncia.contenidoDTO.codigo" Class="text-field-style"
                                      Label="Codigo" @oninput='@(e => KeyUp(e,"codigo",solicitudDenuncia.contenidoDTO))'></MatTextField>
                        <div class="incorrecto">
                            <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                            <ValidationMessage For="@(() => solicitudDenuncia.contenidoDTO.codigo)" />
                        </div>
                        <div class="correcto">
                            <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                            <span class="good-msg">Correcto</span>
                        </div>
                    </div>*@
                <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass( () => solicitudDenuncia.contenidoDTO.titulo)">
                    <MatTextField @bind-Value="@solicitudDenuncia.contenidoDTO.titulo" Class="text-field-style"
                                  Label="Titulo de la Solicitud" @oninput='@(e => KeyUp(e,"titulo",solicitudDenuncia.contenidoDTO))'></MatTextField>
                    <div class="incorrecto">
                        <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                        <ValidationMessage For="@(() => solicitudDenuncia.contenidoDTO.titulo)" />
                    </div>
                    <div class="correcto">
                        <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                        <span class="good-msg">Correcto</span>
                    </div>
                </div>
                <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass( () => solicitudDenuncia.contenidoDTO.descripcion)">
                    <textarea class="form-control text-field-style txt-area" @bind="@solicitudDenuncia.contenidoDTO.descripcion"
                              @oninput='@(e => KeyUp(e,"descripcion",solicitudDenuncia.contenidoDTO))' placeholder="Descripcion de la Solicitud"></textarea>
                    <div class="incorrecto">
                        <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                        <ValidationMessage For="@(() => solicitudDenuncia.contenidoDTO.descripcion)" />
                    </div>
                    <div class="correcto">
                        <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                        <span class="good-msg">Correcto</span>
                    </div>
                </div>
                <div class="field-container">
                    <InputFile Label="" ImagenSeleccionada="ImagenSeleccionada"></InputFile>
                </div>
                @*<div class="field-container">
                        <MatButton type="submit"
                                   Disabled="@loadprocess"
                                   Icon="@MatBlazor.MatIconNames.Check_circle_outline"
                                   Class="button-input-style mat-success-c sub-but">Registrar</MatButton>
                    </div>*@
            </MatTab>
            <MatTab Label="Subir Anexo">
                <DragnDrop Label="" ImagenSeleccionada="ImagenSeleccionada2" FileNames="FileName"></DragnDrop>
                @if (nombres != null && nombres.Count > 0)
                {
                    @for (int i = 0; i < nombres.Count; i++)
                    {
                        int index = i;
                        string a = nombres[i];
                        <div>
                            @nombres[i]

                            <button class="btn btn-link text-danger p-0 pl-1" type="button"
                                    @onclick="@(e => RemoveFile(a,index))">
                                <small class="RedText">Eliminar</small>
                            </button>
                        </div>
                    }
                }
                <div class="field-container">
                    <MatButton type="submit"
                               Disabled="@loadprocess"
                               Icon="@MatBlazor.MatIconNames.Check_circle_outline"
                               Class="button-input-style mat-success-c sub-but">Registrar</MatButton>
                </div>
            </MatTab>
        </MatTabGroup>
    </EditForm>
</div>
@code {
    [CascadingParameter] WorkEnvironment workspace { get; set; }
    [CascadingParameter]
    MainLayout layout { get; set; }
    private SolicitudDenunciaDTO solicitudDenuncia = new SolicitudDenunciaDTO();
    [CascadingParameter(Name = "SesionUsuario")] protected Sesion sesion { get; set; }
    private EditContext _editContext;
    private string documentoTemporal { get; set; } = null;
    private string imagenTemporal;
    List<string> nombres = new List<string>();
    private string imagenTemporal2;
    private bool loadprocess = false;
    int paso = 0;
    int subpaso = 0;
    String typeDocument = "SolicitudInicial";

    protected override async Task OnInitializedAsync()
    {

        solicitudDenuncia.contenidoDTO.Urlanexo = new List<string>();

        _editContext = new EditContext(solicitudDenuncia);
        foreach (string u in solicitudDenuncia.contenidoDTO.Urlanexo)
        {
            if (!string.IsNullOrWhiteSpace(u))
            {
                imagenTemporal2 = u;
                solicitudDenuncia.contenidoDTO.Urlanexo = null;
            }
        }
        if (!string.IsNullOrEmpty(solicitudDenuncia.contenidoDTO.urldata))
        {
            imagenTemporal = solicitudDenuncia.contenidoDTO.urldata;
            solicitudDenuncia.contenidoDTO.urldata = null;
        }
        subpaso = 1;

        String message = "";

        if (typeDocument != workspace.asistente.tipodocumento)
        {
            message = "El documento que ha elegido no es el indicado para el expediente";
        }
        else
        {
            message = workspace.asistente.pasos.documentos.Find(x => x.tipo == workspace.asistente.tipodocumento).pasos.ElementAt(paso).subpaso.ElementAt(subpaso).descripcion;

            await workspace.UpdatePasoAndSubPasoNormal(paso, subpaso, workspace.expedienteseleccionado.documento.tipo);
        }

        Task voiceMessage = workspace.VoiceMessage(message);

        workspace.ChangeMessage(message);

        await voiceMessage;

    }

    void KeyUp(ChangeEventArgs e, string memberName, object val)
    {
        var property = val.GetType().GetProperty(memberName);
        property.SetValue(val, e.Value.ToString());
        var fi = new FieldIdentifier(val, memberName);
        _editContext.NotifyFieldChanged(fi);
    }

    private void ImagenSeleccionada(string imagenbase64)
    {
        solicitudDenuncia.contenidoDTO.urldata = imagenbase64;
    }
    private void ImagenSeleccionada2(string imagenbase64)
    {
        solicitudDenuncia.contenidoDTO.Urlanexo.Add(imagenbase64);
    }

    private void FileName(string imagenbase64)
    {
        nombres.Add(imagenbase64);
    }

    private async Task RemoveFile(string file, int imagen64)
    {
        nombres.Remove(file);
        solicitudDenuncia.contenidoDTO.Urlanexo.RemoveAt(imagen64);
        StateHasChanged();

    }

    public async Task handleValidSubmit()
    {
        solicitudDenuncia.nombrecliente = sesion.usuario.datos.nombre;
        solicitudDenuncia.tipodocumento = sesion.usuario.datos.tipodocumento;
        solicitudDenuncia.numerodocumento = sesion.usuario.datos.numerodocumento;
        loadprocess = true;
        if (solicitudDenuncia.contenidoDTO.urldata != "" && solicitudDenuncia.contenidoDTO.urldata != null)
        {
            ExpedienteWrapper expedienteWrapper = new ExpedienteWrapper();
            //solicitudDenuncia.contenidoDTO.nombrecliente = solicitudDenuncia.nombrecliente;
            expedienteWrapper.documento = solicitudDenuncia;
            expedienteWrapper.idusuarioactual = sesion.usuario.id;
            expedienteWrapper.idexpediente = workspace.expedienteseleccionado.idexpediente;
            expedienteWrapper.documentoentrada = workspace.expedienteseleccionado.documento.id;

            var httpResponse = await repository.Post<ExpedienteWrapper, SolicitudDenuncia>("api/documentos/documentosd", expedienteWrapper);
            if (httpResponse.Error)
            {
                await swalfire.errorMessage("Error en el servidor, intentelo de nuevo");
            }
            else
            {
                ExpedienteBandejaDTO expedientebandeja = new ExpedienteBandejaDTO();
                expedientebandeja = workspace.expedienteseleccionado;

                SolicitudDenuncia solicitudDenuncia = new SolicitudDenuncia();
                solicitudDenuncia = httpResponse.Response;

                expedientebandeja.documento.id = solicitudDenuncia.id;
                expedientebandeja.documento.tipo = solicitudDenuncia.tipo;
                expedientebandeja.documento.historialcontenido = solicitudDenuncia.historialcontenido;
                expedientebandeja.documento.historialproceso = solicitudDenuncia.historialproceso;
                expedientebandeja.documento.contenido = solicitudDenuncia.contenido;
                expedientebandeja.documento.estado = solicitudDenuncia.estado;
                expedientebandeja.tipo = "Denuncia";

                Item itemSalida = new Item()
                {
                    nombre = expedientebandeja.tipo,
                    valor = expedientebandeja,
                    icono = "alarm_add",
                    descripcion = ((DocumentoDTO)expedientebandeja.documento).tipo,
                    currentPlace = "workspace",
                    originPlace = "inputs",
                    cliente = expedientebandeja.cliente,
                    itemstatus = "registrado"
                };

                workspace.UpdateDocRegistrado(itemSalida);
                workspace.UpdateTools("Registrar Documento");

                DocumentoDTO documentoDTO = new DocumentoDTO();
                documentoDTO.id = solicitudDenuncia.id;
                documentoDTO.tipo = solicitudDenuncia.tipo;
                documentoDTO.estado = solicitudDenuncia.estado;
                documentoDTO.contenido = JsonConvert.SerializeObject(solicitudDenuncia.contenido);
                documentoDTO.historialcontenido = solicitudDenuncia.historialcontenido;
                documentoDTO.historialproceso = solicitudDenuncia.historialproceso;
                documentoDTO.urlanexo = solicitudDenuncia.urlanexo;

                workspace.expedienteseleccionado.documentosobj.Add(documentoDTO);
                workspace.expedienteseleccionado.documento = documentoDTO;
                workspace.expedienteseleccionado.tipo = "Denuncia";

                StateHasChanged();

                await swalfire.successMessage("Solicitud de Denuncia Registrada Correctamente");

                subpaso = 2;

                Int32 pasoAntiguo = paso;
                paso = 1;
                subpaso = 0;
                //Enviar paso=0+0,subpaso=2,idexpediente

                String messageFinal = await workspace.UpdateSolicitudInitial(paso, subpaso, expedientebandeja.documento.tipo, expedientebandeja.tipo, pasoAntiguo);

                Task voiceMessage = workspace.VoiceMessage(messageFinal);

                workspace.ChangeMessage(messageFinal);

                await voiceMessage;
            }
        }
        else
        {
            await swalfire.errorMessage("Debe subir un PDF obligatoriamente");
        }
        loadprocess = false;
    }

    public void handleInvalidSubmit()
    {
        loadprocess = false;
        swalfire.errorMessage("Por favor, Verifique los Datos Ingresados");
    }
}