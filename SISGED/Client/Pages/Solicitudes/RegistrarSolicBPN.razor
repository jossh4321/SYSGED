@inject IRepository repository
@inject ISwalFireMessage swalfire
@using SISGED.Client.Pages.Samples.WorkEnvironment
<style>
    .div-form {
        background-color: #a6a6a6;
        flex-basis: 100%;
        border-radius: 15px 15px 15px 15px;
        width: 100%;
    }

    .field-container {
        display: block;
        padding: 10px;
    }

    .text-field-style {
        display: block !important;
    }
    /*validacion*/
    .validation-message {
        display: inline;
    }

    div.invalid .correcto {
        display: none;
    }

    div.valid .incorrecto,
    div.valid:not(.modified) .correcto {
        display: none;
    }

    .correcto {
        color: green !important;
        font-family: sans-serif;
        font-size: 15px;
        display: flex;
        height: 18px;
    }

    .incorrecto {
        color: red !important;
        font-family: sans-serif;
        font-size: 15px;
        display: flex;
        height: 18px;
    }

    i.val-icon {
        font-size: 20px;
    }

    .good-msg, div.correcto i.good-icon {
        color: green !important;
    }

    div.incorrecto i.bad-icon {
        color: red !important;
    }

    .modal-info-solicitudBPN {
        display: flex;
        flex-direction: column;
        /*height: 700px;*/
        width: 100%;
        background-color: #808080;
        border-radius: 15px 15px 15px 15px;
    }

    .div-form.mat-tab-group {
        max-width: 500px;
    }

    .otorgantes {
        border: 1px solid #ccc;
        background: #f2f2f2;
        display: flex;
        margin: 7px 10px;
        align-items: center;
        flex-direction: column;
        border-radius: 5px 5px 0px 0px;
        border-bottom: 1px solid black;
        
    }

    .title-ot {
        font-size: 16px;
        margin-bottom: 0px;
        margin-top: 5px;
        color: #595959;
    }
</style>
<div class="div-form">
    <EditForm EditContext="@_editContext" Context="CurrentEditContext"
              OnValidSubmit="handleValidSubmit" OnInvalidSubmit="handleInvalidSubmit">
        <FluentValidator></FluentValidator>
        <div class="modal-info-solicitudBPN">
            <MatTabGroup>
                <MatTab Label="Solicitud">
                    <div class="field-container input-group-2">
                        <MatTextField @bind-Value="@docSolicitudBPNDTO.contenidoDTO.actojuridico" ReadOnly="true" Class="text-field-style" Label="Acto Juridico"></MatTextField>
                    </div>
                    <div class="field-container input-group-2">
                        <MatTextField @bind-Value="@docSolicitudBPNDTO.contenidoDTO.direccionoficio" ReadOnly="true" Class="text-field-style" Label="Direccion de Oficio"></MatTextField>
                    </div>
                    <div class="field-container input-group-2">
                        <MatTextField @bind-Value="@docSolicitudBPNDTO.contenidoDTO.tipoprotocolo" ReadOnly="true" Class="text-field-style" Label="Tipo de Protocolo"></MatTextField>
                    </div>
                    <div class="field-container input-group-2">
                        <MatTextField @bind-Value="@docSolicitudBPNDTO.contenidoDTO.direccionoficio" ReadOnly="true" Class="text-field-style" Label="Direccion de Oficio"></MatTextField>
                    </div>
                    <div class="otorgantes">
                        <div class="titulo-paticipantes">
                            <div><span class="titulo">Participantes</span></div>
                            <div class="icono" @onclick="@(addparticipante)">
                                <MatIcon Icon="add_circle_outline"></MatIcon>
                            </div>
                        </div>
                        @for (int i = 0; i < docSolicitudBPNDTO.contenidoDTO.otorgantes.Count; i++)
                        {
                            int index = i;
                            <div class="single-textfield-container">
                                <div class="field-container base-field input-group-2 @CurrentEditContext.FieldCssClass(() => docSolicitudBPNDTO.contenidoDTO.otorgantes[index])">
                                    <MatTextField @bind-Value="@docSolicitudBPNDTO.contenidoDTO.otorgantes[index]" Class="text-field-style"
                                                  Label="Nombre del participante"
                                                  @oninput='@(e => KeyUp(e, "nombre", docSolicitudBPNDTO.contenidoDTO.otorgantes[index]))'></MatTextField>
                                    <div class="incorrecto">
                                        <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                                        <ValidationMessage For="@(() => docSolicitudBPNDTO.contenidoDTO.otorgantes[index])" />
                                    </div>
                                    <div class="correcto">
                                        <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                                        <span class="good-msg">Correcto</span>
                                    </div>
                                </div>
                                <div class="base-icon" @onclick="@(() => removeparticipante(index))">
                                    <MatIcon Icon="remove_circle_outline"></MatIcon>
                                </div>
                            </div>
                        }
                        <div class="field-container base-field input-group-2 @CurrentEditContext.FieldCssClass(() => docSolicitudBPNDTO.contenidoDTO.otorgantes)">
                            <div class="incorrecto">
                                <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                                <ValidationMessage For="@(() => docSolicitudBPNDTO.contenidoDTO.otorgantes)" />
                            </div>
                            <div class="correcto">
                                <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                                <span class="good-msg">Correcto</span>
                            </div>
                        </div>
                    </div>



                    <div class="field-container input-group-2">
                        <MatDatePicker @bind-Value="@docSolicitudBPNDTO.contenidoDTO.fecharealizacion" Format="MM/dd/yy H:mm:ss" Class="text-field-style" Label="Fecha de Realizacion" ReadOnly="true"></MatDatePicker>
                    </div>
                </MatTab>
                <MatTab Label="Solicitante">
                    <div class="field-container input-group-2">
                        <MatTextField @bind-Value="@docSolicitudBPNDTO.contenidoDTO.idcliente.datos.nombre" ReadOnly="true" Class="text-field-style" Label="Nombre del solicitante">
                        </MatTextField>
                    </div>
                    <div class="field-container input-group-2">
                        <MatTextField @bind-Value="@docSolicitudBPNDTO.contenidoDTO.idcliente.datos.apellido" ReadOnly="true" Class="text-field-style" Label="Apellido del solicitante">
                        </MatTextField>
                    </div>
                    <div class="field-container input-group-2">
                        <MatTextField @bind-Value="@docSolicitudBPNDTO.contenidoDTO.idcliente.datos.tipodocumento" ReadOnly="true" Class="text-field-style" Label="Tipo de Documento">
                        </MatTextField>
                    </div>
                    <div class="field-container input-group-2">
                        <MatTextField @bind-Value="@docSolicitudBPNDTO.contenidoDTO.idcliente.datos.numerodocumento" ReadOnly="true" Class="text-field-style" Label="Numero de Documento">
                        </MatTextField>
                    </div>
                    <div class="field-container input-group-2">
                        <MatTextField @bind-Value="@docSolicitudBPNDTO.contenidoDTO.idcliente.datos.email" ReadOnly="true" Class="text-field-style" Label="Correo Electronico">
                        </MatTextField>
                    </div>
                </MatTab>
                
            </MatTabGroup>
        </div>
    </EditForm>
</div>
@code {
    [CascadingParameter] WorkEnvironment workspace { get; set; }
    [CascadingParameter(Name = "SesionUsuario")] protected Sesion sesion { get; set; }
    private bool loadprocess = false;

    private void addparticipante()
    {
        //docSolicitudBPNDTO.contenidoDTO.otorgantes.Add(new Otorgante() { index = docSolicitudBPNDTO.contenidoDTO.otorgantes.Count() });
        StateHasChanged();
    }

    private void removeparticipante(int index)
    {
        docSolicitudBPNDTO.contenidoDTO.otorgantes.RemoveAt(index);
        StateHasChanged();
    }

    public SolicitudBPNDTO docSolicitudBPNDTO = new SolicitudBPNDTO()
    {
        tipo = "SolicitudBPN",
        estado = "Pendiente",
        historialcontenido = new List<ContenidoVersion>()
{
            new ContenidoVersion() { version = 1, url = "www.cnl/solicitud_BPN/1", fechamodificacion = new DateTime() }
        },
        historialproceso = new List<Proceso>(),
        contenidoDTO = new ContenidoSolicitudBPNDTO()
        {
            idcliente = new Usuario()
            {
                id = "5eaba912d1768c4570dc1a80",
                tipo = "Cliente",
                usuario = "user1",
                clave = "pass1",
                datos = new Datos()
                {
                    nombre = "Juan Carlos",
                    apellido = "Pillaca",
                    tipodocumento = "D.N.I.",
                    numerodocumento = "12345678",
                    email = "jcPillaca@urp.edu.pe"
                }
            },
            direccionoficio = "av. surco 123",
            idnotario = new Notario()
            {
                id = "5ecb15b38e511a1d5cca29c4",
                nombre = "Fernando Jose",
                apellido = "Ezzpinoza Paredes",
                dni = "4321",
                colegiatura = "4H5H4K6K6V5J233O6HU6U676",
                email = "fernandoparedes@cnl.gob.pe"
            },
            actojuridico = "Mancomunacion de vienes por casamiento civil",
            tipoprotocolo = "minuta",
            otorgantes = new List<string>() { "jose olaya", "francisco bolognesi", "alejandro toledo", "alejandro toledo", "alejandro toledo", "alejandro toledo", "alejandro toledo" },
            fecharealizacion = DateTime.Now
        }
    };

    private OficioBPNDTO documento = new OficioBPNDTO();
    private EditContext _editContext;
    protected override void OnInitialized()
    {
        _editContext = new EditContext(documento);
    }

    void KeyUp(ChangeEventArgs e, string memberName, object val)
    {
        var property = val.GetType().GetProperty(memberName);
        property.SetValue(val, e.Value.ToString());
        var fi = new FieldIdentifier(val, memberName);
        _editContext.NotifyFieldChanged(fi);
    }

    public async Task handleValidSubmit()
    {
        loadprocess = true;
        documento.contenidoDTO.idcliente = docSolicitudBPNDTO.contenidoDTO.idcliente;
        documento.contenidoDTO.direccionoficio = docSolicitudBPNDTO.contenidoDTO.direccionoficio;
        documento.contenidoDTO.idnotario = docSolicitudBPNDTO.contenidoDTO.idnotario;
        documento.contenidoDTO.actojuridico = docSolicitudBPNDTO.contenidoDTO.actojuridico;
        documento.contenidoDTO.tipoprotocolo = docSolicitudBPNDTO.contenidoDTO.tipoprotocolo;
        documento.contenidoDTO.otorgantes = docSolicitudBPNDTO.contenidoDTO.otorgantes;
        documento.contenidoDTO.fecharealizacion = DateTime.Now;

        ExpedienteWrapper expedienteWrapper = new ExpedienteWrapper();
        expedienteWrapper.documento = documento;
        expedienteWrapper.idexpediente = workspace.expedienteseleccionado.idexpediente;
        expedienteWrapper.idusuarioactual = sesion.usuario.id;
        expedienteWrapper.documentoentrada = workspace.expedienteseleccionado.documento.id;

        var httpResponse = await repository.Post<ExpedienteWrapper, OficioBPN>($"api/documentos/documentosbpn", expedienteWrapper);
        if (!httpResponse.Error)
        {
            ExpedienteBandejaDTO expedientebandeja = new ExpedienteBandejaDTO();
            expedientebandeja = workspace.expedienteseleccionado;
            OficioBPN oficiobpn = new OficioBPN();
            oficiobpn = httpResponse.Response;
            expedientebandeja.documento.id = oficiobpn.id;
            expedientebandeja.documento.tipo = oficiobpn.tipo;
            expedientebandeja.documento.historialcontenido = oficiobpn.historialcontenido;
            expedientebandeja.documento.historialproceso = oficiobpn.historialproceso;
            expedientebandeja.documento.contenido = oficiobpn.contenido;
            expedientebandeja.documento.estado = oficiobpn.estado;
            expedientebandeja.documentosobj.Add(expedientebandeja.documento);
            Item itemSalida = new Item()
            {
                nombre = expedientebandeja.tipo,
                valor = expedientebandeja,
                icono = "alarm_add",
                descripcion = ((DocumentoDTO)expedientebandeja.documento).tipo,
                currentPlace = "workspace",
                originPlace = "inputs",
                cliente = expedientebandeja.cliente,
                itemstatus = "registrado"
            };
            //workspace.UpdateDocRegistrado(itemSalida);
            //workspace.UpdateTools("Registrar Documento");
            DocumentoDTO documentoDTO = new DocumentoDTO();
            documentoDTO.id = oficiobpn.id;
            documentoDTO.tipo = oficiobpn.tipo;
            documentoDTO.estado = oficiobpn.estado;
            documentoDTO.contenido = oficiobpn.contenido;
            documentoDTO.historialcontenido = oficiobpn.historialcontenido;
            documentoDTO.historialproceso = oficiobpn.historialproceso;
            documentoDTO.urlanexo = oficiobpn.urlanexo;
            workspace.expedienteseleccionado.documentosobj.Add(documentoDTO);
            workspace.expedienteseleccionado.documento = documentoDTO;

            StateHasChanged();
            await swalfire.successMessage("Oficio de Busqueda de Protocolo Notarial Registrada Correctamente");
        }
        else
        {
            await swalfire.errorMessage("Error en el servidor");
        }
        loadprocess = false;
    }

    public void handleInvalidSubmit()
    {
        loadprocess = false;
        swalfire.errorMessage("Por favor, Verifique los Datos Ingresados");
    }
}
