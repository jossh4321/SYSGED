@inject IRepository repository
@inject ISwalFireMessage swalfire
@using SISGED.Client.Pages.Samples.WorkEnvironment
<style>
    .div-form {
        background-color: #a6a6a6;
        flex-basis: 100%;
        border-radius: 15px 15px 15px 15px;
        width: 100%;
    }

    .field-container {
        display: block;
        padding: 10px;
    }

    .text-field-style {
        display: block !important;
    }
    /*validacion*/
    .validation-message {
        display: inline;
    }

    div.invalid .correcto {
        display: none;
    }

    .single-textfield-container {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
    }

    div.valid .incorrecto,
    div.valid:not(.modified) .correcto {
        display: none;
    }

    .correcto {
        color: green !important;
        font-family: sans-serif;
        font-size: 15px;
        display: flex;
        height: 18px;
    }

    .incorrecto {
        color: red !important;
        font-family: sans-serif;
        font-size: 15px;
        display: flex;
        height: 18px;
    }

    i.val-icon {
        font-size: 20px;
    }

    .good-msg, div.correcto i.good-icon {
        color: green !important;
    }

    div.incorrecto i.bad-icon {
        color: red !important;
    }

    .modal-info-solicitudBPN {
        display: flex;
        flex-direction: column;
        /*height: 700px;*/
        width: 100%;
        background-color: #808080;
        border-radius: 15px 15px 15px 15px;
    }

    .div-form.mat-tab-group {
        max-width: 500px;
    }

    .otorgantes {
        border: 1px solid #ccc;
        background: #f2f2f2;
        display: flex;
        margin: 7px 10px;
        align-items: center;
        flex-direction: column;
        border-radius: 5px 5px 0px 0px;
        border-bottom: 1px solid black;
        
    }

    .base-field {
        flex-basis: 90%;
    }

    .contenedor-otorgantes {
        padding-top: 10px;
        margin: 20px;
        border: 2px solid #666666;
        border-radius: 5px;
    }

    .titulo-otorgantes {
        border: 1px solid black;
        margin: 0px 5px 0px 5px;
        border-radius: 5px 5px 0px 0px;
        background-color: #404040;
        color: white;
        display: flex;
        flex-direction: row;
        justify-content: center;
        align-items: center;
    }

    .title-ot {
        font-size: 16px;
        margin-bottom: 0px;
        margin-top: 5px;
        color: #595959;
    }
</style>
<div class="div-form">
    <EditForm EditContext="@_editContext" Context="CurrentEditContext"
              OnValidSubmit="handleValidSubmit" OnInvalidSubmit="handleInvalidSubmit">
        <FluentValidator></FluentValidator>
        <div class="modal-info-solicitudBPN">
            <MatTabGroup>
                <MatTab Label="Solicitud">
                    <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass( () => solicitudbpn.contenidoDTO.actojuridico)">
                        <MatTextField @bind-Value="@solicitudbpn.contenidoDTO.actojuridico" Class="text-field-style" Label="Acto Juridico"
                                      @oninput='@(e => KeyUp(e,"nombrecliente",solicitudbpn))'></MatTextField>
                        <div class="incorrecto">
                            <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                            <ValidationMessage For="@(() => solicitudbpn.contenidoDTO.actojuridico)" />
                        </div>
                        <div class="correcto">
                            <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                            <span class="good-msg">Correcto</span>
                        </div>
                    </div>
                    <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass( () => solicitudbpn.contenidoDTO.direccionoficio)">
                        <MatTextField @bind-Value="@solicitudbpn.contenidoDTO.direccionoficio" Class="text-field-style" Label="Direccion de Oficio"
                                      @oninput='@(e => KeyUp(e,"nombrecliente",solicitudbpn))'></MatTextField>
                        <div class="incorrecto">
                            <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                            <ValidationMessage For="@(() => solicitudbpn.contenidoDTO.direccionoficio)" />
                        </div>
                        <div class="correcto">
                            <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                            <span class="good-msg">Correcto</span>
                        </div>
                    </div>
                    <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass( () => solicitudbpn.contenidoDTO.tipoprotocolo)">
                        <MatTextField @bind-Value="@solicitudbpn.contenidoDTO.tipoprotocolo" Class="text-field-style" Label="Tipo de Protocolo"
                                      @oninput='@(e => KeyUp(e,"numerodocumento",solicitudbpn))'></MatTextField>
                        <div class="incorrecto">
                            <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                            <ValidationMessage For="@(() => solicitudbpn.contenidoDTO.tipoprotocolo)" />
                        </div>
                        <div class="correcto">
                            <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                            <span class="good-msg">Correcto</span>
                        </div>
                    </div>

                    <!--Copiar y pegar codigo del div para el for de Otorgantes-->

                    <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass( () => solicitudbpn.contenidoDTO.fecharealizacion)">
                        <MatDatePicker @bind-Value="@solicitudbpn.contenidoDTO.fecharealizacion" Format="MM/dd/yy" Class="text-field-style" Label="Fecha de Realizacion"></MatDatePicker>
                    </div>
                </MatTab>
                <MatTab Label="Otorgantes">
                    <div class="contenedor-otorgantes">
                        <div class="titulo-otorgantes">
                            <div><span class="titulo">Participantes</span></div>
                            <div class="icono" @onclick="@(addparticipante)">
                                <MatIcon Icon="add_circle_outline"></MatIcon>
                            </div>
                        </div>
                        @for (int i = 0; i < solicitudbpn.contenidoDTO.otorganteslista.Count; i++)
                        {

                            int index = i;
                            <div class="single-textfield-container">
                                <div class="field-container base-field input-group-2 @CurrentEditContext.FieldCssClass(() => solicitudbpn.contenidoDTO.otorganteslista[index].nombre)">
                                    <MatTextField @bind-Value="@solicitudbpn.contenidoDTO.otorganteslista[index].nombre" Class="text-field-style"
                                                  Label="Nombres"
                                                  @oninput='@(e => KeyUp(e, "nombre", solicitudbpn.contenidoDTO.otorganteslista[index]))'></MatTextField>
                                    <div class="incorrecto">
                                        <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                                        <ValidationMessage For="@(() => solicitudbpn.contenidoDTO.otorganteslista[index].nombre)" />
                                    </div>
                                    <div class="correcto">
                                        <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                                        <span class="good-msg">Correcto</span>
                                    </div>
                                </div>
                            </div>
                            <!--<div class="single-textfield-container">
                    <div class="field-container base-field input-group-2 @CurrentEditContext.FieldCssClass(() => solicitudbpn.contenidoDTO.otorganteslista[index].apellido)">
                        <MatTextField @bind-Value="@solicitudbpn.contenidoDTO.otorganteslista[index].apellido" Class="text-field-style"
                                      Label="Apellidos"
                                      @oninput='@(e => KeyUp(e, "apellido", solicitudbpn.contenidoDTO.otorganteslista[index]))'></MatTextField>
                        <div class="incorrecto">
                            <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                            <ValidationMessage For="@(() => solicitudbpn.contenidoDTO.otorganteslista[index].apellido)" />
                        </div>
                        <div class="correcto">
                            <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                            <span class="good-msg">Correcto</span>
                        </div>
                    </div>
                </div>

                <div class="single-textfield-container">
                    <div class="field-container base-field input-group-2 @CurrentEditContext.FieldCssClass(() => solicitudbpn.contenidoDTO.otorganteslista[index].dni)">
                        <MatTextField @bind-Value="@solicitudbpn.contenidoDTO.otorganteslista[index].dni" Class="text-field-style"
                                      Label="D.N.I."
                                      @oninput='@(e => KeyUp(e, "dni", solicitudbpn.contenidoDTO.otorganteslista[index]))'></MatTextField>
                        <div class="incorrecto">
                            <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                            <ValidationMessage For="@(() => solicitudbpn.contenidoDTO.otorganteslista[index].dni)" />
                        </div>
                        <div class="correcto">
                            <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                            <span class="good-msg">Correcto</span>
                        </div>
                    </div>
                </div>-->

                            <div class="base-icon" @onclick="@(() => removeparticipante(index))">
                                <MatIcon Icon="remove_circle_outline"></MatIcon>
                            </div>

                        }
                        <div class="field-container base-field input-group-2 @CurrentEditContext.FieldCssClass(() => solicitudbpn.contenidoDTO.otorganteslista)">
                            <div class="incorrecto">
                                <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                                <ValidationMessage For="@(() => solicitudbpn.contenidoDTO.otorganteslista)" />
                            </div>
                            <div class="correcto">
                                <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                                <span class="good-msg">Correcto</span>
                            </div>
                        </div>
                    </div>
                </MatTab>
                <MatTab Label="Subir Anexo">
                    <DragnDrop Label="" ImagenSeleccionada="ImagenSeleccionada"></DragnDrop>
                    
                </MatTab>
                <!--
    <MatTab Label="Solicitante">
        <div class="field-container input-group-2">
            <MatTextField @bind-Value="@solicitudbpn.contenidoDTO.idcliente.datos.nombre" ReadOnly="false" Class="text-field-style" Label="Nombre del solicitante">
            </MatTextField>
        </div>
        <div class="field-container input-group-2">
            <MatTextField @bind-Value="@solicitudbpn.contenidoDTO.idcliente.datos.apellido" ReadOnly="false" Class="text-field-style" Label="Apellido del solicitante">
            </MatTextField>
        </div>
        <div class="field-container input-group-2">
            <MatTextField @bind-Value="@solicitudbpn.contenidoDTO.idcliente.datos.tipodocumento" ReadOnly="false" Class="text-field-style" Label="Tipo de Documento">
            </MatTextField>
        </div>
        <div class="field-container input-group-2">
            <MatTextField @bind-Value="@solicitudbpn.contenidoDTO.idcliente.datos.numerodocumento" ReadOnly="false" Class="text-field-style" Label="Numero de Documento">
            </MatTextField>
        </div>
        <div class="field-container input-group-2">
            <MatTextField @bind-Value="@solicitudbpn.contenidoDTO.idcliente.datos.email" ReadOnly="false" Class="text-field-style" Label="Correo Electronico">
            </MatTextField>
        </div>
    </MatTab>-->
                <div class="field-container">
                    <MatButton type="submit"
                               Disabled="@loadprocess"
                               Icon="@MatBlazor.MatIconNames.Check_circle_outline"
                               Class="button-input-style mat-success-c sub-but">Registrar</MatButton>
                </div>
            </MatTabGroup>
        </div>
        


    </EditForm>
</div>
@code {
    [CascadingParameter] WorkEnvironment workspace { get; set; }
    [CascadingParameter(Name = "SesionUsuario")] protected Sesion sesion { get; set; }
    [CascadingParameter]
    MainLayout layout { get; set; }
    private bool loadprocess = false;
    private string imagenTemporal;
    private SolicitudBPNDTO solicitudbpn = new SolicitudBPNDTO();
    private EditContext _editContext;

    protected override async Task OnInitializedAsync()
    {
        solicitudbpn.contenidoDTO.otorganteslista = new List<Otorgantelista>() { new Otorgantelista() { index = 0 } };
        solicitudbpn.contenidoDTO.Urlanexo = new List<string>();
        _editContext = new EditContext(solicitudbpn);
        foreach (string u in solicitudbpn.contenidoDTO.Urlanexo)
        {
            if (!string.IsNullOrWhiteSpace(u))
            {
                imagenTemporal = u;
                solicitudbpn.contenidoDTO.Urlanexo = null;
            }
        }
    }

    /* Reemplazado por el OnInitializedAsync()
    protected override void OnInitialized()
    {

        _editContext = new EditContext(documento);
    }
    */
    private void ImagenSeleccionada(string imagenbase64)
    {
        solicitudbpn.contenidoDTO.Urlanexo.Add(imagenbase64);
    }
    void KeyUp(ChangeEventArgs e, string memberName, object val)
    {
        var property = val.GetType().GetProperty(memberName);
        property.SetValue(val, e.Value.ToString());
        var fi = new FieldIdentifier(val, memberName);
        _editContext.NotifyFieldChanged(fi);
    }


    public async Task handleValidSubmit()
    {
        loadprocess = true;
        /*
        solicitudbpn.contenidoDTO.idcliente = solicitudbpn.contenidoDTO.idcliente;
        solicitudbpn.contenidoDTO.direccionoficio = solicitudbpn.contenidoDTO.direccionoficio;
        solicitudbpn.contenidoDTO.idnotario = solicitudbpn.contenidoDTO.idnotario;
        solicitudbpn.contenidoDTO.actojuridico = solicitudbpn.contenidoDTO.actojuridico;
        solicitudbpn.contenidoDTO.tipoprotocolo = solicitudbpn.contenidoDTO.tipoprotocolo;
        solicitudbpn.contenidoDTO.otorgantes = solicitudbpn.contenidoDTO.otorgantes;
        solicitudbpn.contenidoDTO.fecharealizacion = DateTime.Now;
        */

        ExpedienteWrapper expedienteWrapper = new ExpedienteWrapper();
        expedienteWrapper.documento = solicitudbpn;
        //expedienteWrapper.idexpediente = workspace.expedienteseleccionado.idexpediente;
        expedienteWrapper.idusuarioactual = "GAAAADenuncia";
        //expedienteWrapper.idusuarioactual = sesion.usuario.id;
        //expedienteWrapper.documentoentrada = workspace.expedienteseleccionado.documento.id;

        var httpResponse = await repository.Post<ExpedienteWrapper, ExpedienteDocumentoBPNDTO>($"api/documentos/documentosolicbpn", expedienteWrapper);
        if (!httpResponse.Error)
        {
            ExpedienteBandejaDTO expedientebandeja = new ExpedienteBandejaDTO();
            expedientebandeja.idexpediente = httpResponse.Response.expediente.id;
            SolicitudBPN solicitudBPN = new SolicitudBPN();
            solicitudBPN = httpResponse.Response.solicitduBPN;
            expedientebandeja.documento = new DocumentoDTO();
            expedientebandeja.documentosobj = new List<DocumentoDTO>();
            expedientebandeja.cliente = new Cliente();
            expedientebandeja.documento.id = solicitudBPN.id;
            expedientebandeja.documento.tipo = solicitudBPN.tipo;
            expedientebandeja.documento.historialcontenido = solicitudBPN.historialcontenido;
            expedientebandeja.documento.historialproceso = solicitudBPN.historialproceso;
            expedientebandeja.documento.contenido = solicitudBPN.contenido;
            expedientebandeja.documento.estado = solicitudBPN.estado;
            expedientebandeja.cliente = httpResponse.Response.expediente.cliente;
            expedientebandeja.documentosobj.Add(expedientebandeja.documento);
            expedientebandeja.tipo = httpResponse.Response.expediente.tipo;
            await layout.Send("josue", expedientebandeja);
            /*
            ExpedienteBandejaDTO expedientebandeja = new ExpedienteBandejaDTO();
            expedientebandeja = workspace.expedienteseleccionado;
            OficioBPN oficiobpn = new OficioBPN();
            oficiobpn = httpResponse.Response;
            expedientebandeja.documento.id = oficiobpn.id;
            expedientebandeja.documento.tipo = oficiobpn.tipo;
            expedientebandeja.documento.historialcontenido = oficiobpn.historialcontenido;
            expedientebandeja.documento.historialproceso = oficiobpn.historialproceso;
            expedientebandeja.documento.contenido = oficiobpn.contenido;
            expedientebandeja.documento.estado = oficiobpn.estado;
            expedientebandeja.documentosobj.Add(expedientebandeja.documento);

            Item itemSalida = new Item()
            {
                nombre = expedientebandeja.tipo,
                valor = expedientebandeja,
                icono = "alarm_add",
                descripcion = ((DocumentoDTO)expedientebandeja.documento).tipo,
                currentPlace = "workspace",
                originPlace = "inputs",
                cliente = expedientebandeja.cliente,
                itemstatus = "registrado"
            };
            //workspace.UpdateDocRegistrado(itemSalida);
            //workspace.UpdateTools("Registrar Documento");
            DocumentoDTO documentoDTO = new DocumentoDTO();
            documentoDTO.id = oficiobpn.id;
            documentoDTO.tipo = oficiobpn.tipo;
            documentoDTO.estado = oficiobpn.estado;
            documentoDTO.contenido = oficiobpn.contenido;
            documentoDTO.historialcontenido = oficiobpn.historialcontenido;
            documentoDTO.historialproceso = oficiobpn.historialproceso;
            documentoDTO.urlanexo = oficiobpn.urlanexo;
            workspace.expedienteseleccionado.documentosobj.Add(documentoDTO);
            workspace.expedienteseleccionado.documento = documentoDTO;

            StateHasChanged();*/
            await swalfire.successMessage("Oficio de Busqueda de Protocolo Notarial Registrada Correctamente");
        }
        else
        {
            await swalfire.errorMessage("Error en el servidor");
        }
        loadprocess = false;
    }

    public void handleInvalidSubmit()
    {
        loadprocess = false;
        swalfire.errorMessage("Por favor, Verifique los Datos Ingresados");
    }

    private void addparticipante()
    {
        //Corregir
        solicitudbpn.contenidoDTO.otorganteslista.Add(new Otorgantelista() { index = (solicitudbpn.contenidoDTO.otorganteslista.Count) });
        StateHasChanged();
    }

    private void removeparticipante(int index)
    {
        solicitudbpn.contenidoDTO.otorganteslista.RemoveAt(index);
        StateHasChanged();
    }
    /*
    public SolicitudBPNDTO docSolicitudBPNDTO = new SolicitudBPNDTO()
    {
        tipo = "SolicitudBPN",
        estado = "Pendiente",
        historialcontenido = new List<ContenidoVersion>()
{
            new ContenidoVersion() { version = 1, url = "www.cnl/solicitud_BPN/1", fechamodificacion = new DateTime() }
        },
        historialproceso = new List<Proceso>(),
        contenidoDTO = new ContenidoSolicitudBPNDTO()
        {
            idcliente = new Usuario()
            {
                id = "5eaba912d1768c4570dc1a80",
                tipo = "Cliente",
                usuario = "user1",
                clave = "pass1",
                datos = new Datos()
                {
                    nombre = "Juan Carlos",
                    apellido = "Pillaca",
                    tipodocumento = "D.N.I.",
                    numerodocumento = "12345678",
                    email = "jcPillaca@urp.edu.pe"
                }
            },
            direccionoficio = "av. surco 123",
            idnotario = new Notario()
            {
                id = "5ecb15b38e511a1d5cca29c4",
                nombre = "Fernando Jose",
                apellido = "Ezzpinoza Paredes",
                dni = "4321",
                colegiatura = "4H5H4K6K6V5J233O6HU6U676",
                email = "fernandoparedes@cnl.gob.pe"
            },
            actojuridico = "Mancomunacion de vienes por casamiento civil",
            tipoprotocolo = "minuta",
            //Corregir
            //otorgantes = new List<string>() { "jose olaya", "francisco bolognesi", "alejandro toledo", "alejandro toledo", "alejandro toledo", "alejandro toledo", "alejandro toledo" },
            fecharealizacion = DateTime.Now
        }
    };
    */


}
