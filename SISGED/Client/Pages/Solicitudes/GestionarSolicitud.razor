@page "/gestionarsolicitud"
@inject IRepository repository
@layout MainLayout
@inject NavigationManager navigationManager
@inject HttpClient Http
@inject IJSRuntime js
@inject ISwalFireMessage swalfire

<style>
    .mdc-floating-label--float-above{
        color:black !important;
    }

    :root {
        --mdc-theme-primary: #1FA270 !important;
    }
    .mdc-select:not(.mdc-select--disabled) .mdc-select__anchor {
        background-color: #ACB1B6 !important;
    }
    .mdc-dialog .mdc-dialog__surface {
        width: 800px;
    }

    .mdc-paginator-container {
        color: black;
    }

    .container-c {
        display: inline-flex;
        flex-wrap: wrap;
        flex-direction: column;
        margin: 10px auto;
    }

    tr.mdc-table-header-row {
        background-color: #1a1a1a !important;
    }

    .table-header {
        color: white;
        font-family: sans-serif;
        font-size: 15px;
        display: inline-block
    }

    tbody {
        background-color: #DCDCDC !important;
    }

    .table-row {
        color: black;
        font-family: sans-serif;
        font-size: 14px;
        display: inline-block
    }

    .mat-success-c {
        color: green !important;
        border: 1px solid green !important;
        border-radius: 15px !important;
        font-size: 13px !important;
        transition: all 300ms !important;
    }

    .mat-dark-c {
        color: black !important;
        border: 1px solid black !important;
        border-radius: 15px !important;
        font-size: 13px !important;
        transition: all 300ms !important;
    }
    /*#ffd11a*/
    .mat-warning-c {
        background-color: #EABB00 !important;
        color: #F3F3F3 !important;
        border-radius: 15px !important;
        font-size: 13px !important;
        transition: all 300ms !important;
    }

    .option-color {
        color: black !important;
    }

    .mat-danger-c {
        color: #F3F3F3 !important;
        background-color: #E94343 !important;
        border-radius: 15px !important;
        font-size: 13px !important;
        transition: all 300ms !important;
    }

    .mat-pay-c {
        color: #F3F3F3 !important;
        background-color: #53A5F7 !important;
        border-radius: 15px !important;
        font-size: 13px !important;
        transition: all 300ms !important;
    }

    .mat-disabled-c {
        color: #818181 !important;
        border: 1px solid #818181 !important;
        border-radius: 15px !important;
        font-size: 13px !important;
        transition: all 300ms !important;
    }

    .mat-info-c {
        background-color: #018786 !important;
        color: #F3F3F3 !important;
        border-radius: 15px !important;
        font-size: 13px !important;
        transition: all 300ms !important;
    }

        .mat-success-c:hover, .mat-danger-c:hover, .mat-info-c:hover, .mat-warning-c:hover, .mat-dark-c:hover {
            background-color: none !important;
            transform: scale(1.07,1.07) !important;
        }


    .button-container {
        display: block;
        margin: 5px;
        flex-grow: 1;
    }

    .button-container-lvl {
        display: flex;
        flex-wrap: wrap;
        flex-direction: row;
    }

    .mdc-table td:last-child {
        width: unset !important;
    }

    .head-flex {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-between;
        color: white
    }

    .pruebita {
        width: 300px;
        height: 200px;
        border: 1px solid black;
    }

    .loader-block {
        display: flex;
        margin-top: 20px !important;
        min-width: 800px;
        height: 300px;
        background-color: #4d4d4d;
        justify-content: center;
        justify-content: center;
        align-items: center;
    }

    .formulario-eleccion .mdc-dialog__surface {
        width: 350px !important;
    }
</style>

<div class="container-c" style=" width: auto;">
    <div class="head-flex">
        <h1 style="color:#25393D">Gestión de Solicitudes</h1>
        <MatTooltip Tooltip="Registrar Solicitud!" Wrap="true" Position="@MatTooltipPosition.Left">
            <MatFAB Icon="@MatIconNames.Add" @onclick="@OpenDialogRegistrar"></MatFAB>
        </MatTooltip>
    </div>
    @if (cargatabla == true)
    {
        <div class="loader-block">
            <div class="spinner-border" style="width: 7rem; height: 7rem; color: #ccc;" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
    }
    else
    {

<CascadingValue Value="this">
    <MatTable Items="docs" class="mat-elevation-z5" Style="width:auto;">
        <MatTableHeader >
            <th style="background-color:#25393D;">
                <span class="table-header">Titulo</span>
            </th>
            <th style="background-color:#25393D;">
                <span class="table-header">Tipo</span>
            </th>
            <th style="background-color:#25393D;">
                <span class="table-header">Estado</span>
            </th>
            <th style="background-color:#25393D;">
                <span class="table-header">Fecha</span>
            </th>
            <th style="background-color:#25393D;">
                <span class="table-header">Funciones</span>
            </th>
        </MatTableHeader>
        <MatTableRow>

            @{
                int index = context.historialcontenido.Count;

                <td>
                    <span class="table-row">@context.contenido.titulo</span>
                </td>
                <td>
                    <span class="table-row">@context.tipo</span>
                </td>
                <td>
                    <span class="table-row">@context.estado</span>
                </td>
                @if (index > 0)
                {
                    <td>
                        <span class="table-row">@context.historialcontenido[index - 1].fechamodificacion</span>
                    </td>
                }
                else
                {
                    <td>
                        <span class="table-row">No hay historial disponible</span>
                    </td>
                }
                /**/
                /**/
                <td>
                    @if (context.estado == "revisado" || context.estado == "cancelado" || context.estado == "finalizado" || context.estado == "emitido") { activator = true; }
                    else { activator = false; }
                    <div class="button-container-lvl">
                        <div class="button-container">
                            <MatButton Icon="@MatIconNames.Description" Class="mat-info-c" OnClick="@(()=>OpenDialogVerDetalles(context.id))" Style="width:100% !important">Ver Detalles</MatButton>
                        </div>
                        <div class="button-container">
                            @if (activator == false)
                            {
                                <MatButton Icon="@MatIconNames.Build" Class="mat-warning-c" OnClick="@(()=>OpenDialogModificar(context.id))" Style="width:100% !important">Modificar</MatButton>

                            }
                            else
                            {
                                <MatButton Icon="@MatIconNames.Build" Class="mat-disabled-c" Disabled="true" OnClick="@(()=>OpenDialogModificar(context.id))" Style="width:100% !important">Modificar</MatButton>

                            }

                        </div>
                        <div class="button-container">
                            @if (activator == false)
                            {
                                <MatButton Icon="@MatIconNames.Cancel_presentation" Class="mat-danger-c" OnClick="@(()=>abrirNotificacionEstado(context.id))" Style="width:100% !important">Cancelar</MatButton>

                            }
                            else
                            {
                                <MatButton Icon="@MatIconNames.Cancel_presentation" Class="mat-disabled-c" Disabled="true" OnClick="@(e => abrirNotificacionEstado(context.id))" Style="width:100% !important">Cancelar</MatButton>

                            }
                        </div>
                        <div class="button-container" style="margin:7px">
                            @if (context.estado == "emitido")
                            {
                                <MatButton Icon="@MatIconNames.Payment" Class="mat-pay-c" Disabled="false" OnClick="@(() => Pagar(context.id))" Style="width: 100% !important ">Pagar</MatButton>
                            }
                            @if (context.estado == "finalizado" && context.urlexpediente != "ninguno")
                            {
                                <!--MatButton Icon="@MatIconNames.Picture_as_pdf" Class="mat-pay-c" Disabled="false" OnClick="@(e => abrirPrevisualizacion())" Style="width:100% !important">Visualizar Documento </MatButton-->
                                 <a href="@context.urlexpediente" class="mat-pay-c"  target="_blank" style="padding:15px;    padding: 15px;
                                    display: block;
                                    height:30px;
                                    width: inherit;
                                    text-align: center;">Visualizar Escritura Publica</a>
                            }
                        </div>
                    </div>


                </td>
            }
        </MatTableRow>
    </MatTable>
</CascadingValue>
        

    }
</div>

<MatDialog @bind-IsOpen="@dialogIsOpen_Previsualizacion">
    @*<iframe src="@urlDocumentoFinal" style="width:100%;height:500px;" >
    </iframe>*@

</MatDialog>

<MatDialog @bind-IsOpen="@dialogIsOpen_Registrar">
    <CascadingValue Value="this">
        <RegistrarSolicitudInicial cerrarDialogoRegistro="cerrarDialogoRegistro"></RegistrarSolicitudInicial>
    </CascadingValue>
    <MatDialogActions>
        <MatButton OnClick="@OkClick">Cancelar</MatButton>
    </MatDialogActions>
</MatDialog>

<MatDialog @bind-IsOpen="@dialogIsOpen_Modificar">
    <MatDialogTitle>Modificar Solicitud</MatDialogTitle>
    <CascadingValue Value="this">
        <ModificarSolicitudInicial cerrarDialogoModificacion="cerrarDialogoModificacion"
                                   solicinicialdto="solicinicialdto" />
    </CascadingValue>
    <MatDialogActions>
        <MatButton OnClick="@OkClick">Cancelar</MatButton>
    </MatDialogActions>
</MatDialog>

<MatDialog @bind-IsOpen="@dialogIsOpen_VerDetalles">
    <MatDialogTitle>Detalles de la Solicitud</MatDialogTitle>
    <CascadingValue Value="this">
        <DetalleSolicitudInicial solicinicialdto="solicinicialdto" cerrarDialogoDetalle="cerrarDialogoDetalle" />
    </CascadingValue>
    <MatDialogActions>
        <MatButton OnClick="@OkClick">Cancelar</MatButton>
    </MatDialogActions>
</MatDialog>

@code {
    
    string TipoSolicitud;
    string TipoSolicitud2;
    string tipo_front;
    bool activator;

    public bool cargatabla { get; set; } = false;
    private bool dialogIsOpen_Registrar = false;
    private bool dialogIsOpen_Modificar = false;
    private bool dialogIsOpen_VerDetalles = false;
    private bool dialogIsOpen_Previsualizacion = false;
    bool dialogIsOpen_Cancelar = false;

    bool Registrar_SolicDenuncia = false;
    bool Registrar_SolicBPN = false;
    bool Registrar_SolicEF = false;
    [CascadingParameter]
    MainLayout layout { get; set; }
    [CascadingParameter(Name = "SesionUsuario")] protected Sesion sesion { get; set; }
    [CascadingParameter] GestionarSolicitud solicitudpadre { get; set; }
    public SolicitudInicialDTO solicinicialdto = new SolicitudInicialDTO();
    public List<DocumentoADTO2> docs { get; set; } = new List<DocumentoADTO2>();

    protected override async Task OnInitializedAsync()
    {
        cargatabla = true;
        await MostrarTabla();
        cargatabla = false;
    }

    public async Task MostrarTabla()
    {

        //var httpResponse = await repository.Get<List<DocumentoADTO2>>($"api/documentos/documentosolicitudes/{sesion.usuario.datos.numerodocumento}");
        var httpResponse = await repository.Get<List<DocumentoADTO2>>($"api/documentos/documentosolicitudes3/{sesion.usuario.datos.numerodocumento}");
        if (!httpResponse.Error)
        {
            DocumentoADTO2 docActivator = new DocumentoADTO2();
            docs = httpResponse.Response;
            if (docActivator.estado == "revisado")
            {
                activator = true;
            }
            else
            {
                activator = false;
            }
        }
        else
        {
            Console.WriteLine("Ocurrio un error");
        }

    }

    void CancelButton()
    {
        Registrar_SolicDenuncia = false;
        Registrar_SolicBPN = false;
        Registrar_SolicEF = false;
    }



    void OpenDialogRegistrar()
    {
        dialogIsOpen_Registrar = true;
        //navigationManager.NavigateTo("solicitud/crear");
    }

    public async Task OpenDialogVerDetalles(string id)
    {

        SolicitudInicialDTO docadto = new SolicitudInicialDTO();
        var httpResponse = await repository.Get<SolicitudInicialDTO>($"api/documentos/obtenersolicitudinicial?iddoc={id}");
        if (!httpResponse.Error)
        {
            docadto = httpResponse.Response;
            solicinicialdto.contenidoDTO.titulo = docadto.contenidoDTO.titulo;
            solicinicialdto.contenidoDTO.descripcion = docadto.contenidoDTO.descripcion;
            dialogIsOpen_VerDetalles = true;
        }
        else
        {
            await swalfire.errorMessage("Ocurrio un error al abrir el modal, intentelo más tarde");
        }

    }
    public async Task OpenDialogModificar(string id)
    {
        SolicitudInicialDTO docadto = new SolicitudInicialDTO();
        var httpResponse = await repository.Get<SolicitudInicialDTO>($"api/documentos/obtenersolicitudinicial?iddoc={id}");
        if (!httpResponse.Error)
        {
            docadto = httpResponse.Response;
            solicinicialdto.id = docadto.id;
            solicinicialdto.contenidoDTO.titulo = docadto.contenidoDTO.titulo;
            solicinicialdto.contenidoDTO.descripcion = docadto.contenidoDTO.descripcion;
            dialogIsOpen_Modificar = true;
        }
        else
        {
            await swalfire.errorMessage("Ocurrio un error al abrir el modal, intentelo más tarde");
        }
        StateHasChanged();
    }


    void OpenDialogCancelar()
    {
        dialogIsOpen_Cancelar = true;
        //Consultar
        //Modificar
    }

    public void OkClick()
    {
        dialogIsOpen_Registrar = false;

        dialogIsOpen_Modificar = false;
        dialogIsOpen_VerDetalles = false;
        dialogIsOpen_Cancelar = false;


        TipoSolicitud = "nulo";
    }

    private async Task Pagar(string code)
    {
        var exp = await repository.Get<ExpedienteDTO>($"api/expediente/getbynested?iddoc={code}");
        DocumentoExpediente documentoExpediente = (DocumentoExpediente)(((ExpedienteDTO)exp.Response).documentos.Last());
        DocumentoDTO resultado = (DocumentoDTO)(await repository.Get<DocumentoDTO>($"api/documentos/documentodto?iddoc={documentoExpediente.iddocumento}")).Response;
        var httpResponse = await repository.Post<MercadoPagoRequest, MercadoPagoResponse>("api/mercadopago/request", new MercadoPagoRequest { aplicacion = "10", codigoreferencia = $"{code}-{documentoExpediente.iddocumento}", descripcion = "Solicitud Busqueda Protocolo Notarial", monto = $"{(resultado.tipo.Contains("BPN") ? System.Text.Json.JsonSerializer.Deserialize<ContenidoResultadoBPN>(resultado.contenido.ToString()).costo : System.Text.Json.JsonSerializer.Deserialize<ContenidoConclusionFirma>(resultado.contenido.ToString()).precio)}" });
        navigationManager.NavigateTo(httpResponse.Response.url);
    }

    public async Task abrirNotificacionEstado(string idsolic)
    {
        bool estado;
        estado = await js.InvokeAsync<bool>("SwalFireEstado", "Cancelación de Solicitud");
        if (estado == true)
        {
            SolicitudInicialDTO docadto = new SolicitudInicialDTO();
            docadto.id = idsolic;
            docadto.estado = "cancelado";
            ExpedienteWrapper expedienteWrapper = new ExpedienteWrapper();
            expedienteWrapper.documento = docadto;


            var httpResponse = await repository.Put<ExpedienteWrapper>($"api/documentos/estadosolicitud", expedienteWrapper);
            if (!httpResponse.Error)
            {
                //solicitud = new SolicitudInicialDTO();
                //_editContext = new EditContext(solicitud);
                //_editContext.MarkAsUnmodified();
                //_editContext.NotifyValidationStateChanged();
                Console.WriteLine("cancelacion exitosa");
                await MostrarTabla();
                StateHasChanged();


            }
            else
            {
                Console.WriteLine("Algo Mal en la cancelacion");
            }
            await swalfire.successMessage("Se canceló Satisfactoriamente");

        }
        else
        {
            await swalfire.warningMessage($"Proceso de Modificacion de Estado Cancelado");
        }
        StateHasChanged();


    }
    public void abrirPrevisualizacion()
    {
        dialogIsOpen_Previsualizacion = true;

    }

    public void cerrarDialogoRegistro(bool cerrar) => dialogIsOpen_Registrar = cerrar;
    public void cerrarDialogoModificacion(bool cerrar) => dialogIsOpen_Modificar = cerrar;
    public void cerrarDialogoDetalle(bool cerrar) => dialogIsOpen_VerDetalles = cerrar;
    public void cerrarDialogoPrevisualización(bool cerrar) => dialogIsOpen_Previsualizacion  = cerrar;


}
