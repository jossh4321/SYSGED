@page  "/ModificarPerfil2"
@layout MainLayout
@inject IRepository repository
@inject ISwalFireMessage swalfire
@inject NavigationManager navigationManager
@using SISGED.Client.Pages.Samples.WorkEnvironment
<style>
    .div-form {
        background-color: #BDECB6;
        flex-basis: 100%;
        border-radius: 2px 2px 1px 1px;
        width: 80%;
        heigth: 4px;
    }

    .centro {
        margin-left: auto;
        margin-right: auto;
        text-align: center;
    }

    .field-container {
        display: block;
        padding: 5px;
    }

    .text-field-style {
        display: block !important;
        width: 350px;
        heigth: 4px
    }

    /*validacion*/
    .validation-message {
        display: inline;
    }

    div.invalid .correcto {
        display: none;
    }

    div.valid .incorrecto,
    div.valid:not(.modified) .correcto {
        display: none;
    }

    .correcto {
        color: green !important;
        font-family: sans-serif;
        font-size: 15px;
        display: flex;
        height: 18px;
    }

    .incorrecto {
        color: red !important;
        font-family: sans-serif;
        font-size: 15px;
        display: flex;
        height: 18px;
    }

    i.val-icon {
        font-size: 20px;
    }

    .good-msg, div.correcto i.good-icon {
        color: green !important;
    }

    div.incorrecto i.bad-icon {
        color: red !important;
    }

    .modal-info-solicitudBPN {
        display: flex;
        flex-direction: column;
        /*height: 700px;*/
        width: 300px;
        background-color: #FFFFFF;
    }

    .div-form.mat-tab-group {
        max-width: 300px;
    }

    .otorgantes {
        border: 1px solid #ccc;
        background: #FFFFFF;
        display: flex;
        margin: 7px 10px;
        align-items: center;
        flex-direction: column;
        border-radius: 5px 5px 0px 0px;
        border-bottom: 1px solid black;
    }

    .title-ot {
        font-size: 16px;
        margin-bottom: 0px;
        margin-top: 5px;
        color: #FFFFFF;
    }
</style>
<div class="div-form">

    <EditForm EditContext="@_editContext" Context="CurrentEditContext"
              OnValidSubmit="handleValidSubmit" OnInvalidSubmit="handleInvalidSubmit">
        <FluentValidator></FluentValidator>
        <MatTabGroup>
            <MatTab Label="Informacion  de  Usuario ">



                <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass(() => usuario.usuario)">
                    <MatTextField @bind-Value="@usuario.usuario" Class="text-field-style" Label="Usuario"
                                  @oninput='@(e => KeyUp(e, "usuario", usuario))'></MatTextField>


                    <div class="incorrecto">
                        <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                        <ValidationMessage For="@(() => usuario.usuario)" />
                    </div>
                    <div class="correcto">
                        <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                        <span class="good-msg">Correcto</span>
                    </div>
                </div>
                <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass(() => usuario.datos.nombre)">
                    <MatTextField @bind-Value="@usuario.datos.nombre" Class="text-field-style" Label="Nombres"
                                  @oninput='@(e => KeyUp(e, "nombre", usuario.datos))'></MatTextField>


                    <div class="incorrecto">
                        <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                        <ValidationMessage For="@(() => usuario.datos.nombre)" />
                    </div>
                    <div class="correcto">
                        <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                        <span class="good-msg">Correcto</span>
                    </div>
                </div>
                @*///////////////////////////////////////////////////*@
                <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass(() => usuario.datos.apellido)">
                    <MatTextField @bind-Value="@usuario.datos.apellido" Class="text-field-style" Label="Apellidos"
                                  @oninput='@(e => KeyUp(e, "apellido", usuario.datos))'></MatTextField>


                    <div class="incorrecto">
                        <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                        <ValidationMessage For="@(() => usuario.datos.apellido)" />
                    </div>
                    <div class="correcto">
                        <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                        <span class="good-msg">Correcto</span>
                    </div>
                </div>
                @*///////////////////////////////////////////////////*@
                @*///////////////////////////////////////////////////*@
                <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass(() => usuario.datos.fechanacimiento)">
                    <MatTextField @bind-Value="@usuario.datos.fechanacimiento" Class="text-field-style" Label="Fecha de Nacimiento"
                                  @oninput='@(e => KeyUp(e, "fechanacimiento", usuario.datos))'></MatTextField>


                    <div class="incorrecto">
                        <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                        <ValidationMessage For="@(() => usuario.datos.fechanacimiento)" />
                    </div>
                    <div class="correcto">
                        <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                        <span class="good-msg">Correcto</span>
                    </div>
                </div>
                @*///////////////////////////////////////////////////*@
                <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass(() => usuario.datos.tipodocumento)">
                    <MatTextField @bind-Value="@usuario.datos.tipodocumento" Class="text-field-style" Label="Tipo de documento"
                                  @oninput='@(e => KeyUp(e, "tipodocumento", usuario.datos))'></MatTextField>


                    <div class="incorrecto">
                        <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                        <ValidationMessage For="@(() => usuario.datos.tipodocumento)" />
                    </div>
                    <div class="correcto">
                        <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                        <span class="good-msg">Correcto</span>
                    </div>
                </div>
                @*///////////////////////////////////////////////////*@
                <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass(() => usuario.datos.numerodocumento)">
                    <MatTextField @bind-Value="@usuario.datos.numerodocumento" Class="text-field-style" Label="Numero de documento"
                                  @oninput='@(e => KeyUp(e, "numerodocumento", usuario.datos))'></MatTextField>

                    <div class="incorrecto">
                        <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                        <ValidationMessage For="@(() => usuario.datos.numerodocumento)" />
                    </div>
                    <div class="correcto">
                        <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                        <span class="good-msg">Correcto</span>
                    </div>
                </div>

                @*///////////////////////////////////////////////////*@
                <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass(() => usuario.datos.direccion)">
                    <MatTextField @bind-Value="@usuario.datos.direccion" Class="text-field-style" Label="Direccion"
                                  @oninput='@(e => KeyUp(e, "direccion", usuario.datos))'></MatTextField>


                    <div class="incorrecto">
                        <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                        <ValidationMessage For="@(() => usuario.datos.direccion)" />
                    </div>
                    <div class="correcto">
                        <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                        <span class="good-msg">Correcto</span>
                    </div>
                </div>
                @*///////////////////////////////////////////////////*@
                <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass(() => usuario.datos.email)">
                    <MatTextField @bind-Value="@usuario.datos.email" Class="text-field-style" Label="Email"
                                  @oninput='@(e => KeyUp(e, "email", usuario.datos))'></MatTextField>


                    <div class="incorrecto">
                        <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                        <ValidationMessage For="@(() => usuario.datos.email)" />
                    </div>
                    <div class="correcto">
                        <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                        <span class="good-msg">Correcto</span>
                    </div>
                </div>
                @* ////////////////////////////////////////////////////////////*@
                @*///////////////////////////////////////////////////*@
                <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass(() => usuario.clave)">
                    <MatTextField @bind-Value="@usuario.clave" Class="text-field-style" Label="Clave"
                                  @oninput='@(e => KeyUp(e, "email", usuario))'></MatTextField>


                    <div class="incorrecto">
                        <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                        <ValidationMessage For="@(() => usuario.clave)" />
                    </div>
                    <div class="correcto">
                        <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                        <span class="good-msg">Correcto</span>
                    </div>
                </div>
                @* ////////////////////////////////////////////////////////////*@
                <InputImgModificarUsuario Label="Foto" ImagenSeleccionada="ImagenSeleccionada" ImagenTemporal="@(usuario.datos.imagen)" />
                <div class="field-container">
                    <MatCardActions>
                        <MatButton Raised="true"
                                   Class="centro"
                                   type="submit"
                                   Icon="@MatBlazor.MatIconNames.Check_circle_outline">Modificar</MatButton>
                    </MatCardActions>
                </div>
            </MatTab>
        </MatTabGroup>
    </EditForm>


</div>
@code {
    [CascadingParameter(Name = "SesionUsuario")] protected Sesion sesion { get; set; }
    private bool loadprocess = false;
    Usuario usuario = new Usuario();

    private EditContext _editContext;

    protected override void OnInitialized()
    {

        usuario.id = sesion.usuario.id;
        usuario.usuario = sesion.usuario.usuario;
        usuario.clave = sesion.usuario.clave;

        usuario.datos.nombre = sesion.usuario.datos.nombre;
        usuario.datos.apellido = sesion.usuario.datos.apellido;
        usuario.datos.fechanacimiento = sesion.usuario.datos.fechanacimiento;
        usuario.datos.tipodocumento = sesion.usuario.datos.tipodocumento;
        usuario.datos.numerodocumento = sesion.usuario.datos.numerodocumento;
        usuario.datos.direccion = sesion.usuario.datos.direccion;
        usuario.datos.email = sesion.usuario.datos.email;
        usuario.datos.imagen = sesion.usuario.datos.imagen;
        _editContext = new EditContext(usuario);
    }
    void KeyUp(ChangeEventArgs e, string memberName, object val)
    {
        var property = val.GetType().GetProperty(memberName);
        property.SetValue(val, e.Value.ToString());
        var fi = new FieldIdentifier(val, memberName);
        _editContext.NotifyFieldChanged(fi);
    }
    //////////////////////
    public async Task handleValidSubmit()
    {
        loadprocess = true;
        var httpResponse = await repository.Put<Usuario, Usuario>($"api/Usuarios/usuariomodi", usuario);
        if (httpResponse.Error)
        {
            Console.WriteLine("saio mal xdxdxd ");
        }
        else
        {
            sesion.usuario = httpResponse.Response;
            await swalfire.successMessage("Se modificaron los datos del usuario correctamente!");
            navigationManager.NavigateTo("/gestionarsolicitud");
            Console.WriteLine("algo salio bien ");

        }

    }

    public void handleInvalidSubmit()
    {
        loadprocess = false;
        swalfire.errorMessage("Por favor, Verifique los Datos Ingresados");
    }

    public void ImagenSeleccionada(string image)
    {
        usuario.datos.imagen = image;
    }
}


