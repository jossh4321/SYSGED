@page "/GestionPasos"
@layout MainLayout
@inject HttpClient Http
@inject IRepository repository
@inject IJSRuntime js
@inject ISwalFireMessage swalfire
<style>
    /*div.cont *{
        color: white;
    }*/

    .mdc-dialog--open .mdc-dialog__scrim {
        opacity: 0!important;
    }

    .mdc-floating-label--float-above {
        color: black !important;
    }

    :root {
        --mdc-theme-primary: #1FA270 !important;
    }

    .mdc-select:not(.mdc-select--disabled) .mdc-select__anchor {
        background-color: #ACB1B6 !important;
    }
    .container-c {
        display: inline-flex;
        flex-wrap: wrap;
        flex-direction: column;
        margin: 10px auto;
    }

    tr.mdc-table-header-row {
        background-color: #1a1a1a !important;
    }

    .table-header {
        color: white;
        font-family: sans-serif;
        font-size: 15px;
        display: inline-block
    }

    tbody {
        background-color: #DCDCDC !important;
    }
    .table-row {
        color: black;
        font-family: sans-serif;
        font-size: 14px;
        display: inline-block
    }

    .mat-success-c {
        color: green !important;
        border: 1px solid green !important;
        border-radius: 15px !important;
        font-size: 13px !important;
        transition: all 300ms !important;
    }

    .mat-dark-c {
        color: black !important;
        border: 1px solid black !important;
        border-radius: 15px !important;
        font-size: 13px !important;
        transition: all 300ms !important;
    }
    /*#ffd11a*/
    .mat-warning-c {
        background-color: #EABB00 !important;
        color: #F3F3F3 !important;
        border-radius: 15px !important;
        font-size: 13px !important;
        transition: all 300ms !important;
    }

    .mat-danger-c {
        color: #ff3333 !important;
        border: 1px solid #ff3333 !important;
        border-radius: 15px !important;
        font-size: 13px !important;
        transition: all 300ms !important;
    }

    .mat-danger-c2 {
        color: #0ACD2A !important;
        border: 1px solid #0ACD2A !important;
        border-radius: 15px !important;
        font-size: 13px !important;
        transition: all 300ms !important;
    }

    .mat-info-c {
        background-color: #018786 !important;
        color: #F3F3F3 !important;
        border-radius: 15px !important;
        font-size: 13px !important;
        transition: all 300ms !important;
    }

        .mat-success-c:hover, .mat-error-c:hover, .mat-jum-d:hover, .mat-danger-c:hover, .mat-info-c:hover, .mat-warning-c:hover, .mat-dark-c:hover {
            background-color: none !important;
            transform: scale(1.07,1.07) !important;
        }

    .button-container {
        display: block;
        margin: 5px;
        flex-grow: 1;
    }

    .button-container-lvl {
        display: flex;
        flex-wrap: wrap;
        flex-direction: row;
    }

    .mdc-table td:last-child {
        width: unset !important;
    }

    .head-flex {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-between;
        color: white
    }

    .pruebita {
        width: 300px;
        height: 200px;
        border: 1px solid black;
    }

    .loader-block {
        display: flex;
        margin-top: 20px !important;
        min-width: 800px;
        height: 300px;
        background-color: #4d4d4d;
        justify-content: center;
        justify-content: center;
        align-items: center;
    }
</style>

<div class="container-c" style=" width: auto;">


    <div class="head-flex">
        <h1 style="color:#25393D">Gestion de Pasos por Procesos</h1>
        <MatTooltip Tooltip="Registrar una Cuenta!" Wrap="true" Position="@MatTooltipPosition.Left">
            <MatFAB Icon="@MatIconNames.Add" @onclick="@abrirDialogoRegistro"></MatFAB>
        </MatTooltip>
    </div>
    @if (cargatabla == true)
    {
        <div class="loader-block">
            <div class="spinner-border" style="width: 7rem; height: 7rem;color:#ccc" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <MatTable Items="@listapasos" class="mat-elevation-z5" Style="width:auto">
            <MatTableHeader>
                <th style="background-color:#25393D;">
                    <span class="table-header">Expediente</span>
                </th>
                <th style="background-color:#25393D;"> 
                    <span class="table-header">N° Pasos</span>
                </th>
                <th style="background-color:#25393D;">
                    <span class="table-header">Funciones</span>
                </th>
            </MatTableHeader>
            <MatTableRow>
                <td>
                    <span class="table-row">@context.nombreexpediente</span>
                </td>
                <td>
                    <span class="table-row">@context.documentos.Count() Docs. Registrados</span>
                </td>
                <td>
                    <div class="button-container-lvl">
                        <div class="button-container">
                            <MatButton Icon="@MatBlazor.MatIconNames.Edit"
                                       Class="mat-warning-c" @onclick="@(e => abrirDialogoEdicion(context))" Style="width:100% !important">Modificar</MatButton>
                        </div>
                        <div class="button-container">
                            <MatButton Icon="@MatBlazor.MatIconNames.Remove_red_eye"
                                       Class="mat-info-c" @onclick="@(e => abrirDialogoDetalle(context))" Style="width:100% !important">Detalle</MatButton>
                        </div>
                    </div>
                </td>
            </MatTableRow>
        </MatTable>
    }

    <MatDialog @bind-IsOpen="@dialogoRegistro">
        <RegistrarPasos  dialogoRegistro ="dialogoRegistro" agregarPaso="agregarPaso" renderaddexp="renderaddexp" cerrarDialogoRegistro="cerrarDialogoRegistro" ></RegistrarPasos>
        <!--RegistrarCuenta listausuarios="listausuarios" cerrarDialogoRegistro="cerrarDialogoRegistro" /-->
    </MatDialog>
    <MatDialog @bind-IsOpen="@dialogoEdicion">
        <SISGED.Client.Pages.Pasos.RegistrarPaso.ModificarPasos dialogoEdicion="@dialogoEdicion" 
                     pasos="@pasos" rendermodexp="@rendermodexp" modificarPaso="modificarPaso"
                                                                cerrarDialogoModificacion="cerrarDialogoModificacion"></SISGED.Client.Pages.Pasos.RegistrarPaso.ModificarPasos>
        <!--ModificarCuenta listausuarios="listausuarios"
                     cerrarDialogoModificacion="cerrarDialogoModificacion"
                     usuariodto="usuariodto" /-->
    </MatDialog>
    <MatDialog @bind-IsOpen="@dialogoDetalle">
            <!--VisualizarPasos></VisualizarPasos-->
            <!--DetalleCuenta usuariodto="usuariodto" cerrarDialogoDetalle="cerrarDialogoDetalle" /-->
            <VisualizarPasos dialogoDetalle="dialogoDetalle"  pasos="@pasos" rendermodexp="@rendermodexp" cerrarDialogoDetalle="@cerrarDialogoDetalle"></VisualizarPasos>
    </MatDialog>
</div>

@code {
    public List<PasosDTO2> listapasos = new List<PasosDTO2>();
    private bool dialogoRegistro = false;
    private bool dialogoEdicion = false;
    private bool dialogoDetalle = false;
    public string imagenTemporalMod { get; set; }
    public bool rendermod { get; set; } = false;
    public bool renderaddexp = false;
    public bool rendermodexp = false;
    public bool cargatabla { get; set; } = false;

    public PasosDTO2 pasos = new PasosDTO2();
    public PasosDTO2 pasosdet = new PasosDTO2();

    protected override async Task OnInitializedAsync()
    {
        cargatabla = true;
        var httpResponse = await repository.Get<List<PasosDTO2>>($"api/paso/get/pasosdto2id");
        if (!httpResponse.Error)
        {
            listapasos = httpResponse.Response;
            listapasos.ForEach(x => Console.WriteLine(x.id));
        }
        else
        {
            //await swalfire("Error en el servidor");
        }
        cargatabla = false;
    }
    public async Task abrirDialogoEdicion(PasosDTO2 context)
    {
        pasos = context;
        rendermodexp = true;
        dialogoEdicion = true;

        StateHasChanged();
    }
    public async Task abrirDialogoDetalle(PasosDTO2 context)
    {
        pasos = context;
        dialogoDetalle = true;
        StateHasChanged();

    }

    public void agregarPaso(PasosDTO2 paso)
    {
        //paso.uid = generateUID();
        listapasos.Add(paso);
        dialogoRegistro = false;
        renderaddexp = true;
    }
    public void modificarPaso(PasosDTO2 paso)
    {
        listapasos[listapasos.FindIndex(ind => ind.id.Equals(paso.id))] = paso;
        dialogoEdicion = false;
        StateHasChanged();
    }
    public string generateUID()
    {
        return Guid.NewGuid().ToString("N");
    }

    public async Task<Usuario> cambiarEstadoUsuario(Usuario usuario)
    {
        var httpResponse = await repository.Put<Usuario, Usuario>("api/usuarios/estado", usuario);
        if (httpResponse.Error)
        {
            Console.WriteLine("Lo sentimos, Hubo un error de coneccion");
        }
        else
        {
            Console.WriteLine("Todo Bien en el cambio");
        }
        return httpResponse.Response;
    }
    public void abrirDialogoRegistro() { dialogoRegistro = true; renderaddexp = true; }

    public void cerrarDialogoRegistro(bool cerrar) { dialogoRegistro = cerrar; }
    public void cerrarDialogoModificacion(bool cerrar) => dialogoEdicion = cerrar;
    public void cerrarDialogoDetalle(bool cerrar) => dialogoDetalle = cerrar;
}
