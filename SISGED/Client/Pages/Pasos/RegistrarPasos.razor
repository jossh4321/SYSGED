@inject IRepository repository
@inject ISwalFireMessage swalfire
<style>
    .card-content-padding {
        padding: 15px;
        width: 550px;
        background-color: #f2f2f2;
    }

    .field-container {
        display: block;
        padding: 10px;
    }

    .text-field-style {
        display: block !important;
    }

    .button-input-style {
        display: block !important;
    }
    /*Validation*/
    .validation-message {
        display: inline;
    }

    div.invalid .correcto {
        display: none;
    }

    div.valid .incorrecto,
    div.valid:not(.modified) .correcto {
        display: none;
    }

    .correcto {
        color: green;
        font-family: sans-serif;
        font-size: 15px;
        display: flex;
        height: 18px;
    }

    .incorrecto {
        color: red;
        font-family: sans-serif;
        font-size: 15px;
        display: flex;
        height: 18px;
    }

    i.val-icon {
        font-size: 20px;
    }

    .sub-but {
        display: block !important;
        width: 100%;
    }

    .mdc-select__selected-text {
        min-width: 350px !important;
    }
    div.mdc-dialog__surface{
        border-radius:5px 5px 5px 5px !important;
    }
</style>
<div>
    <MatCard>
        <MatCardContent Class="card-content-padding">

            @if (carga == true)
            {
                <LoaderContent accion="Registro de Usuarios"></LoaderContent>
            }
            else
            {
                <MatHeadline6 Style="text-align:center">
                    Registro de Usuario

                </MatHeadline6>

                <EditForm EditContext="@_editContext" Context="CurrentEditContext"
                          OnValidSubmit="handleValidSubmit" OnInvalidSubmit="handleInvalidSubmit">
                    <FluentValidator></FluentValidator>


                    <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass(() => pasos.nombreexpediente)">
                        <MatTextField @bind-Value="@pasos.nombreexpediente" Class="text-field-style"
                                      Label="Nombre del Expediente" @oninput='@(e => KeyUp(e,"nombreexpediente",pasos))'></MatTextField>
                        <div class="incorrecto">
                            <MatIcon Icon="@MatIconNames.Error" Class="val-icon"></MatIcon>
                            <ValidationMessage For="@(() => pasos.nombreexpediente)" />
                        </div>
                        <div class="correcto">
                            <MatIcon Icon="@MatIconNames.Check" Class="val-icon"></MatIcon>
                            <span>Correcto</span>
                        </div>
                    </div>

                    <div class="head-flex">
                        <h3 style="color:black">Gestion de Documento de Paso</h3>
                        <MatTooltip Tooltip="Registrar una Cuenta!" Wrap="true" Position="@MatTooltipPosition.Left">
                            <MatFAB Icon="@MatIconNames.Add" type="button" @onclick="@abrirDialogoRegistroPasos"></MatFAB>
                        </MatTooltip>
                    </div>

                    <MatTable Items="@pasos.documentos" class="mat-elevation-z5" Style="width:auto">
                        <MatTableHeader>
                            <th>
                                <span class="table-header">Tipo de Solicitud</span>
                            </th>
                            <th>
                                <span class="table-header">Pasos Registrados</span>
                            </th>
                            <th>
                                <span class="table-header">Funciones</span>
                            </th>
                        </MatTableHeader>
                        <MatTableRow>
                            <td>
                                <span class="table-row">@context.tipo</span>
                            </td>
                            <td>
                                <span class="table-row">@context.pasos.Count() Pasos Registrados</span>
                            </td>
                            <td>
                                <div class="button-container-lvl">
                                    <div class="button-container">
                                        <MatButton Icon="@MatBlazor.MatIconNames.Edit"
                                                   Class="mat-warning-c" @onclick="@(e => AbrirDialogoEdicionPaso(context.indice))" Style="width:100% !important">Modificar</MatButton>
                                    </div>
                                    <div class="button-container">
                                        <MatButton Icon="@MatBlazor.MatIconNames.Remove_red_eye"
                                                   Class="mat-info-c" @onclick="@(e => eliminar(context.indice))" Style="width:100% !important">Eliminar</MatButton>
                                    </div>
                                </div>
                            </td>
                        </MatTableRow>
                    </MatTable>

                </EditForm>
            }

        </MatCardContent>


    </MatCard>
    <MatDialog @bind-IsOpen="@dialogoRegistroPasos">
        <h1>Hola</h1>
        <!--RegistrarCuenta listausuarios="listausuarios" cerrarDialogoRegistro="cerrarDialogoRegistro" /-->
    </MatDialog>
</div>
@code{
    //public Usuario2 usuario2 = new Usuario2();
    private PasosDTO2 pasos = new PasosDTO2();
    private List<Rol> listaroles = new List<Rol>();
    private EditContext _editContext;
    private bool carga = false;
    public bool dialogoRegistroPasos = false;

    // [Parameter] public bool dialogoRegistro { get; set; }
    [Parameter] public List<Usuario> listausuarios { get; set; }
    [Parameter] public EventCallback<bool> cerrarDialogoRegistro { get; set; }
    private string imagenTemporal { get; set; } = null;

    public void addDocumento()
    {
        Console.WriteLine("Agregando Documento");
    }

    public void abrirDialogoRegistroPasos()
    {
        dialogoRegistroPasos = true;
    }
    public void AbrirDialogoEdicionPaso(int indice)
    {

    }

    public void eliminar(int indice)
    {

    }


    protected override async Task OnInitializedAsync()
    {
        _editContext = new EditContext(pasos);
    }
    public async Task getRoles()
    {
        var httpResponse = await repository.Get<List<Rol>>("api/usuarios/roles");
        if (httpResponse.Error)
        {
            Console.WriteLine("Ha ocurrido un error al traer roles");
        }
        else
        {
            listaroles = httpResponse.Response;

        }
    }


    void doSomething(ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();
        Console.WriteLine("It is definitely: " + selectedString);
    }
    void KeyUp(ChangeEventArgs e, string memberName, object val)
    {
        //var property = usuario2.GetType().GetProperty(memberName);
        var property = val.GetType().GetProperty(memberName); //GetProperty(memberName, usuario2);
        property.SetValue(val, e.Value.ToString());
        Console.WriteLine(e.Value.ToString());
        Console.WriteLine("Aqui Todo Bien: " + e.Value.ToString());
        var fi = new FieldIdentifier(val, memberName);
        _editContext.NotifyFieldChanged(fi);
    }
    public async Task handleValidSubmit()
    {

        await swalfire.successMessage("Usuario Registrado Correctamente");
    }

    public void handleInvalidSubmit()
    {
        swalfire.errorMessage("Por favor, Verifique los Datos Ingresados");
        Console.WriteLine("Algo Mal");
    }
    public System.Reflection.PropertyInfo GetProperty(string name, Object obj)
    {
        System.Reflection.PropertyInfo info = null;
        foreach (string item in name.Split('.'))
        {
            if (obj == null)
            {
                return null;
            }
            Type type = obj.GetType();
            info = type.GetProperty(item);
            if (info == null) { return null; }
            obj = info.GetValue(obj, null);
        }
        Console.WriteLine("se retorno aqui");
        return info;
    }
    /*public List<ItemSelect> itemset = new List<ItemSelect>
{
        new ItemSelect(){ label="D.N.I", value="DNI"},
        new ItemSelect(){ label="PASAPORTE", value="PASAPORTE"},
        new ItemSelect(){ label="CARNET DE EXTRANJERIA", value="CE"}
    };

    public class ItemSelect
    {
        public string label { get; set; }
        public string value { get; set; }
    }*/

}

