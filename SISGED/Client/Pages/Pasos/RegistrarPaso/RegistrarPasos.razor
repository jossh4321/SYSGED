@inject IRepository repository
@inject ISwalFireMessage swalfire
<style>
    .mdc-dialog--open .mdc-dialog__scrim {
        opacity: 0 !important;
    }
    .card-content-padding {
        padding: 15px;
        width: 550px;
        background-color: #f2f2f2;
    }

    .field-container {
        display: block;
        padding: 10px;
    }

    .text-field-style {
        display: block !important;
    }

    .button-input-style {
        display: block !important;
    }
    /*Validation*/
    .validation-message {
        display: inline;
    }

    div.invalid .correcto {
        display: none;
    }

    div.valid .incorrecto,
    div.valid:not(.modified) .correcto {
        display: none;
    }

    .correcto {
        color: green;
        font-family: sans-serif;
        font-size: 15px;
        display: flex;
        height: 18px;
    }

    .incorrecto {
        color: red;
        font-family: sans-serif;
        font-size: 15px;
        display: flex;
        height: 18px;
    }

    i.val-icon {
        font-size: 20px;
    }

    .sub-but {
        display: block !important;
        width: 100%;
    }

    .mdc-select__selected-text {
        min-width: 350px !important;
    }
    div.mdc-dialog__surface{
        border-radius:5px 5px 5px 5px !important;
    }
    .mat-error-c {
        color: red !important;
        border: 1px solid red !important;
        border-radius: 15px !important;
        font-size: 13px !important;
        transition: all 300ms !important;
    }
    .mat-jum-d {
        color: #F3F3F3 !important;
        background-color: #E94343 !important;
        border-radius: 15px !important;
        font-size: 13px !important;
        transition: all 300ms !important;
    }
    /*para matblazor*/
    /*div.mdc-dialog .mdc-dialog__container {
        width: 100% !important;
    }

    .mdc-dialog .mdc-dialog__surface {
        max-width: none !important;
        width: 800px !important;
    }*/
</style>
<div>
    <MatCard>
        <MatCardContent Class="card-content-padding">

            @if (carga == true)
            {
                <LoaderContent accion="Registro de sos"></LoaderContent>
            }
            else
            {
                <MatHeadline6 Style="text-align:center">
                    Registro de Lista de pasos para un Expediente

                </MatHeadline6>

                <EditForm EditContext="@_editContext" Context="CurrentEditContext"
                          OnValidSubmit="handleValidSubmit" OnInvalidSubmit="handleInvalidSubmit">
                    <FluentValidator></FluentValidator>


                    <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass(() => pasos.nombreexpediente)">
                        <MatTextField @bind-Value="@pasos.nombreexpediente" Class="text-field-style"
                                      Label="Nombre del Expediente" @oninput='@(e => KeyUp(e,"nombreexpediente",pasos))'></MatTextField>
                        <div class="incorrecto">
                            <MatIcon Icon="@MatIconNames.Error" Class="val-icon"></MatIcon>
                            <ValidationMessage For="@(() => pasos.nombreexpediente)" />
                        </div>
                        <div class="correcto">
                            <MatIcon Icon="@MatIconNames.Check" Class="val-icon"></MatIcon>
                            <span>Correcto</span>
                        </div>
                    </div>

                    <div class="head-flex">
                        <h3 style="color:black">Gestion de Documento de Paso</h3>
                        <MatTooltip Tooltip="Registrar una Documento!" Wrap="true" Position="@MatTooltipPosition.Left">
                            <MatFAB Icon="@MatIconNames.Add" type="button" @onclick="@abrirDialogoRegistroPasosDocumento"></MatFAB>
                        </MatTooltip>
                    </div>

                    <MatTable Items="@pasos.documentos" class="mat-elevation-z5" Style="width:auto">
                        <MatTableHeader>
                            <th>
                                <span class="table-header">Tipo de Solicitud</span>
                            </th>
                            <th>
                                <span class="table-header">Pasos Registrados</span>
                            </th>
                            <th>
                                <span class="table-header">Funciones</span>
                            </th>
                        </MatTableHeader>
                        <MatTableRow>
                            <td>
                                <span class="table-row">@context.tipo</span>
                            </td>
                            <td>
                                <span class="table-row">@context.pasos.Count() Pasos Registrados</span>
                            </td>
                            <td>
                                <div class="button-container-lvl">
                                    <div class="button-container">
                                        <MatButton Icon="@MatBlazor.MatIconNames.Edit"
                                                   Class="mat-warning-c" @onclick="@(e => AbrirDialogoEdicionPaso(context))" Style="width:100% !important">Modificar</MatButton>
                                    </div>
                                    <div class="button-container">
                                        <MatButton Icon="@MatBlazor.MatIconNames.Remove_red_eye"
                                                   Class="mat-jum-d" @onclick="@(e => eliminar(context.indice))" Style="width:100% !important">Eliminar</MatButton>
                                    </div>
                                </div>
                            </td>
                        </MatTableRow>
                    </MatTable>
                    <div class="field-container">
                        <MatButton type="submit"
                                   Icon="@MatBlazor.MatIconNames.Check_circle_outline"
                                   Class="button-input-style mat-success-c sub-but">Registrar Ahora</MatButton>
                    </div>
                    <div class="field-container">
                        <MatButton type="button"
                                   Icon="@MatBlazor.MatIconNames.Check_circle_outline" @onclick="@cerrar"
                                   Class="button-input-style mat-error-c sub-but">Volver</MatButton>
                    </div>
                </EditForm>
            }

        </MatCardContent>


    </MatCard>
    <MatDialog @bind-IsOpen="@dialogoRegistroPasosDocumento">
        <!--RegistrarCuenta listausuarios="listausuarios" cerrarDialogoRegistro="cerrarDialogoRegistro" /-->
        <SISGED.Client.Pages.Pasos.RegistrarPaso.RegistrarPasoDocumento cerrarDialogoRegistroPasoDocumento="cerrarDialogoRegistroPasoDocumento"
                                registrarPasoDocuento="registrarPasoDocuento" />
    </MatDialog>
    <MatDialog @bind-IsOpen="@dialogoModificarPasoDocumento">
        <!--RegistrarCuenta listausuarios="listausuarios" cerrarDialogoRegistro="cerrarDialogoRegistro" /-->
        <ModificarPasoDocumento cerrarDialogoModificacionPasoDocumento="cerrarDialogoModificacionPasoDocumento"
                                modificarPasoDocumento="modificarPasoDocumento" 
                                documentopaso="@documentopaso"
                                rendermodpasodocumento="@rendermodpasodocumento"/>
    </MatDialog>
</div>
@code{
    //public Usuario2 usuario2 = new Usuario2();
    [Parameter] public bool dialogoRegistro { get; set; }
    [Parameter] public EventCallback<PasosDTO2> agregarPaso { get; set; }
    private PasosDTO2 pasos = new PasosDTO2();
    private List<Rol> listaroles = new List<Rol>();
    private EditContext _editContext;
    private bool carga = false;
    public bool dialogoRegistroPasosDocumento = false;
    public bool dialogoModificarPasoDocumento = false;
    public bool rendermodpasodocumento = false;
    public DocumentoPasoDTO2 documentopaso = new DocumentoPasoDTO2();

    // [Parameter] public bool dialogoRegistro { get; set; }
    [Parameter] public List<Usuario> listausuarios { get; set; }
    [Parameter] public EventCallback<bool> cerrarDialogoRegistro { get; set; }
    [Parameter] public bool renderaddexp { get; set; }
    private string imagenTemporal { get; set; } = null;

    public void addDocumento()
    {
        Console.WriteLine("Agregando Documento");
    }

    public void abrirDialogoRegistroPasosDocumento()
    {
        dialogoRegistroPasosDocumento = true;
    }
    public void AbrirDialogoEdicionPaso(DocumentoPasoDTO2 context)
    {
        DocumentoPasoDTO2 docpaso = context;
        documentopaso = docpaso;
        rendermodpasodocumento = true;
        dialogoModificarPasoDocumento = true;
    }
    public void eliminar(int indice)
    {
        pasos.documentos.RemoveAt(indice);
        StateHasChanged();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (renderaddexp == true)
        {
            pasos = new PasosDTO2();
            _editContext = new EditContext(pasos);
            renderaddexp = false;
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _editContext = new EditContext(pasos);
    }
    public async Task getRoles()
    {
        var httpResponse = await repository.Get<List<Rol>>("api/usuarios/roles");
        if (httpResponse.Error)
        {
            Console.WriteLine("Ha ocurrido un error al traer roles");
        }
        else
        {
            listaroles = httpResponse.Response;

        }
    }
    void doSomething(ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();
        Console.WriteLine("It is definitely: " + selectedString);
    }
    void KeyUp(ChangeEventArgs e, string memberName, object val)
    {
        //var property = usuario2.GetType().GetProperty(memberName);
        var property = val.GetType().GetProperty(memberName); //GetProperty(memberName, usuario2);
        property.SetValue(val, e.Value.ToString());
        Console.WriteLine(e.Value.ToString());
        Console.WriteLine("Aqui Todo Bien: " + e.Value.ToString());
        var fi = new FieldIdentifier(val, memberName);
        _editContext.NotifyFieldChanged(fi);
    }
    public async Task handleValidSubmit()
    {
        Console.WriteLine("todo bien");
        var httpResponse = await repository.Post<PasosDTO2, PasosDTO2>($"api/paso", pasos);
        if (!httpResponse.Error)
        {
            pasos = httpResponse.Response;
            await agregarPaso.InvokeAsync(pasos);
            pasos = new PasosDTO2();
            _editContext = new EditContext(pasos);
            _editContext.MarkAsUnmodified();
            _editContext.NotifyValidationStateChanged();
            await swalfire.successMessage("Paso Registrado Correctamente");
        }
        else
        {
            await swalfire.errorMessage("ERORR 500 : Fallo en el servidor");
        }
    }
    public void cerrar()
    {
        dialogoRegistro = false;
    }
    public void handleInvalidSubmit()
    {
        swalfire.errorMessage("Por favor, Verifique los Datos Ingresados");
        Console.WriteLine("Algo Mal");
    }

    public void registrarPasoDocuento(DocumentoPasoDTO2 pasodocumento)
    {
        pasodocumento.uid = generateUID();
        pasos.documentos.Add(pasodocumento);
        dialogoRegistroPasosDocumento = false;
    }
    public void modificarPasoDocumento(DocumentoPasoDTO2 pasodocumento)
    {
        pasos.documentos[pasos.documentos.FindIndex(ind => ind.uid.Equals(pasodocumento.uid))] = pasodocumento;
        dialogoModificarPasoDocumento = false;
        StateHasChanged();
    }
    public string generateUID()
    {
        return Guid.NewGuid().ToString("N");
    }
    public void cerrarDialogoRegistroPasoDocumento(bool cerrar) => dialogoRegistroPasosDocumento = cerrar;
    public void cerrarDialogoModificacionPasoDocumento(bool cerrar) => dialogoModificarPasoDocumento = cerrar;
    /*public List<ItemSelect> itemset = new List<ItemSelect>
{
        new ItemSelect(){ label="D.N.I", value="DNI"},
        new ItemSelect(){ label="PASAPORTE", value="PASAPORTE"},
        new ItemSelect(){ label="CARNET DE EXTRANJERIA", value="CE"}
    };

    public class ItemSelect
    {
        public string label { get; set; }
        public string value { get; set; }
    }*/

}

