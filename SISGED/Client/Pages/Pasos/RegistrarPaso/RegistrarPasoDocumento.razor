@inject IRepository repository
@inject ISwalFireMessage swalfire
<style>
    .card-content-padding {
        padding: 15px;
        width: 550px;
        background-color: #f2f2f2;
        height: 600px !important;
        overflow-y: auto !important;
    }

    .field-container {
        display: block;
        padding: 10px;
    }

    .text-field-style {
        display: block !important;
    }

    .button-input-style {
        display: block !important;
    }
    /*Validation*/
    .validation-message {
        display: inline;
    }

    div.invalid .correcto {
        display: none;
    }

    div.valid .incorrecto,
    div.valid:not(.modified) .correcto {
        display: none;
    }

    .correcto {
        color: green;
        font-family: sans-serif;
        font-size: 15px;
        display: flex;
        height: 18px;
    }

    .incorrecto {
        color: red;
        font-family: sans-serif;
        font-size: 15px;
        display: flex;
        height: 18px;
    }

    i.val-icon {
        font-size: 20px;
    }

    .sub-but {
        display: block !important;
        width: 100%;
    }

    .mdc-select__selected-text {
        min-width: 350px !important;
    }

    div.mdc-dialog__surface {
        border-radius: 5px 5px 5px 5px !important;
    }
</style>
<div>
    <MatCard>
        <MatCardContent Class="card-content-padding">
            <MatHeadline6 Style="text-align:center">
                Registro de Lista de pasos para un Documento

            </MatHeadline6>
            <EditForm EditContext="@_editContext" Context="CurrentEditContext"
                      OnValidSubmit="handleValidSubmit" OnInvalidSubmit="handleInvalidSubmit">
                <FluentValidator></FluentValidator>

                <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass(() => documentopaso.tipo)">
                    <MatTextField @bind-Value="@documentopaso.tipo" Class="text-field-style"
                                  Label="Nombre del Expediente" @oninput='@(e => KeyUp(e,"tipo",documentopaso))'></MatTextField>
                    <div class="incorrecto">
                        <MatIcon Icon="@MatIconNames.Error" Class="val-icon"></MatIcon>
                        <ValidationMessage For="@(() => documentopaso.tipo)" />
                    </div>
                    <div class="correcto">
                        <MatIcon Icon="@MatIconNames.Check" Class="val-icon"></MatIcon>
                        <span>Correcto</span>
                    </div>
                </div>

                <div class="head-flex">
                    <h4 style="color:black">Agregue Pasos al documento</h4>
                    <MatFAB Icon="@MatIconNames.Add" type="button" @onclick="@abrirDialogoRegistroSubPaso"></MatFAB>
                </div>

                <MatTable Items="@documentopaso.pasos" class="mat-elevation-z5" Style="width:auto">
                    <MatTableHeader>
                        <th>
                            <span class="table-header">Nombre</span>
                        </th>
                        <th>
                            <span class="table-header">Dias</span>
                        </th>
                        <th>
                            <span class="table-header">Pasos del Doc.</span>
                        </th>
                        <th>
                            <span class="table-header">Funciones</span>
                        </th>
                    </MatTableHeader>
                    <MatTableRow>
                        <td>
                            <span class="table-row">@context.nombre</span>
                        </td>
                        <td>
                            <span class="table-row">@context.dias</span>
                        </td>
                        <td>
                            <span class="table-row">@context.subpaso.Count</span>
                        </td>
                        <td>
                            <div class="button-container-lvl">
                                <div class="button-container">
                                    <MatButton Icon="@MatBlazor.MatIconNames.Edit"
                                               Class="mat-warning-c" @onclick="@(e => AbrirDialogoEdicionSubPaso((PasoDocDTO)context))" Style="width:100% !important">Modificar</MatButton>
                                </div>
                                <div class="button-container">
                                    <MatButton Icon="@MatBlazor.MatIconNames.Remove_red_eye"
                                               Class="mat-error-c" @onclick="@(e => EliminarSubPaso(context.uid))" Style="width:100% !important">Eliminar</MatButton>
                                </div>
                            </div>
                        </td>
                    </MatTableRow>
                </MatTable>
                <div class="field-container">
                    <MatButton type="submit"
                               Icon="@MatBlazor.MatIconNames.Check_circle_outline"
                               Class="button-input-style mat-success-c sub-but">Registrar Ahora</MatButton>
                </div>
                <div class="field-container">
                    <MatButton type="button"
                               Icon="@MatBlazor.MatIconNames.Check_circle_outline" @onclick="@cerrar"
                               Class="button-input-style mat-error-c sub-but">Volver</MatButton>
                </div>
            </EditForm>

        </MatCardContent>
    </MatCard>
    <MatDialog @bind-IsOpen="@dialogoRegistroSubPasos">
        <!--RegistrarCuenta listausuarios="listausuarios" cerrarDialogoRegistro="cerrarDialogoRegistro" /-->
        <RegistrarSubPasos cerrarDialogoRegistroSubPaso="cerrarDialogoRegistroSubPaso" agregarSubpasoRegistrado="agregarSubpasoRegistrado" />
    </MatDialog>

    
    <MatDialog @bind-IsOpen="@dialogoModificacionSubPasos">
        <!--RegistrarCuenta listausuarios="listausuarios" cerrarDialogoRegistro="cerrarDialogoRegistro" /-->
            <ModificarSubPasos cerrarDialogoModificacionSubPaso="cerrarDialogoModificacionSubPaso"
                               subPasoDocumento="@subPasoDocumento" modificarSubPasoDocumento="modificarSubPasoDocumento" rendermod="rendermod"/>
           
    </MatDialog>

</div>
@code {

    private DocumentoPasoDTO2 documentopaso = new DocumentoPasoDTO2();
    private EditContext _editContext;
    private bool dialogoRegistroSubPasos = false;
    private bool dialogoModificacionSubPasos = false;
    private PasoDocDTO subPasoDocumento = new PasoDocDTO();
    private bool rendermod = false;
    [Parameter] public EventCallback<bool> cerrarDialogoRegistroPasoDocumento { get; set; }
    [Parameter] public EventCallback<DocumentoPasoDTO2> registrarPasoDocuento { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _editContext = new EditContext(documentopaso);
    }
    public async Task handleValidSubmit()
    {
        Console.WriteLine("todo bien");
        await registrarPasoDocuento.InvokeAsync(documentopaso);
        documentopaso = new DocumentoPasoDTO2();
        _editContext = new EditContext(documentopaso);
        _editContext.MarkAsUnmodified();
        _editContext.NotifyValidationStateChanged();
    }

    public void handleInvalidSubmit()
    {
        swalfire.errorMessage("Por favor, Verifique los Datos Ingresados");
        Console.WriteLine("Algo Mal");
    }

    void KeyUp(ChangeEventArgs e, string memberName, object val)
    {
        //var property = usuario2.GetType().GetProperty(memberName);
        var property = val.GetType().GetProperty(memberName); //GetProperty(memberName, usuario2);
        property.SetValue(val, e.Value.ToString());
        Console.WriteLine(e.Value.ToString());
        Console.WriteLine("Aqui Todo Bien: " + e.Value.ToString());
        var fi = new FieldIdentifier(val, memberName);
        _editContext.NotifyFieldChanged(fi);
    }
    public void AbrirDialogoEdicionSubPaso(PasoDocDTO context)
    {
        PasoDocDTO paso = context;
        subPasoDocumento = paso;
        rendermod = true;
        dialogoModificacionSubPasos = true;
    }
    public void EliminarSubPaso(string uid)
    {
        int indice = documentopaso.pasos.FindIndex(ind => ind.uid.Equals(uid));
        documentopaso.pasos.RemoveAt(indice);
        StateHasChanged();
    }
    public void abrirDialogoRegistroSubPaso()
    {
        dialogoRegistroSubPasos = true;
    }
    public void agregarSubpasoRegistrado(PasoDocDTO subpaso)
    {
        subpaso.uid = generateUID();
        documentopaso.pasos.Add(subpaso);
        dialogoRegistroSubPasos = false;

    }
    public void modificarSubPasoDocumento(PasoDocDTO subpaso)
    {
        documentopaso.pasos[documentopaso.pasos.FindIndex(ind => ind.uid.Equals(subpaso.uid))] = subpaso;
        dialogoModificacionSubPasos = false;
        StateHasChanged();
    }

    public string generateUID()
    {
        return Guid.NewGuid().ToString("N");
    }
    public async Task cerrar()
    {
        await cerrarDialogoRegistroPasoDocumento.InvokeAsync(false);
    }

    public void cerrarDialogoRegistroSubPaso(bool cerrar) => dialogoRegistroSubPasos = cerrar;
    public void cerrarDialogoModificacionSubPaso(bool cerrar) => dialogoModificacionSubPasos = cerrar;
}
