@inject IRepository repository
@inject ISwalFireMessage swalfire
<style>
    .card-content-padding {
        padding: 15px;
        width: 550px;
        background-color: #f2f2f2;
    }

    .field-container {
        display: block;
        padding: 10px;
    }

    .text-field-style {
        display: block !important;
    }

    .button-input-style {
        display: block !important;
    }
    /*Validation*/
    .validation-message {
        display: inline;
    }

    div.invalid .correcto {
        display: none;
    }

    div.valid .incorrecto,
    div.valid:not(.modified) .correcto {
        display: none;
    }

    .correcto {
        color: green;
        font-family: sans-serif;
        font-size: 15px;
        display: flex;
        height: 18px;
    }

    .incorrecto {
        color: red;
        font-family: sans-serif;
        font-size: 15px;
        display: flex;
        height: 18px;
    }

    i.val-icon {
        font-size: 20px;
    }

    .sub-but {
        display: block !important;
        width: 100%;
    }

    .mdc-select__selected-text {
        min-width: 350px !important;
    }

    div.mdc-dialog__surface {
        border-radius: 5px 5px 5px 5px !important;
    }

    .contenedor-participantes {
        padding-top: 10px;
        margin: 20px;
        border: 2px solid #666666;
        border-radius: 5px;
    }

    .titulo-paticipantes {
        border: 1px solid black;
        margin: 0px 5px 0px 5px;
        border-radius: 5px 5px 0px 0px;
        background-color: #404040;
        color: white;
        display: flex;
        flex-direction: row;
        justify-content: center;
        align-items: center;
    }

    .titulo {
        color: #d9d9d9;
    }

    .icono {
        margin-left: 20px;
    }

        .icono i {
            margin: 5px;
        }

    .single-textfield-container {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
    }

    .base-field {
        flex-basis: 90%;
    }

    .base-icon {
        display: flex;
        flex-basis: 8%;
        justify-content: center;
        align-items: center;
        margin: 10px 2px;
        background: #ff1a1a;
        border-radius: 3px;
        border: 1px solid #800000
    }

    .titulo {
        color: #d9d9d9;
    }

    .mat-error-c {
        color: red !important;
        border: 1px solid red !important;
        border-radius: 15px !important;
        font-size: 13px !important;
        transition: all 300ms !important;
    }
</style>
<div>
    <MatCard>
        <MatCardContent Class="card-content-padding">
            <MatHeadline6 Style="text-align:center">
                Visualizacion de pasos para la acción

            </MatHeadline6>
            <EditForm EditContext="@_editContext" Context="CurrentEditContext"
                      OnValidSubmit="handleValidSubmit" OnInvalidSubmit="handleInvalidSubmit">
                <FluentValidator></FluentValidator>

                <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass(() => subPasoDocumento.nombre)">
                    <MatTextField @bind-Value="@subPasoDocumento.nombre" Class="text-field-style"
                                  Label="Nombre de la acción" ReadOnly="true" @oninput='@(e => KeyUp(e,"nombre",subPasoDocumento))'></MatTextField>
                    <div class="incorrecto">
                        <MatIcon Icon="@MatIconNames.Error" Class="val-icon"></MatIcon>
                        <ValidationMessage For="@(() =>  subPasoDocumento.nombre)" />
                    </div>
                    <div class="correcto">
                        <MatIcon Icon="@MatIconNames.Check" Class="val-icon"></MatIcon>
                        <span>Correcto</span>
                    </div>
                </div>
                <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass(() => subPasoDocumento.descripcion)">
                    <MatTextField @bind-Value="@subPasoDocumento.descripcion" Class="text-field-style"
                                  Label="Descripción de la acción" ReadOnly="true" @oninput='@(e => KeyUp(e,"descripcion",subPasoDocumento))'></MatTextField>
                    <div class="incorrecto">
                        <MatIcon Icon="@MatIconNames.Error" Class="val-icon"></MatIcon>
                        <ValidationMessage For="@(() =>  subPasoDocumento.descripcion)" />
                    </div>
                    <div class="correcto">
                        <MatIcon Icon="@MatIconNames.Check" Class="val-icon"></MatIcon>
                        <span>Correcto</span>
                    </div>
                </div>

                <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass( () => subPasoDocumento.dias)">
                    <MatNumericUpDownField Label="Número de días" ReadOnly="true" Class="text-field-style"
                                           @bind-Value=subPasoDocumento.dias
                                           FieldType="MatNumericUpDownFieldType.Numeric"
                                           DecimalPlaces=0
                                           Minimum=2 Maximum=50
                                           AllowInput="false"
                                            Disabled="true"
                                           @oninput='@(e => KeyUp(e,"dias",subPasoDocumento.dias))'></MatNumericUpDownField>
                    <div class="incorrecto">
                        <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                        <ValidationMessage For="@(() => subPasoDocumento.dias)" />
                    </div>
                    <div class="correcto">
                        <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                        <span class="good-msg">Correcto</span>
                    </div>
                </div>
                <!----------------------------------------------------------------------------->
                <div class="contenedor-participantes">
                    <div class="titulo-paticipantes">
                        <div><span class="titulo">Pasos</span></div>
                        <div class="icono">
                            <MatIcon Icon="add_circle_outline"></MatIcon>
                        </div>
                    </div>
                    @for (int i = 0; i < subPasoDocumento.subpaso.Count; i++)
                    {
                        int index = i;
                        <div class="single-textfield-container">
                            <div class="field-container base-field input-group-2 @CurrentEditContext.FieldCssClass(() => subPasoDocumento.subpaso[index].descripcion)">
                                <MatTextField @bind-Value="@subPasoDocumento.subpaso[index].descripcion" Class="text-field-style"
                                              Label="Descripción del paso" ReadOnly="true"
                                              @oninput='@(e => KeyUp(e, "descripcion", subPasoDocumento.subpaso[index]))'></MatTextField>
                                <div class="incorrecto">
                                    <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                                    <ValidationMessage For="@(() => subPasoDocumento.subpaso[index].descripcion)" />
                                </div>
                                <div class="correcto">
                                    <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                                    <span class="good-msg">Correcto</span>
                                </div>
                            </div>
                        </div>
                    }
                    <div class="field-container base-field input-group-2 @CurrentEditContext.FieldCssClass(() => subPasoDocumento.subpaso)">
                        <div class="incorrecto">
                            <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                            <ValidationMessage For="@(() =>subPasoDocumento.subpaso)" />
                        </div>
                        <div class="correcto">
                            <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                            <span class="good-msg">Correcto</span>
                        </div>
                    </div>
                </div>
                <div class="field-container">
                    <MatButton type="button"
                               Icon="@MatBlazor.MatIconNames.Check_circle_outline" @onclick="@cerrar"
                               Class="button-input-style mat-info-c sub-but">Volver</MatButton>
                </div>
            </EditForm>

        </MatCardContent>
    </MatCard>
</div>
@code {

    [Parameter] public EventCallback<bool> cerrarDialogoModificacionSubPaso { get; set; }
    [Parameter] public EventCallback<PasoDocDTO> modificarSubPasoDocumento { get; set; }
    [Parameter] public PasoDocDTO subPasoDocumento { get; set; }
    [Parameter] public bool rendermod { get; set; }
    //[Parameter] public EventCallback<Paso> agregarSubpasoRegistrado { get; set; }
    //private Paso paso = new Paso();
    private EditContext _editContext;
    protected override async Task OnInitializedAsync()
    {
        _editContext = new EditContext(subPasoDocumento);
    }
    protected override void OnAfterRender(bool firstRender)
    {
        if (rendermod == true)
        {
            _editContext = new EditContext(subPasoDocumento);
            rendermod = false;
            StateHasChanged();
        }
    }

    public async Task handleValidSubmit()
    {
        Console.WriteLine("todo bien");

        /*subPasoDocumento = new PasoDocDTO();
        subPasoDocumento.subpaso = new List<SubPaso>() { new SubPaso() { indice = 0, descripcion = "" } };*/
        //_editContext = new EditContext(subPasoDocumento);
        _editContext.MarkAsUnmodified();
        _editContext.NotifyValidationStateChanged();

        StateHasChanged();
        await modificarSubPasoDocumento.InvokeAsync(subPasoDocumento);
        //await cerrarDialogoRegistroSubPaso.InvokeAsync(false);
    }

    public void handleInvalidSubmit()
    {
        swalfire.errorMessage("Por favor, Verifique los Datos Ingresados");
        Console.WriteLine("Algo Mal");
    }
    void KeyUp(ChangeEventArgs e, string memberName, object val)
    {
        //var property = usuario2.GetType().GetProperty(memberName);
        var property = val.GetType().GetProperty(memberName); //GetProperty(memberName, usuario2);
        property.SetValue(val, e.Value.ToString());
        Console.WriteLine(e.Value.ToString());
        Console.WriteLine("Aqui Todo Bien: " + e.Value.ToString());
        var fi = new FieldIdentifier(val, memberName);
        _editContext.NotifyFieldChanged(fi);
    }
    public void addSubpaso()
    {
        subPasoDocumento.subpaso.Add(new SubPaso() { indice = (subPasoDocumento.subpaso.Count) });
        StateHasChanged();
    }

    public void removeSubPaso(int indice)
    {
        subPasoDocumento.subpaso.RemoveAt(indice);
        StateHasChanged();
    }
    public async Task cerrar()
    {
        await cerrarDialogoModificacionSubPaso.InvokeAsync(false);
        subPasoDocumento = new PasoDocDTO();
        subPasoDocumento.subpaso = new List<SubPaso>() { new SubPaso() { indice = 0, descripcion = "" } };
        _editContext = new EditContext(subPasoDocumento);
        _editContext.MarkAsUnmodified();
        _editContext.NotifyValidationStateChanged();
    }

}
