@inject IRepository repository
@inject ISwalFireMessage swalfire
<style>
    .card-content-padding {
        padding: 15px;
        width: 550px;
        background-color: #f2f2f2;
    }

    .field-container {
        display: block;
        padding: 10px;
    }

    .text-field-style {
        display: block !important;
    }

    .button-input-style {
        display: block !important;
    }
    /*Validation*/
    .validation-message {
        display: inline;
    }

    div.invalid .correcto {
        display: none;
    }

    div.valid .incorrecto,
    div.valid:not(.modified) .correcto {
        display: none;
    }

    .correcto {
        color: green;
        font-family: sans-serif;
        font-size: 15px;
        display: flex;
        height: 18px;
    }

    .incorrecto {
        color: red;
        font-family: sans-serif;
        font-size: 15px;
        display: flex;
        height: 18px;
    }

    i.val-icon {
        font-size: 20px;
    }

    .sub-but {
        display: block !important;
        width: 100%;
    }

    .mdc-select__selected-text {
        min-width: 350px !important;
    }

    div.mdc-dialog__surface {
        border-radius: 5px 5px 5px 5px !important;
    }
</style>
<div>
    <MatCard>
        <MatCardContent Class="card-content-padding">

            <EditForm EditContext="@_editContext" Context="CurrentEditContext"
                      OnValidSubmit="handleValidSubmit" OnInvalidSubmit="handleInvalidSubmit">
                <FluentValidator></FluentValidator>

                <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass(() => documentopaso.tipo)">
                    <MatTextField @bind-Value="@documentopaso.tipo" Class="text-field-style"
                                  Label="Nombre del Expediente" @oninput='@(e => KeyUp(e,"tipo",documentopaso))'></MatTextField>
                    <div class="incorrecto">
                        <MatIcon Icon="@MatIconNames.Error" Class="val-icon"></MatIcon>
                        <ValidationMessage For="@(() => documentopaso.tipo)" />
                    </div>
                    <div class="correcto">
                        <MatIcon Icon="@MatIconNames.Check" Class="val-icon"></MatIcon>
                        <span>Correcto</span>
                    </div>
                </div>
                <!---------------------------------------------------------------------------------->
                <div class="contenedor-participantes">
                    <div class="titulo-paticipantes">
                        <div><span class="titulo">Pasos del Documento</span></div>
                        <div class="icono" @onclick="@(agregarPasoDocumento)">
                            <MatIcon Icon="add_circle_outline"></MatIcon>
                        </div>
                    </div>
                    @for (int i = 0; i < documentopaso.pasos.Count; i++)
                    {
                        int index = i;
                <div class="single-textfield-container">
                    <div class="field-container base-field input-group-2 @CurrentEditContext.FieldCssClass(() => documentopaso.pasos[index].nombre)">
                        <MatTextField @bind-Value="@documentopaso.pasos[index].nombre" Class="text-field-style"
                                      Label="Nombre del Paso"
                                      @oninput='@(e => KeyUp(e, "nombre",  documentopaso.pasos[index]))'></MatTextField>
                        <div class="incorrecto">
                            <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                            <ValidationMessage For="@(() => documentopaso.pasos[index].nombre)" />
                        </div>
                        <div class="correcto">
                            <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                            <span class="good-msg">Correcto</span>
                        </div>
                    </div>
                    <div class="single-textfield-container">
                        <div class="field-container base-field input-group-2 @CurrentEditContext.FieldCssClass(() => documentopaso.pasos[index].descripcion)">
                            <MatTextField @bind-Value="@documentopaso.pasos[index].descripcion" Class="text-field-style"
                                          Label="Descripcion del Paso"
                                          @oninput='@(e => KeyUp(e, "descripcion",  documentopaso.pasos[index]))'></MatTextField>
                            <div class="incorrecto">
                                <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                                <ValidationMessage For="@(() => documentopaso.pasos[index].descripcion)" />
                            </div>
                            <div class="correcto">
                                <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                                <span class="good-msg">Correcto</span>
                            </div>
                        </div>
                    </div>
                    <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass( () => documentopaso.pasos[index].dias)">


                        <MatNumericUpDownField Label="Cantidad de Fojas" Class="text-field-style"
                                               @bind-Value=documentopaso.pasos[index].dias
                                               FieldType="MatNumericUpDownFieldType.Numeric"
                                               DecimalPlaces=0
                                               Minimum=2 Maximum=50
                                               AllowInput="false"
                                               @oninput='@(e => KeyUp(e,"dias",documentopaso.pasos[index]))'></MatNumericUpDownField>


                        <div class="incorrecto">
                            <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                            <ValidationMessage For="@(() => documentopaso.pasos[index].dias)" />
                        </div>
                        <div class="correcto">
                            <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                            <span class="good-msg">Correcto</span>
                        </div>
                    </div>

                </div>
                    }
                    <div class="field-container base-field input-group-2 @CurrentEditContext.FieldCssClass(() => documentopaso.pasos)">
                        <div class="incorrecto">
                            <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                            <ValidationMessage For="@(() => documentopaso.pasos)" />
                        </div>
                        <div class="correcto">
                            <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                            <span class="good-msg">Correcto</span>
                        </div>
                    </div>
                </div>

            </EditForm>

        </MatCardContent>
    </MatCard>
</div>
@code {

    private DocumentoPasoDTO2 documentopaso = new DocumentoPasoDTO2();
    private EditContext _editContext;
    protected override async Task OnInitializedAsync()
    {
        _editContext = new EditContext(documentopaso);
    }
    public async Task handleValidSubmit()
    {
        await swalfire.successMessage("Usuario Registrado Correctamente");
    }

    public void handleInvalidSubmit()
    {
        swalfire.errorMessage("Por favor, Verifique los Datos Ingresados");
        Console.WriteLine("Algo Mal");
    }
    void KeyUp(ChangeEventArgs e, string memberName, object val)
    {
        //var property = usuario2.GetType().GetProperty(memberName);
        var property = val.GetType().GetProperty(memberName); //GetProperty(memberName, usuario2);
        property.SetValue(val, e.Value.ToString());
        Console.WriteLine(e.Value.ToString());
        Console.WriteLine("Aqui Todo Bien: " + e.Value.ToString());
        var fi = new FieldIdentifier(val, memberName);
        _editContext.NotifyFieldChanged(fi);
    }
    public void agregarPasoDocumento()
    {

    }
}
