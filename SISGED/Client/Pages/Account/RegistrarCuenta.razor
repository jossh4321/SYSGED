@inject IRepository repository
@inject ISwalFireMessage swalfire
<style>
    .card-content-padding {
        padding: 15px;
        width: 400px;
    }

    .field-container {
        display: block;
        padding: 10px;
    }

    .text-field-style {
        display: block !important;
    }

    .button-input-style {
        display: block !important;
    }
    /*Validation*/
    .validation-message {
        display: inline;
    }

    div.invalid .correcto {
        display: none;
    }

    div.valid .incorrecto,
    div.valid:not(.modified) .correcto {
        display: none;
    }

    .correcto {
        color: green;
        font-family: sans-serif;
        font-size: 15px;
        display: flex;
        height: 18px;
    }

    .incorrecto {
        color: red;
        font-family: sans-serif;
        font-size: 15px;
        display: flex;
        height: 18px;
    }

    i.val-icon {
        font-size: 20px;
    }

    .sub-but {
        display: block !important;
        width: 100%;
    }

</style>
<MatCard>
    <MatCardContent Class="card-content-padding">

        @if (carga == true)
        {
        <LoaderContent accion="Registro de Usuarios"></LoaderContent>
        }
        else
        {
            <MatHeadline6 Style="text-align:center">
                Registro de Usuario

            </MatHeadline6>

            <EditForm EditContext="@_editContext" Context="CurrentEditContext"
                      OnValidSubmit="handleValidSubmit" OnInvalidSubmit="handleInvalidSubmit">
                <FluentValidator></FluentValidator>
                <MatTabGroup>
                    <MatTab Label="Credenciales">
                        <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass( () => usuariodto.usuario)">
                            <MatTextField @bind-Value="@usuariodto.usuario" Class="text-field-style"
                                          Label="Nombre Usuario" @oninput='@(e => KeyUp(e,"usuario",usuariodto))'></MatTextField>
                            <div class="incorrecto">
                                <MatIcon Icon="@MatIconNames.Error" Class="val-icon"></MatIcon>
                                <ValidationMessage For="@(() => usuariodto.usuario)" />
                            </div>
                            <div class="correcto">
                                <MatIcon Icon="@MatIconNames.Check" Class="val-icon"></MatIcon>
                                <span>Correcto</span>
                            </div>
                        </div>

                        <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass( () => usuariodto.clave)">

                            <MatTextField @bind-Value="@usuariodto.clave" Class="text-field-style"
                                          Label="Clave" @oninput='@(e => KeyUp(e,"clave",usuariodto))'></MatTextField>
                            <div class="incorrecto">
                                <MatIcon Icon="@MatIconNames.Error" Class="val-icon"></MatIcon>
                                <ValidationMessage For="@(() => usuariodto.clave)" />
                            </div>
                            <div class="correcto">
                                <MatIcon Icon="@MatIconNames.Check" Class="val-icon"></MatIcon>
                                <span>Correcto</span>
                            </div>

                        </div>

                        <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass( () => usuariodto.rolid)">
                            <InputSelect @bind-Value="@usuariodto.rolid" class="text-field-style">
                                <option value="">--Seleccione Algo--</option>
                                @foreach (Rol rol in listaroles)
                                    {
                                    <option value="@rol.id">@rol.nombre</option>
                                    }
                            </InputSelect>
                            <div class="incorrecto">
                                <MatIcon Icon="@MatIconNames.Error" Class="val-icon"></MatIcon>
                                <ValidationMessage For="@(() => usuariodto.rolid)" />
                            </div>
                            <div class="correcto">
                                <MatIcon Icon="@MatIconNames.Check" Class="val-icon"></MatIcon>
                                <span>Correcto</span>
                            </div>
                        </div>


                    </MatTab>

                    <MatTab Label="Datos">
                        <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass( () => usuariodto.datos.nombre)">
                            <MatTextField @bind-Value="@usuariodto.datos.nombre" Class="text-field-style" Label="Nombre"
                                          @oninput='@(e => KeyUp(e,"nombre",usuariodto.datos))'></MatTextField>

                            <div class="incorrecto">
                                <MatIcon Icon="@MatIconNames.Error" Class="val-icon"></MatIcon>
                                <ValidationMessage For="@(() => usuariodto.datos.nombre)" />
                            </div>
                            <div class="correcto">
                                <MatIcon Icon="@MatIconNames.Check" Class="val-icon"></MatIcon>
                                <span>Correcto</span>
                            </div>
                        </div>

                        <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass( () => usuariodto.datos.apellido)">
                            <MatTextField @bind-Value="@usuariodto.datos.apellido" Class="text-field-style" Label="Apellido"
                                          @oninput='@(e => KeyUp(e,"apellido",usuariodto.datos))'></MatTextField>
                            <div class="incorrecto">
                                <MatIcon Icon="@MatIconNames.Error"></MatIcon>
                                <ValidationMessage For="@(() => usuariodto.datos.apellido)" />
                            </div>
                            <div class="correcto">
                                <MatIcon Icon="@MatIconNames.Check" Class="val-icon"></MatIcon>
                                <span>Correcto</span>
                            </div>
                        </div>
                        <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass( () => usuariodto.datos.tipodocumento)">
                            <InputSelect @bind-Value="@usuariodto.datos.tipodocumento" class="text-field-style">
                                <option value="">--Seleccione Algo--</option>
                                <option value="CE">Carnet de Extranjeria</option>
                                <option value="DNI">D.N.I.</option>
                                <option value="pasaporte">Pasaporte</option>
                            </InputSelect>
                            <div class="incorrecto">
                                <MatIcon Icon="@MatIconNames.Error" Class="val-icon"></MatIcon>
                                <ValidationMessage For="@(() => usuariodto.datos.tipodocumento)" />
                            </div>
                            <div class="correcto">
                                <MatIcon Icon="@MatIconNames.Check" Class="val-icon"></MatIcon>
                                <span>Correcto</span>
                            </div>
                        </div>
                        <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass( () => usuariodto.datos.numerodocumento)">
                            <MatTextField @bind-Value="@usuariodto.datos.numerodocumento" Class="text-field-style" Label="Numero de Documento"
                                          @oninput='@(e => KeyUp(e,"numerodocumento",usuariodto.datos))'></MatTextField>

                            <div class="incorrecto">
                                <MatIcon Icon="@MatIconNames.Error" Class="val-icon"></MatIcon>
                                <ValidationMessage For="@(() => usuariodto.datos.numerodocumento)" />
                            </div>
                            <div class="correcto">
                                <MatIcon Icon="@MatIconNames.Check" Class="val-icon"></MatIcon>
                                <span>Correcto</span>
                            </div>
                        </div>
                        <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass( () => usuariodto.datos.fechanacimiento)">
                            <MatTextField @bind-Value="@usuariodto.datos.fechanacimiento" Class="text-field-style" Label="Fecha Nacimiento"
                                          @oninput='@(e => KeyUp(e,"fechanacimiento",usuariodto.datos))'></MatTextField>

                            <div class="incorrecto">
                                <MatIcon Icon="@MatIconNames.Error" Class="val-icon"></MatIcon>
                                <ValidationMessage For="@(() => usuariodto.datos.fechanacimiento)" />
                            </div>
                            <div class="correcto">
                                <MatIcon Icon="@MatIconNames.Check" Class="val-icon"></MatIcon>
                                <span>Correcto</span>
                            </div>
                        </div>
                        <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass( () => usuariodto.datos.direccion)">
                            <MatTextField @bind-Value="@usuariodto.datos.direccion" Class="text-field-style" Label="Direccion"
                                          @oninput='@(e => KeyUp(e,"direccion",usuariodto.datos))'></MatTextField>

                            <div class="incorrecto">
                                <MatIcon Icon="@MatIconNames.Error" Class="val-icon"></MatIcon>
                                <ValidationMessage For="@(() => usuariodto.datos.direccion)" />
                            </div>
                            <div class="correcto">
                                <MatIcon Icon="@MatIconNames.Check" Class="val-icon"></MatIcon>
                                <span>Correcto</span>
                            </div>
                        </div>
                        <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass( () => usuariodto.datos.email)">
                            <MatTextField @bind-Value="@usuariodto.datos.email" Class="text-field-style" Label="Email"
                                          @oninput='@(e => KeyUp(e,"email",usuariodto.datos))'></MatTextField>

                            <div class="incorrecto">
                                <MatIcon Icon="@MatIconNames.Error" Class="val-icon"></MatIcon>
                                <ValidationMessage For="@(() => usuariodto.datos.email)" />
                            </div>
                            <div class="correcto">
                                <MatIcon Icon="@MatIconNames.Check" Class="val-icon"></MatIcon>
                                <span>Correcto</span>
                            </div>
                        </div>
                        <div class="field-container">
                            <InputImg Label="Foto" ImagenSeleccionada="ImagenSeleccionada" ImagenTemporal="@imagenTemporal"></InputImg>
                        </div>
                        <div class="field-container">
                            <MatButton type="submit"
                                       Icon="@MatBlazor.MatIconNames.Check_circle_outline"
                                       Class="button-input-style mat-success-c sub-but">Registrar Ahora</MatButton>
                        </div>
                    </MatTab>
                </MatTabGroup>
            </EditForm>
        }


    </MatCardContent>


</MatCard>
@code{
    //public Usuario2 usuario2 = new Usuario2();
    private UsuarioDTO usuariodto = new UsuarioDTO();
    private List<Rol> listaroles = new List<Rol>();
    private EditContext _editContext;
    private bool carga = false;

    // [Parameter] public bool dialogoRegistro { get; set; }
    [Parameter] public List<Usuario> listausuarios { get; set; }
    [Parameter] public EventCallback<bool> cerrarDialogoRegistro { get; set; }
    private string imagenTemporal { get; set; } = null;


    protected override async Task OnInitializedAsync()
    {
        _editContext = new EditContext(usuariodto);
        await getRoles();
        imagenTemporal = "";
        if (!string.IsNullOrWhiteSpace(usuariodto.datos.imagen))
        {
            imagenTemporal = usuariodto.datos.imagen;
            usuariodto.datos.imagen = null;
        }
        //Aqui se hara peticion HTTP
    }
    public async Task getRoles()
    {
        var httpResponse = await repository.Get<List<Rol>>("api/usuarios/roles");
        if (httpResponse.Error)
        {
            Console.WriteLine("Ha ocurrido un error al traer roles");
        }
        else
        {
            listaroles = httpResponse.Response;

        }
    }
    public void ImagenSeleccionada(string image)
    {
        usuariodto.datos.imagen = image;
    }

    void doSomething(ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();
        Console.WriteLine("It is definitely: " + selectedString);
    }
    void KeyUp(ChangeEventArgs e, string memberName, object val)
    {
        //var property = usuario2.GetType().GetProperty(memberName);
        var property = val.GetType().GetProperty(memberName); //GetProperty(memberName, usuario2);
        property.SetValue(val, e.Value.ToString());
        Console.WriteLine(e.Value.ToString());
        Console.WriteLine("Aqui Todo Bien: " + e.Value.ToString());
        var fi = new FieldIdentifier(val, memberName);
        _editContext.NotifyFieldChanged(fi);
    }
    public async Task handleValidSubmit()
    {
        carga = true;
        Console.WriteLine("Todo Bien");
        Usuario usuario = new Usuario();
        usuario.usuario = usuariodto.usuario;
        usuario.clave = usuariodto.clave;
        usuario.estado = "activo";
        usuario.datos = usuariodto.datos;
        //usuario.roles = listaroles.Where(x => x.id == usuariodto.rolid).ToList();

        var httpResponse = await repository.Post<Usuario, Usuario>("api/usuarios", usuario);
        if (httpResponse.Error)
        {
            Console.WriteLine("Algo Ocurrio");
        }
        else
        {
            listausuarios.Add(httpResponse.Response);


            usuariodto = new UsuarioDTO();
            _editContext = new EditContext(usuariodto);
            _editContext.MarkAsUnmodified();
            _editContext.NotifyValidationStateChanged();

            StateHasChanged();
            carga = false;
            await cerrarDialogoRegistro.InvokeAsync(false);
        }
        await swalfire.successMessage("Usuario Registrado Correctamente");
    }

    public void handleInvalidSubmit()
    {
        swalfire.errorMessage("Por favor, Verifique los Datos Ingresados");
        Console.WriteLine("Algo Mal");
    }
    public System.Reflection.PropertyInfo GetProperty(string name, Object obj)
    {
        System.Reflection.PropertyInfo info = null;
        foreach (string item in name.Split('.'))
        {
            if (obj == null)
            {
                return null;
            }
            Type type = obj.GetType();
            info = type.GetProperty(item);
            if (info == null) { return null; }
            obj = info.GetValue(obj, null);
        }
        Console.WriteLine("se retorno aqui");
        return info;
    }
    /*public List<ItemSelect> itemset = new List<ItemSelect>
{
        new ItemSelect(){ label="D.N.I", value="DNI"},
        new ItemSelect(){ label="PASAPORTE", value="PASAPORTE"},
        new ItemSelect(){ label="CARNET DE EXTRANJERIA", value="CE"}
    };

    public class ItemSelect
    {
        public string label { get; set; }
        public string value { get; set; }
    }*/

}
