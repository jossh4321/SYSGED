@inject IRepository repository
@inject ISwalFireMessage swalfire
@using Blazored.Typeahead
@using SISGED.Client.Pages.Samples.WorkEnvironment
@using Newtonsoft.Json;

<style>
    .div-form {
        background-color: #a6a6a6;
        flex-basis: 100%;
        border-radius: 5px 5px 0px 0px;
        width: 100%;
    }

    .field-container {
        display: block;
        padding: 10px;
    }

    .text-field-style {
        display: block !important;
    }
    /*validacion*/
    .validation-message {
        display: inline;
    }

    div.invalid .correcto {
        display: none;
    }

    div.valid .incorrecto,
    div.valid:not(.modified) .correcto {
        display: none;
    }

    .correcto {
        color: green !important;
        font-family: sans-serif;
        font-size: 15px;
        display: flex;
        height: 18px;
    }

    .incorrecto {
        color: red !important;
        font-family: sans-serif;
        font-size: 15px;
        display: flex;
        height: 18px;
    }

    i.val-icon {
        font-size: 20px;
    }

    .good-msg, div.correcto i.good-icon {
        color: green !important;
    }

    div.incorrecto i.bad-icon {
        color: red !important;
    }

    div.mat-date-picker {
        width: 100% !important;
    }

    .contenedor-participantes {
        padding-top: 10px;
        margin: 20px;
        border: 2px solid #666666;
        border-radius: 5px;
    }

    .titulo-paticipantes {
        border: 1px solid black;
        margin: 0px 5px 0px 5px;
        border-radius: 5px 5px 0px 0px;
        background-color: #404040;
        color: white;
        display: flex;
        flex-direction: row;
        justify-content: center;
        align-items: center;
    }

    .titulo {
        color: #d9d9d9;
    }

    .icono {
        margin-left: 20px;
    }

        .icono i {
            margin: 5px;
        }

    .single-textfield-container {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
    }

    .base-field {
        flex-basis: 90%;
    }

    .base-icon {
        display: flex;
        flex-basis: 8%;
        justify-content: center;
        align-items: center;
        margin: 10px 2px;
        background: #ff1a1a;
        border-radius: 3px;
        border: 1px solid #800000
    }
</style>

<div class="div-form">
    @if (firstLoad == true)
    {
        <div class="loader-block">
            <div class="spinner-border spin" style="        width: 7rem;
        height: 7rem;
        color: #ccc" role="status">
                <span class="sr-only">Loading...</span>
            </div>

            <span style="color:white">CARGANDO...</span>
        </div>
    }
    else
    {
        <EditForm EditContext="@_editContext" Context="CurrentEditContext"
                  OnValidSubmit="handleValidSubmit" OnInvalidSubmit="handleInvalidSubmit">
            <FluentValidator></FluentValidator>
            <MatTabGroup>
                <MatTab Label="Datos de oficio de protocolo notarial">

                    <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass(() => documento.contenidoDTO.titulo)">
                        <MatTextField @bind-Value="@documento.contenidoDTO.titulo" Class="text-field-style" Label="Titulo de documento"
                                      @oninput='@(e => KeyUp(e, "titulo", documento.contenidoDTO))'></MatTextField>

                        <div class="incorrecto">
                            <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                            <ValidationMessage For="@(() => documento.contenidoDTO.titulo)" />
                        </div>
                        <div class="correcto">
                            <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                            <span class="good-msg">Correcto</span>
                        </div>
                    </div>

                    <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass(() => documento.contenidoDTO.descripcion)">
                        <MatTextField @bind-Value="@documento.contenidoDTO.descripcion" Class="text-field-style" Label="Descripcion del documento"
                                      @oninput='@(e => KeyUp(e, "descripcion", documento.contenidoDTO))'></MatTextField>

                        <div class="incorrecto">
                            <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                            <ValidationMessage For="@(() => documento.contenidoDTO.descripcion)" />
                        </div>
                        <div class="correcto">
                            <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                            <span class="good-msg">Correcto</span>
                        </div>
                    </div>

                    <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass(() => documento.contenidoDTO.direccionoficio)">
                        <MatTextField @bind-Value="@documento.contenidoDTO.direccionoficio" Class="text-field-style" Label="Dirección del oficio"
                                      @oninput='@(e => KeyUp(e, "direccionoficio", documento.contenidoDTO))'></MatTextField>

                        <div class="incorrecto">
                            <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                            <ValidationMessage For="@(() => documento.contenidoDTO.direccionoficio)" />
                        </div>
                        <div class="correcto">
                            <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                            <span class="good-msg">Correcto</span>
                        </div>
                    </div>

                    <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass(() => documento.contenidoDTO.actojuridico)">
                        <MatTextField @bind-Value="@documento.contenidoDTO.actojuridico" Class="text-field-style" Label="Acto jurídico"
                                      @oninput='@(e => KeyUp(e, "actojuridico", documento.contenidoDTO))'></MatTextField>

                        <div class="incorrecto">
                            <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                            <ValidationMessage For="@(() => documento.contenidoDTO.actojuridico)" />
                        </div>
                        <div class="correcto">
                            <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                            <span class="good-msg">Correcto</span>
                        </div>
                    </div>

                    <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass(() => documento.contenidoDTO.tipoprotocolo)">
                        <MatTextField @bind-Value="@documento.contenidoDTO.tipoprotocolo" Class="text-field-style" Label="Tipo de protocolo"
                                      @oninput='@(e => KeyUp(e, "tipoprotocolo", documento.contenidoDTO))'></MatTextField>

                        <div class="incorrecto">
                            <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                            <ValidationMessage For="@(() => documento.contenidoDTO.tipoprotocolo)" />
                        </div>
                        <div class="correcto">
                            <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                            <span class="good-msg">Correcto</span>
                        </div>
                    </div>

                    <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass(() => documento.contenidoDTO.idnotario)">
                        <BlazoredTypeahead SearchMethod="matchNotario" @bind-Value="@documento.contenidoDTO.idnotario"
                                           Placeholder="Ingrese el Nombre del Notario">
                            <SelectedTemplate>
                                <strong>Notario: @context.nombre @context.apellido  -  N° DNI: @context.dni</strong>
                            </SelectedTemplate>
                            <ResultTemplate>
                                <strong>Notario: @context.nombre @context.apellido  -  N° DNI: @context.dni</strong>
                            </ResultTemplate>
                            <NotFoundTemplate>
                                <span style="color:red;font-size:20px">NO SE ENCONTRARON RESULTADOS</span>
                            </NotFoundTemplate>
                        </BlazoredTypeahead>
                        <div class="incorrecto">
                            <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                            <ValidationMessage For="@(() => documento.contenidoDTO.idnotario)" />
                        </div>
                        <div class="correcto">
                            <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                            <span class="good-msg">Correcto</span>
                        </div>
                    </div>

                    <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass(() => documento.contenidoDTO.idcliente)">
                        <BlazoredTypeahead SearchMethod="matchCliente" @bind-Value="@documento.contenidoDTO.idcliente"
                                           Placeholder="Ingrese el Nombre del Cliente">
                            <SelectedTemplate>
                                <strong>Cliente: @context.datos.nombre  -  N° DNI: @context.datos.numerodocumento</strong>
                            </SelectedTemplate>
                            <ResultTemplate>
                                <strong>Cliente: @context.datos.nombre  -  N° DNI: @context.datos.numerodocumento</strong>
                            </ResultTemplate>
                            <NotFoundTemplate>
                                <span style="color:red;font-size:20px">NO SE ENCONTRARON RESULTADOS</span>
                            </NotFoundTemplate>
                        </BlazoredTypeahead>
                        <div class="incorrecto">
                            <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                            <ValidationMessage For="@(() => documento.contenidoDTO.idcliente)" />
                        </div>
                        <div class="correcto">
                            <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                            <span class="good-msg">Correcto</span>
                        </div>
                    </div>

                </MatTab>

                <MatTab Label="Otorgantes">
                    <div class="contenedor-otorgantes">
                        <div class="titulo-otorgantes">
                            <div><span class="titulo">Otorgantes</span></div>
                            <div class="icono" @onclick="@(addparticipante)">
                                <MatIcon Icon="add_circle_outline"></MatIcon>
                            </div>
                        </div>
                        @for (int i = 0; i < documento.contenidoDTO.otorgantes.Count; i++)
                        {

                            int index = i;
                            <div class="single-textfield-container">
                                <div class="field-container base-field input-group-2 @CurrentEditContext.FieldCssClass(() => documento.contenidoDTO.otorgantes[index].nombre)">
                                    <MatTextField @bind-Value="@documento.contenidoDTO.otorgantes[index].nombre" Class="text-field-style"
                                                  Label="Nombres"
                                                  @oninput='@(e => KeyUp(e, "nombre", documento.contenidoDTO.otorgantes[index]))'></MatTextField>
                                    <div class="incorrecto">
                                        <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                                        <ValidationMessage For="@(() => documento.contenidoDTO.otorgantes[index].nombre)" />
                                    </div>
                                    <div class="correcto">
                                        <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                                        <span class="good-msg">Correcto</span>
                                    </div>
                                </div>
                                @if (index > 0)
                                {
                                    <div class="base-icon" @onclick="@(() => removeparticipante(index))">
                                        <MatIcon Icon="remove_circle_outline"></MatIcon>
                                    </div>
                                }
                            </div>
                        }
                        <div class="field-container base-field input-group-2 @CurrentEditContext.FieldCssClass(() => documento.contenidoDTO.otorgantes)">
                            <div class="incorrecto">
                                <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                                <ValidationMessage For="@(() => documento.contenidoDTO.otorgantes)" />
                            </div>
                            <div class="correcto">
                                <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                                <span class="good-msg">Correcto</span>
                            </div>
                        </div>
                    </div>
                </MatTab>

                <MatTab Label="Subir Anexo">
                    <DragnDrop Label="" ImagenSeleccionada="ImagenSeleccionada" FileNames="FileName" ImagenTemporal="@(imagenTemporal2)"></DragnDrop>

                    @if (nombres != null && nombres.Count > 0)
                    {
                        @for (int i = 0; i < nombres.Count; i++)
                        {
                            int index = i;
                            string a = nombres[i];
                            <div>

                                @nombres[i]

                                <button class="btn btn-link text-danger p-0 pl-1" type="button"
                                        @onclick="@(e => RemoveFile(a,index))">
                                    <small class="RedText">Eliminar</small>
                                </button>
                            </div>
                        }
                    }
                    <div class="field-container">
                        <MatButton type="submit"
                                   Disabled="@loadprocess"
                                   Icon="@MatBlazor.MatIconNames.Edit"
                                   Class="button-input-style mat-warning-c sub-but">Modificar Ahora</MatButton>
                    </div>
                </MatTab>
            </MatTabGroup>
        </EditForm>
    }
</div>
@code {
    [CascadingParameter] WorkEnvironment workspace { get; set; }
    [CascadingParameter(Name = "SesionUsuario")] protected Sesion sesion { get; set; }
    private bool loadprocess = false;
    public bool abrirDialogo = false;
    List<string> nombres = new List<string>();
    private bool firstLoad = true;

    private OficioBPNDTO documento = new OficioBPNDTO();
    private List<string> imagenTemporal2 = new List<string>();
    private EditContext _editContext;

    protected override async Task OnInitializedAsync()
    {
        documento.contenidoDTO.Urlanexo = new List<string>();
        documento.contenidoDTO.otorgantes = new List<OtorganteDTO>() { new OtorganteDTO() { index = 0, nombre = "" } };
        firstLoad = true;
        _editContext = new EditContext(documento);
        var httpResponse = await repository.Get<OficioBPNDTO>($"api/documentos/documentoobpn?iddoc={workspace.expedienteseleccionado.documento.id}");
        if (!httpResponse.Error)
        {
            documento = (OficioBPNDTO)httpResponse.Response;
            _editContext = new EditContext(documento);
            StateHasChanged();
        }
        else
        {
            Console.WriteLine("Ocurrio un Error");
        }
        foreach (string u in documento.contenidoDTO.Urlanexo)
        {
            if (!string.IsNullOrWhiteSpace(u))
            {
                imagenTemporal2.Add(u);
            }
        }
        documento.contenidoDTO.Urlanexo.Clear();
        firstLoad = false;
    }

    private void ImagenSeleccionada(string imagenbase64)
    {
        documento.contenidoDTO.Urlanexo.Add(imagenbase64);
    }

    private void FileName(string imagenbase64)
    {
        nombres.Add(imagenbase64);
    }

    private async Task RemoveFile(string file, int imagen64)
    {
        nombres.Remove(file);
        documento.contenidoDTO.Urlanexo.RemoveAt(imagen64);
        StateHasChanged();
    }

    void KeyUp(ChangeEventArgs e, string memberName, object val)
    {
        var property = val.GetType().GetProperty(memberName);
        property.SetValue(val, e.Value.ToString());
        var fi = new FieldIdentifier(val, memberName);
        _editContext.NotifyFieldChanged(fi);
    }

    private async Task<IEnumerable<Notario>> matchNotario(string searchtext)
    {
        var httpResponse = await repository.Get<List<Notario>>($"api/notarios/filter?term={searchtext}");
        if (httpResponse.Error)
        {
            return new List<Notario>();
        }
        else
        {
            return httpResponse.Response;
        }
    }

    private async Task<IEnumerable<Usuario>> matchCliente(string searchtext)
    {
        var httpResponse = await repository.Get<List<Usuario>>($"api/usuarios/clientes?term={searchtext}");
        if (httpResponse.Error)
        {
            return new List<Usuario>();
        }
        else
        {
            return httpResponse.Response;
        }
    }

    public async Task handleValidSubmit()
    {
        loadprocess = true;
        ExpedienteWrapper expedienteWrapper = new ExpedienteWrapper();
        expedienteWrapper.documento = documento;
        expedienteWrapper.idexpediente = workspace.expedienteseleccionado.idexpediente;
        expedienteWrapper.idusuarioactual = sesion.usuario.id;
        expedienteWrapper.documentoentrada = workspace.expedienteseleccionado.documento.id;

        var httpResponse = await repository.Put<ExpedienteWrapper>($"api/documentos/actualizarDocumentoOficioBPN", expedienteWrapper);
        if (!httpResponse.Error)
        {
            ExpedienteBandejaDTO expedientebandeja = new ExpedienteBandejaDTO();
            expedientebandeja = workspace.expedienteseleccionado;

            List<String> listaoto = new List<string>();
            foreach (OtorganteDTO oto in documento.contenidoDTO.otorgantes)
            {
                listaoto.Add(oto.nombre);
            }

            //Parseo Necesario//
            ContenidoOficioBPN contobpn = new ContenidoOficioBPN();
            contobpn.titulo = documento.contenidoDTO.titulo;
            contobpn.descripcion = documento.contenidoDTO.descripcion;
            contobpn.idcliente = documento.contenidoDTO.idcliente.id;
            contobpn.direccionoficio = documento.contenidoDTO.direccionoficio;
            contobpn.idnotario = documento.contenidoDTO.idnotario.id;
            contobpn.actojuridico = documento.contenidoDTO.actojuridico;
            contobpn.tipoprotocolo = documento.contenidoDTO.tipoprotocolo;
            contobpn.otorgantes = listaoto;
            contobpn.fecharealizacion = (DateTime)documento.contenidoDTO.fecharealizacion;
            //contobpn.url = documento.contenidoDTO.data; Por revisar

            expedientebandeja.documento.id = documento.id;
            expedientebandeja.documento.tipo = documento.tipo;
            expedientebandeja.documento.historialcontenido = documento.historialcontenido;
            expedientebandeja.documento.historialproceso = documento.historialproceso;
            expedientebandeja.documento.contenido = contobpn;
            expedientebandeja.documento.estado = documento.estado;
            expedientebandeja.documentosobj.Add(expedientebandeja.documento);
            Item itemSalida = new Item()
            {
                nombre = expedientebandeja.tipo,
                valor = expedientebandeja,
                icono = "alarm_add",
                descripcion = ((DocumentoDTO)expedientebandeja.documento).tipo,
                currentPlace = "workspace",
                originPlace = "inputs",
                cliente = expedientebandeja.cliente,
                itemstatus = "registrado"
            };

            workspace.UpdateDocRegistrado(itemSalida);
            workspace.UpdateTools("Modificar Documento");
            DocumentoDTO documentoDTO = new DocumentoDTO();
            documentoDTO.id = documento.id;
            documentoDTO.tipo = documento.tipo;
            documentoDTO.estado = documento.estado;
            documentoDTO.contenido = JsonConvert.SerializeObject(contobpn);
            documentoDTO.historialcontenido = documento.historialcontenido;
            documentoDTO.historialproceso = documento.historialproceso;
            documentoDTO.urlanexo = documento.urlanexo;
            workspace.expedienteseleccionado.documentosobj.Add(documentoDTO);
            workspace.expedienteseleccionado.documento = documentoDTO;

            StateHasChanged();
            await swalfire.successMessage("Oficio de Busqueda de Protocolo Notarial modificada Correctamente");
        }
        else
        {
            await swalfire.errorMessage("Error en el servidor");
        }
        loadprocess = false;
    }

    public void handleInvalidSubmit()
    {
        loadprocess = false;
        swalfire.errorMessage("Por favor, Verifique los Datos Ingresados");
    }


    private void addparticipante()
    {
        documento.contenidoDTO.otorgantes.Add(new OtorganteDTO() { index = (documento.contenidoDTO.otorgantes.Count) });
        StateHasChanged();
    }

    private void removeparticipante(int index)
    {
        documento.contenidoDTO.otorgantes.RemoveAt(index);
        StateHasChanged();
    }
}
