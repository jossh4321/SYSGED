@inject IRepository repository
@inject ISwalFireMessage swalfire
@using Blazored.Typeahead
@using SISGED.Client.Pages.Samples.WorkEnvironment
@using Newtonsoft.Json;
<style>
    .div-form {
        background-color: #a6a6a6;
        flex-basis: 100%;
        border-radius: 5px 5px 0px 0px;
        width: 100%;
    }

    .field-container {
        display: block;
        padding: 10px;
    }

    .text-field-style {
        display: block !important;
    }
    /*validacion*/
    .validation-message {
        display: inline;
    }

    div.invalid .correcto {
        display: none;
    }

    div.valid .incorrecto,
    div.valid:not(.modified) .correcto {
        display: none;
    }

    .correcto {
        color: green !important;
        font-family: sans-serif;
        font-size: 15px;
        display: flex;
        height: 18px;
    }

    .incorrecto {
        color: red !important;
        font-family: sans-serif;
        font-size: 15px;
        display: flex;
        height: 18px;
    }

    i.val-icon {
        font-size: 20px;
    }

    .good-msg, div.correcto i.good-icon {
        color: green !important;
    }

    div.incorrecto i.bad-icon {
        color: red !important;
    }
</style>

<div class="div-form">
    @if (firstLoad == true)
    {
        <div class="loader-block">
            <div class="spinner-border spin" style="        width: 7rem;
        height: 7rem;
        color: #ccc" role="status">
                <span class="sr-only">Loading...</span>
            </div>

            <span style="color:white">CARGANDO...</span>
        </div>
    }
    else
    {
        <EditForm EditContext="@_editContext" Context="CurrentEditContext"
                  OnValidSubmit="handleValidSubmit" OnInvalidSubmit="handleInvalidSubmit">
            <FluentValidator></FluentValidator>
            <MatTabGroup>
                <MatTab Label="Datos de la Apelación">

                    <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass( () => apelacion.contenidoDTO.titulo)">
                        <MatTextField @bind-Value="@apelacion.contenidoDTO.titulo" Class="text-field-style"
                                      Label="Titulo de la Apelación" @oninput='@(e => KeyUp(e,"titulo",apelacion.contenidoDTO))'></MatTextField>
                        <div class="incorrecto">
                            <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                            <ValidationMessage For="@(() => apelacion.contenidoDTO.titulo)" />
                        </div>
                        <div class="correcto">
                            <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                            <span class="good-msg">Correcto</span>
                        </div>
                    </div>

                    <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass( () => apelacion.contenidoDTO.descripcion)">
                        <MatTextField @bind-Value="@apelacion.contenidoDTO.descripcion" Class="text-field-style"
                                      Label="Descripción de la apelación" @oninput='@(e => KeyUp(e,"descripcion",apelacion.contenidoDTO))'></MatTextField>
                        <div class="incorrecto">
                            <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                            <ValidationMessage For="@(() => apelacion.contenidoDTO.descripcion)" />
                        </div>
                        <div class="correcto">
                            <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                            <span class="good-msg">Correcto</span>
                        </div>
                    </div>

                    <InputFile Label="" ImagenSeleccionada="ImagenSeleccionada"></InputFile>

                    <div class="field-container">
                        <MatButton type="submit"
                                   Disabled="@loadprocess"
                                   Icon="@MatBlazor.MatIconNames.Check_circle_outline"
                                   Class="button-input-style mat-warning-c sub-but">Modificar Ahora Ahora</MatButton>
                    </div>
                </MatTab>
            </MatTabGroup>
        </EditForm>
    }
</div>

@code {
    //Variables de sesion
    [CascadingParameter] WorkEnvironment workspace { get; set; }
    [CascadingParameter(Name = "SesionUsuario")] protected Sesion sesion { get; set; }

    //Datos del formulario
    [Parameter] public EventCallback<ExpedienteBandejaDTO> AumentarBandeja { get; set; }
    private ApelacionDTO apelacion = new ApelacionDTO();
    private EditContext _editContext;
    private string imagenTemporal;
    private bool loadprocess = false;
    private bool firstLoad = true;

    protected override async Task OnInitializedAsync()
    {
        firstLoad = true;
        _editContext = new EditContext(apelacion);
        var httpResponse = await repository.Get<ApelacionDTO>($"api/documentos/documentoape?iddoc={workspace.expedienteseleccionado.documento.id}");
        if (!httpResponse.Error)
        {
            apelacion = (ApelacionDTO)httpResponse.Response;
            _editContext = new EditContext(apelacion);
            StateHasChanged();
        }
        else
        {
            Console.WriteLine("Hubo un Error");
        }
        if (!string.IsNullOrEmpty(apelacion.contenidoDTO.data))
        {
            imagenTemporal = apelacion.contenidoDTO.data;
            apelacion.contenidoDTO.data = null;
        }
        firstLoad = false;
    }

    private void ImagenSeleccionada(string imagenbase64)
    {
        apelacion.contenidoDTO.data = imagenbase64;
    }

    void KeyUp(ChangeEventArgs e, string memberName, object val)
    {
        var property = val.GetType().GetProperty(memberName);
        property.SetValue(val, e.Value.ToString());
        var fi = new FieldIdentifier(val, memberName);
        _editContext.NotifyFieldChanged(fi);
    }

    public async Task handleValidSubmit()
    {
        loadprocess = true;
        //aperturamientodisciplinario.contenidoDTO.idusuario = sesion.usuario.id;
        ExpedienteWrapper expedienteWrapper = new ExpedienteWrapper();
        expedienteWrapper.documento = apelacion;
        expedienteWrapper.idexpediente = workspace.expedienteseleccionado.idexpediente;
        expedienteWrapper.idusuarioactual = sesion.usuario.id;
        expedienteWrapper.documentoentrada = workspace.expedienteseleccionado.documento.id;

        var httpResponse = await repository.Put<ExpedienteWrapper>($"api/documentos/actualizarDocumentoAPE", expedienteWrapper);
        if (!httpResponse.Error)
        {

            ContenidoApelacion conta = new ContenidoApelacion();
            conta.titulo = apelacion.contenidoDTO.titulo;
            conta.descripcion = apelacion.contenidoDTO.descripcion;
            conta.fechaapelacion = apelacion.contenidoDTO.fechaapelacion;
            conta.url = apelacion.contenidoDTO.data;

            ExpedienteBandejaDTO expedientebandeja = new ExpedienteBandejaDTO();
            expedientebandeja = workspace.expedienteseleccionado;
            expedientebandeja.documento.id = apelacion.id;
            expedientebandeja.documento.tipo = apelacion.tipo;
            expedientebandeja.documento.historialcontenido = apelacion.historialcontenido;
            expedientebandeja.documento.historialproceso = apelacion.historialproceso;
            expedientebandeja.documento.contenido = conta;
            expedientebandeja.documento.estado = apelacion.estado;
            expedientebandeja.documentosobj.Add(expedientebandeja.documento);
            Item itemSalida = new Item()

            {
                nombre = expedientebandeja.tipo,
                valor = expedientebandeja,
                icono = "alarm_add",
                descripcion = ((DocumentoDTO)expedientebandeja.documento).tipo,
                currentPlace = "workspace",
                originPlace = "inputs",
                cliente = expedientebandeja.cliente,
                itemstatus = "registrado"
            };

            workspace.UpdateDocRegistrado(itemSalida);
            workspace.UpdateTools("Modificar Documento");
            DocumentoDTO documentoDTO = new DocumentoDTO();
            documentoDTO.id = apelacion.id;
            documentoDTO.tipo = apelacion.tipo;
            documentoDTO.estado = apelacion.estado;
            documentoDTO.contenido = JsonConvert.SerializeObject(conta);
            documentoDTO.historialcontenido = apelacion.historialcontenido;
            documentoDTO.historialproceso = apelacion.historialproceso;
            documentoDTO.urlanexo = apelacion.urlanexo;
            workspace.expedienteseleccionado.documentosobj.Add(documentoDTO);
            workspace.expedienteseleccionado.documento = documentoDTO;

            StateHasChanged();
            await swalfire.successMessage("Apelación modificada correctamente");
        }
        else
        {
            await swalfire.errorMessage("Error en el servidor, intentelo de nuevo");
        }
        loadprocess = false;
    }

    public void handleInvalidSubmit()
    {
        loadprocess = false;
        swalfire.errorMessage("Por favor, Verifique los Datos Ingresados");
    }

}

