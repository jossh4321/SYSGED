@inject IRepository repositorio
@inject ISwalFireMessage swalFireMessage
<link rel="stylesheet" href="css/estilosEP/styleEP.css" />
<div class="filtros">
    <div class="input-filtro">
        <MatTextField Icon="@MatIconNames.Directions" Label="Dirección oficio notarial" @bind-Value="direccionOficioNotarial"></MatTextField>
    </div>
    <div class="input-filtro">
        <MatTextField Icon="@MatIconNames.Call_to_action" Label="Acto Jurídico" @bind-Value="actojuridico"></MatTextField>
    </div>
    <div class="input-filtro">
        <MatTextField Icon="@MatIconNames.Supervised_user_circle" Label="Nombre notario" @bind-Value="nombrenotario"></MatTextField>
    </div>
    <div class="input-filtro-multiple">
        @if (nombresotorgantes == null)
        {
            <text>Cargando...</text>
        }
        else
        {
            @for (int i = 0; i < nombresotorgantes.Count; i++)
            {
                <div class="input-filtro-hijo">
                    <MatTextField Icon="@MatIconNames.Verified_user" Label="Nombre del otorgante" @bind-Value="nombresotorgantes[i]"></MatTextField>
                </div>
            }

        }
    </div>
    <div class="input-filtro-options">
        <MatButton Icon="@MatIconNames.Search" Raised="true">Buscar</MatButton>
    </div>
</div>

@if (listaEscriturasPublicas.Count == 0)
{
    <text>Cargando...</text>
}
else
{
    <div class="mat-layout-grid">
        <div class="mat-layout-grid-inner">
            @foreach (var escriturapublica in listaEscriturasPublicas)
            {
                <div class="mat-layout-grid-cell-span-4">
                    <EscrituraPublicaC escriturapublica="escriturapublica" @key="escriturapublica.id"
                                       mostrarDatosEscrituraPublica="VisualizarEscrituraPublica"></EscrituraPublicaC>
                </div>
            }
        </div>
    </div>

    <MatDialog @bind-IsOpen="dialogoabierto" Class="dialogo">
        <MatDialogTitle>Datos de la escritura pública</MatDialogTitle>
        <MatDialogContent>
            <div class="row-datos">
                <div class="col-datos-6">
                    <div class="mat-elevation-z5 demo-mat-card-text">
                        <p>Nombre del notario</p>
                        <h5>@escrituraPublica.notario</h5>
                    </div>
                </div>
                <div class="col-datos-6">
                    <div class="mat-elevation-z5 demo-mat-card-text">
                        <p>Fecha de la escritura pública</p>
                        <h5>@escrituraPublica.fechaescriturapublica.ToString("dd/M/yyyy", System.Globalization.CultureInfo.InvariantCulture)</h5>
                    </div>
                </div>
                <div class="col-datos-6">
                    <div class="mat-elevation-z5 demo-mat-card-text">
                        <p>Estado de la escritura pública</p>
                        <h5>@escrituraPublica.estado</h5>
                    </div>
                </div>
                <div class="col-datos-6">
                    <div class="mat-elevation-z5 demo-mat-card-text">
                        <p>Dirección del oficio notarial del ex-notario</p>
                        <h5>@escrituraPublica.direccionoficio</h5>
                    </div>
                </div>
                <div class="col-datos-12 demo-mat-card-text">
                    <p>Actos Jurídicos</p>
                    <div class="row-datos">
                        @if (escrituraPublica.actosjuridicos == null)
                        {
                            <h5>Cargando...</h5>
                        }
                        else
                        {
                            int identificador = 0;
                            @foreach (var actojuridico in escrituraPublica.actosjuridicos)
                            {
                                <ActoJuridicoC actojuridico="actojuridico" @key="identificador" mostrarContratos="VisualizarContratos"
                                               mostrarOtorgantes="VisualizarOtorgantes"></ActoJuridicoC>
                                identificador++;
                            }
                        }
                    </div>
                </div>
            </div>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton OnClick="@((e) => { dialogoabierto = false; })" Icon="@MatIconNames.Arrow_left">Volver</MatButton>
        </MatDialogActions>
    </MatDialog>

    <MatDialog @bind-IsOpen="dialogocontrato">
        <MatDialogTitle>Contratos del Acto Jurídico</MatDialogTitle>
        <MatDialogContent>
            <div class="row-datos">
                @if (listacontratos == null)
                {
                    <text>Cargando...</text>
                }
                else
                {
                    @foreach (var contrato in listacontratos)
                    {
                        <ContratoC contrato="contrato"></ContratoC>
                    }
                }
            </div>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton OnClick="@((e) => { dialogocontrato = false; })" Icon="@MatIconNames.Arrow_left">Regresar</MatButton>
        </MatDialogActions>
    </MatDialog>

    <MatDialog @bind-IsOpen="dialogootorgantes">
        <MatDialogTitle>Otorgantes del Acto Jurídico</MatDialogTitle>
        <MatDialogContent>
            <div class="row-datos">
                @if (listaotorgantes == null)
                {
                    <text>Cargando...</text>
                }
                else
                {
                    @foreach (var otorgante in listaotorgantes)
                    {
                        <OtorganteC otorgante="otorgante"></OtorganteC>
                    }
                }
            </div>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton OnClick="@((e) => { dialogootorgantes = false; })" Icon="@MatIconNames.Arrow_left">Regresar</MatButton>
        </MatDialogActions>
    </MatDialog>
}
@code {
    private List<EscrituraPublicaRDTO> listaEscriturasPublicas { get; set; }
    public bool dialogoabierto = false;
    public EscrituraPublicaRDTO escrituraPublica { get; set; }
    public bool dialogocontrato = false;
    public bool dialogootorgantes = false;
    public List<Contrato> listacontratos { get; set; }
    public List<Otorgante> listaotorgantes { get; set; }
    public Dictionary<string, string> diccionariostrings = new Dictionary<string, string>();
    // Filtros realizados para la búsqueda
    public string direccionOficioNotarial = "";
    public string actojuridico = "";
    public string nombrenotario = "";
    public List<string> nombresotorgantes { get; set; }

    protected async override Task OnInitializedAsync()
    {
        listaEscriturasPublicas = new List<EscrituraPublicaRDTO>();
        escrituraPublica = new EscrituraPublicaRDTO();
        listacontratos = new List<Contrato>();
        listaotorgantes = new List<Otorgante>();
        nombresotorgantes = new List<string>();
        nombresotorgantes.Add("");
        await CargarEscriturasPublicas();
    }

    private async Task CargarEscriturasPublicas()
    {
        var responseHttp = await repositorio.Get<List<EscrituraPublicaRDTO>>("api/EscriturasPublicas");
        listaEscriturasPublicas = responseHttp.Response;
    }

    private void VisualizarEscrituraPublica(EscrituraPublicaRDTO escrituraPublica)
    {
        dialogoabierto = true;
        this.escrituraPublica = escrituraPublica;
    }

    private void VisualizarOtorgantes(List<Otorgante> otorgantes)
    {
        dialogootorgantes = true;
        listaotorgantes = otorgantes;
    }
    private void VisualizarContratos(List<Contrato> contratos)
    {
        dialogocontrato = true;
        listacontratos = contratos;
    }

}
