@inject IRepository repositorio
@inject ISwalFireMessage swalFireMessage
@inject NavigationManager navigationManager
@using SISGED.Client.Pages.Samples.WorkEnvironment
<link rel="stylesheet" href="css/estilosEP/styleEP.css" />
<div>
    @if (parametrosFiltros == null)
    {
        <text>Cargando....</text>
    }
    else
    {
        <EditForm EditContext="@_editContext" Context="CurrentEditContext"
                  OnValidSubmit="BuscarEscriturasPublicas" OnInvalidSubmit="ValidacionFiltros">
            <FluentValidator></FluentValidator>
            <div class="filtros">
                <div class="input-filtro @CurrentEditContext.FieldCssClass( () => parametrosFiltros.direccionoficionotarial)">
                    <MatTextField Icon="@MatIconNames.Directions" Label="Dirección oficio notarial"
                                  Class="bloque"
                                  @bind-Value="parametrosFiltros.direccionoficionotarial" @oninput='@(e => KeyUp(e, "direccionoficionotarial", parametrosFiltros))'></MatTextField>
                    <div class="incorrecto">
                        <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                        <ValidationMessage For="@(() => parametrosFiltros.direccionoficionotarial)" />
                    </div>
                    <div class="correcto">
                        <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                        <span class="good-msg">Correcto</span>
                    </div>
                </div>
                <div class="input-filtro @CurrentEditContext.FieldCssClass( () => parametrosFiltros.actojuridico)">
                    <MatTextField Icon="@MatIconNames.Call_to_action" Label="Acto Jurídico"
                                  Class="bloque"
                                  @bind-Value="parametrosFiltros.actojuridico" @oninput='@(e=> KeyUp(e, "actojuridico", parametrosFiltros))'></MatTextField>
                    <div class="incorrecto">
                        <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                        <ValidationMessage For="@(() => parametrosFiltros.actojuridico)" />
                    </div>
                    <div class="correcto">
                        <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                        <span class="good-msg">Correcto</span>
                    </div>
                </div>
                <div class="input-filtro @CurrentEditContext.FieldCssClass( () => parametrosFiltros.nombrenotario)">
                    <MatTextField Icon="@MatIconNames.Supervised_user_circle" Label="Nombre notario"
                                  Class="bloque"
                                  @bind-Value="parametrosFiltros.nombrenotario" @oninput='@(e => KeyUp(e, "nombrenotario", parametrosFiltros))'></MatTextField>
                    <div class="incorrecto">
                        <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                        <ValidationMessage For="@(() => parametrosFiltros.nombrenotario)" />
                    </div>
                    <div class="correcto">
                        <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                        <span class="good-msg">Correcto</span>
                    </div>
                </div>
                <div class="input-filtro-multiple">
                    @if (parametrosFiltros.nombreotorgantes == null)
                    {
                        <text>Cargando...</text>
                    }
                    else
                    {
                        @foreach (var otorgante in parametrosFiltros.nombreotorgantes)
                        {
                            @if (otorgante == null)
                            {
                                <text>Cargando ...</text>
                            }
                            else
                            {
                                <div class="input-filtro-hijo @CurrentEditContext.FieldCssClass( () => parametrosFiltros.nombreotorgantes[otorgante.index].nombre)">
                                    <MatTextField Icon="@MatIconNames.Verified_user" Label="Nombre del otorgante"
                                                  Class="bloque"
                                                  @bind-Value="parametrosFiltros.nombreotorgantes[otorgante.index].nombre" @oninput='@(e => KeyUp(e, "nombre", parametrosFiltros.nombreotorgantes[otorgante.index]))'></MatTextField>

                                    <div class="incorrecto">
                                        <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                                        <ValidationMessage For="@(() => parametrosFiltros.nombreotorgantes[otorgante.index].nombre)" />
                                    </div>
                                    <div class="correcto">
                                        <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                                        <span class="good-msg">Correcto</span>
                                    </div>
                                </div>

                            }
                        }

                    }
                </div>
                <div class="input-filtro-options">
                    <MatButton Icon="@MatIconNames.Search" Raised="true" type="submit">Buscar</MatButton>
                </div>
            </div>

        </EditForm>
    }

</div>

@if (listaEscriturasPublicas.Count == 0)
{
    <text>Cargando...</text>
}
else
{
    <div class="mat-layout-grid">
        <div class="mat-layout-grid-inner">
            @foreach (var escriturapublica in listaEscriturasPublicas)
            {
                <div class="mat-layout-grid-cell-span-4">
                    <EscrituraPublicaC escriturapublica="escriturapublica" @key="escriturapublica.id"
                                       mostrarDatosEscrituraPublica="VisualizarEscrituraPublica" escogerEscrituraPublica="EscogerEscrituraPublica"></EscrituraPublicaC>
                </div>
            }
        </div>
    </div>

    <PaginationBootstrap currentPage="paginaactual" totalPages="paginastotales" radio="2" selectedPage="paginaSeleccionada"></PaginationBootstrap>

    <MatDialog @bind-IsOpen="dialogoabierto" Class="dialogo">
        <MatDialogTitle>Datos de la escritura pública</MatDialogTitle>
        <MatDialogContent>
            <div class="row-datos">
                <div class="col-datos-6">
                    <div class="mat-elevation-z5 demo-mat-card-text">
                        <p>Nombre del notario</p>
                        <h5>@escrituraPublica.notario</h5>
                    </div>
                </div>
                <div class="col-datos-6">
                    <div class="mat-elevation-z5 demo-mat-card-text">
                        <p>Fecha de la escritura pública</p>
                        <h5>@escrituraPublica.fechaescriturapublica.ToString("dd/M/yyyy", System.Globalization.CultureInfo.InvariantCulture)</h5>
                    </div>
                </div>
                <div class="col-datos-6">
                    <div class="mat-elevation-z5 demo-mat-card-text">
                        <p>Estado de la escritura pública</p>
                        <h5>@escrituraPublica.estado</h5>
                    </div>
                </div>
                <div class="col-datos-6">
                    <div class="mat-elevation-z5 demo-mat-card-text">
                        <p>Dirección del oficio notarial del ex-notario</p>
                        <h5>@escrituraPublica.direccionoficio</h5>
                    </div>
                </div>
                <div class="col-datos-12 demo-mat-card-text">
                    <p>Actos Jurídicos</p>
                    <div class="row-datos">
                        @if (escrituraPublica.actosjuridicos == null)
                        {
                            <h5>Cargando...</h5>
                        }
                        else
                        {
                            int identificador = 0;
                            @foreach (var actojuridico in escrituraPublica.actosjuridicos)
                            {
                                <ActoJuridicoC actojuridico="actojuridico" @key="identificador" mostrarContratos="VisualizarContratos"
                                               mostrarOtorgantes="VisualizarOtorgantes"></ActoJuridicoC>
                                identificador++;
                            }
                        }
                    </div>
                </div>
            </div>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton OnClick="@((e) => { dialogoabierto = false; })" Icon="@MatIconNames.Arrow_left">Volver</MatButton>
        </MatDialogActions>
    </MatDialog>

    <MatDialog @bind-IsOpen="dialogocontrato">
        <MatDialogTitle>Contratos del Acto Jurídico</MatDialogTitle>
        <MatDialogContent>
            <div class="row-datos">
                @if (listacontratos == null)
                {
                    <text>Cargando...</text>
                }
                else
                {
                    @foreach (var contrato in listacontratos)
                    {
                        <ContratoC contrato="contrato"></ContratoC>
                    }
                }
            </div>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton OnClick="@((e) => { dialogocontrato = false; })" Icon="@MatIconNames.Arrow_left">Regresar</MatButton>
        </MatDialogActions>
    </MatDialog>

    <MatDialog @bind-IsOpen="dialogootorgantes">
        <MatDialogTitle>Otorgantes del Acto Jurídico</MatDialogTitle>
        <MatDialogContent>
            <div class="row-datos">
                @if (listaotorgantes == null)
                {
                    <text>Cargando...</text>
                }
                else
                {
                    @foreach (var otorgante in listaotorgantes)
                    {
                        <OtorganteC otorgante="otorgante"></OtorganteC>
                    }
                }
            </div>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton OnClick="@((e) => { dialogootorgantes = false; })" Icon="@MatIconNames.Arrow_left">Regresar</MatButton>
        </MatDialogActions>
    </MatDialog>
}
@code {
    [CascadingParameter]
    WorkEnvironment workspace { get; set; }
    private List<EscrituraPublicaRDTO>
    listaEscriturasPublicas
    { get; set; }
    public bool dialogoabierto = false;
    public EscrituraPublicaRDTO escrituraPublica { get; set; }
    public bool dialogocontrato = false;
    public bool dialogootorgantes = false;
    public List<Contrato> listacontratos { get; set; }
    public List<Otorgante> listaotorgantes { get; set; }
    public Dictionary<string, string> diccionariostrings = new Dictionary<string, string>();
    // Filtros realizados para la búsqueda
    ParametrosBusquedaEscrituraPublicaDTO parametrosFiltros;
    private EditContext _editContext;
    public int paginaactual = 1;
    public int paginastotales;
    protected async override Task OnInitializedAsync()
    {
        listaEscriturasPublicas = new List<EscrituraPublicaRDTO>();
        escrituraPublica = new EscrituraPublicaRDTO();
        listacontratos = new List<Contrato>();
        listaotorgantes = new List<Otorgante>();
        parametrosFiltros = new ParametrosBusquedaEscrituraPublicaDTO();
        parametrosFiltros.nombreotorgantes = new List<OtorganteDTO>();
        OtorganteDTO otorgante = new OtorganteDTO();
        otorgante.index = 0;
        parametrosFiltros.nombreotorgantes.Add(otorgante);
        _editContext = new EditContext(parametrosFiltros);
        await ConsultarEscriturasPublicasFiltros("");
    }

    public async Task paginaSeleccionada(int pagina)
    {
        paginaactual = pagina;
        await BuscarEscriturasPublicas();
    }

    private void VisualizarEscrituraPublica(EscrituraPublicaRDTO escrituraPublica)
    {
        dialogoabierto = true;
        this.escrituraPublica = escrituraPublica;
    }

    private async Task EscogerEscrituraPublica(EscrituraPublicaRDTO escrituraPublica)
    {
        Item itemEscogido = new Item()
        {
            nombre = workspace.expedienteseleccionado.tipo,
            valor = workspace.expedienteseleccionado,
            icono = "alarm_add",
            descripcion = ((DocumentoDTO) workspace.expedienteseleccionado.documento).tipo,
            currentPlace = "workspace",
            originPlace = "inputs",
            cliente = workspace.expedienteseleccionado.cliente,
            itemstatus = "escogido",
            escriturapublica = escrituraPublica
        };
        workspace.UpdateDocRegistrado(itemEscogido);
        workspace.UpdateTools("Buscar protocolo notarial");
        await Task.FromResult(0);
    }

    private void VisualizarOtorgantes(List<Otorgante> otorgantes)
    {
        dialogootorgantes = true;
        listaotorgantes = otorgantes;
    }
    private void VisualizarContratos(List<Contrato> contratos)
    {
        dialogocontrato = true;
        listacontratos = contratos;
    }

    public async Task BuscarEscriturasPublicas()
    {
        var queryoriginados = GenerarQuery();
        //navigationManager.NavigateTo(navigationManager.Uri + "?" + queryoriginados);
        await ConsultarEscriturasPublicasFiltros(queryoriginados);
    }

    public async Task ConsultarEscriturasPublicasFiltros(String queryoriginados)
    {
        var responseHttp = await repositorio.Get<List<EscrituraPublicaRDTO>>("api/EscriturasPublicas/filterespecial?" + queryoriginados);
        listaEscriturasPublicas = responseHttp.Response;
        paginastotales = int.Parse(responseHttp.HttpResponseMessage.Headers.GetValues("totalPaginas").FirstOrDefault());
    }

    public void ValidacionFiltros()
    {
        swalFireMessage.errorMessage("Debe ingresar los filtros correctamente");
    }

    public string GenerarQuery()
    {
        if (diccionariostrings == null)
        {
            diccionariostrings = new Dictionary<string, string>();
        }
        diccionariostrings["direccionoficionotarial"] = parametrosFiltros.direccionoficionotarial;
        diccionariostrings["nombrenotario"] = parametrosFiltros.nombrenotario;
        diccionariostrings["actojuridico"] = parametrosFiltros.actojuridico;
        diccionariostrings["pagina"] = paginaactual.ToString();
        string primerJoin = string.Join("&",
            diccionariostrings
                 .Select(x => $"{x.Key}={System.Web.HttpUtility.UrlEncode(x.Value)}").ToArray());
        string segundoJoin = string.Join("&",
            parametrosFiltros.nombreotorgantes
                  .Select(x => $"nombreotorgantes={System.Web.HttpUtility.UrlEncode(x.nombre)}").ToArray());

        return primerJoin + "&" + segundoJoin;
    }

    void KeyUp(ChangeEventArgs e, string membername, object val)
    {
        var property = val.GetType().GetProperty(membername);
        property.SetValue(val, e.Value.ToString());
        var fi = new FieldIdentifier(val, membername);
        _editContext.NotifyFieldChanged(fi);
    }



}
