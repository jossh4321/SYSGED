@inject IDocumentRepository documentRepository
@inject IRepository repository
@layout MainLayout
@inject NavigationManager navigationManager
@inject HttpClient Http
@inject IJSRuntime js
@inject ISwalFireMessage swalfire
@using SISGED.Client.Pages.Samples.WorkEnvironment
@using SISGED.Client.Pages.Documentos.DocumentosGenerados
@using Newtonsoft.Json;

<style>
	.container-c {
		display: inline-flex;
		flex-wrap: wrap;
		flex-direction: column;
		margin: 10px auto;
	}

	tr.mdc-table-header-row {
		background-color: #1a1a1a !important;
	}

	.table-header {
		color: white;
		font-family: sans-serif;
		font-size: 15px;
		display: inline-block
	}

	tbody {
		background-color: #4d4d4d !important;
	}

	.table-row {
		color: #ccc;
		font-family: sans-serif;
		font-size: 14px;
		display: inline-block
	}

	.mat-success-c {
		color: green !important;
		border: 1px solid green !important;
		border-radius: 15px !important;
		font-size: 13px !important;
		transition: all 300ms !important;
	}

	.mat-dark-c {
		color: black !important;
		border: 1px solid black !important;
		border-radius: 15px !important;
		font-size: 13px !important;
		transition: all 300ms !important;
	}
	/*#ffd11a*/
	.mat-warning-c {
		color: #3e3efc !important;
		border: 1px solid #3e3efc !important;
		border-radius: 15px !important;
		font-size: 13px !important;
		transition: all 300ms !important;
	}

	.mat-danger-c {
		color: #ff3333 !important;
		border: 1px solid #ff3333 !important;
		border-radius: 15px !important;
		font-size: 13px !important;
		transition: all 300ms !important;
	}

	.mat-info-c {
		color: #3f7cff !important;
		border: 1px solid #3f7cff !important;
		border-radius: 15px !important;
		font-size: 13px !important;
		transition: all 300ms !important;
	}

		.mat-success-c:hover, .mat-danger-c:hover, .mat-info-c:hover, .mat-warning-c:hover, .mat-dark-c:hover {
			background-color: none !important;
			transform: scale(1.07,1.07) !important;
		}

	.button-container {
		display: block;
		margin: 5px;
		flex-grow: 1;
	}

	.button-container-lvl {
		display: flex;
		flex-wrap: wrap;
		flex-direction: row;
	}

	.mdc-table td:last-child {
		width: unset !important;
	}

	.head-flex {
		display: flex;
		flex-wrap: wrap;
		justify-content: space-between;
		color: white
	}

	.pruebita {
		width: 300px;
		height: 200px;
		border: 1px solid black;
	}

	.loader-block {
		display: flex;
		margin-top: 20px !important;
		min-width: 800px;
		height: 300px;
		background-color: #4d4d4d;
		justify-content: center;
		justify-content: center;
		align-items: center;
	}
</style>

<div class="container-c" style=" width: auto;">
	@if (cargatabla == true)
	{
		<div class="loader-block">
			<div class="spinner-border" style="width: 7rem; height: 7rem;color:#ccc" role="status">
				<span class="sr-only">Loading...</span>
			</div>
		</div>
	}
	else
	{
		<MatTable Items="@listadocumentos" class="mat-elevation-z5" Style="width:auto">
			<MatTableHeader>
				<th>
					<span class="table-header">Código del documento</span>
				</th>
				<th>
					<span class="table-header">Fecha de regitro</span>
				</th>
				<th>
					<span class="table-header">Estado</span>
				</th>
				<th>
					<span class="table-header">Descripción</span>
				</th>
				<th>
					<span class="table-header">Opción</span>
				</th>
			</MatTableHeader>
			<MatTableRow>
				<td>
					<span class="table-row">@context.id</span>
				</td>
				<td>
					<span class="table-row">@context.fechacreacion</span>
				</td>
				<td>
					<span class="table-row">@context.estado</span>
				</td>
				<td>
					<span class="table-row">@context.tipo</span>
				</td>
				<td>
					<div class="button-container-lvl">
						<div class="button-container">
							<MatButton Icon="@MatBlazor.MatIconNames.Remove_red_eye"
									   Class="mat-warning-c" @onclick="@(e => Visualizar(context.id))" Style="width:100% !important">Ver Documento</MatButton>
						</div>
					</div>
				</td>
			</MatTableRow>
		</MatTable>
	}
	<MatDialog @bind-IsOpen="@Ver">
		<CascadingValue Value="this">
			<DetalleDocumento documentodto="documentodto" cerrarDialogo="cerrarDialogo" />
		</CascadingValue>
	</MatDialog>
</div>

@code {
	public List<Documento> listadocumentos = new List<Documento>();
	public DocumentoDTO documentodto = new DocumentoDTO();
	private bool Ver = false;
	public bool cargatabla { get; set; } = false;

	protected override async Task OnInitializedAsync()
	{
		cargatabla = true;
		var httpResponse = await repository.Get<List<Documento>>("api/documentos/tododoc");
		if (!httpResponse.Error)
		{
			listadocumentos = httpResponse.Response;
			listadocumentos.ForEach(x => Console.WriteLine(x.id));
		}
		else
		{
			Console.WriteLine("Ocurrio un error");
		}
		cargatabla = false;
	}

	public async Task Visualizar(string id)
	{
		Documento documento = new Documento();
		var httpResponse = await repository.Get<Documento>($"api/documentos/tododoc?tododoc={id}");
		if (httpResponse.Error)
		{
			Console.WriteLine("Algo Mal");
		}
		else
		{
			documento = httpResponse.Response;

		}
		documentodto.id = documento.id;
		documentodto.tipo = documento.tipo;
		documentodto.urlanexo = documento.urlanexo;
		documentodto.fechacreacion = documento.fechacreacion;
		documentodto.estado = documento.estado;
		Ver = true;
	}

	public void cerrarDialogo(bool cerrar) => Ver = cerrar;
}
