@inject IRepository repository
<style>
    .card-derivaciones {
        margin: 5px;
        /*border: 1px solid;*/
        transition: all 0.3s ease-out;
        padding: 10px;
        border-radius: 10px;
        box-shadow: 0 14px 26px rgba(0, 0, 0, 0.04);
        overflow: hidden;
        text-align: left;
    }
    .mdc-dialog {
        z-index: 1000 !important;
    }

    .demo-mat-card-content {
        /* padding: 1rem;*/
        margin: 0px;
        z-index: 100 !important;
    }

    .mdc-dialog__content {
        padding: 0 !important;
    }

    p {
        font-size: 12px;
    }
    b{
       color: black;
    }

    .grid-container {
        display: grid;
        grid-template-columns: auto auto;
    }
     .mar {
        padding: 10px;
    }
</style>

<hr />
<div class="card-derivaciones">                  
    <p>@derivacion.tipo</p>
    <p><b>Usuario:</b> @usuario.datos.nombre @usuario.datos.apellido</p>
    <p><b>Área destino:</b>@derivacion.areadestino</p>    
    <p><b>Área procedencia:</b> @derivacion.areaprocedencia</p>
    <p><b>Fecha derivación:</b> @derivacion.fechaderivacion</p>
</div>

@code {
    [Parameter]
    public Derivacion derivacion { get; set; }


    private Usuario usuario = new Usuario();
    private Rol rol = new Rol();
    private Rol rolPro = new Rol();
    private string usuarioEmisorId;

    protected async override Task OnInitializedAsync()
    {
        usuarioEmisorId = derivacion.usuarioemisor;
        await getUsuario();
        await getRol();
        await getRolPro();
    }
    public async Task getUsuario()
    {
        var responseHttp = await repository.Get<Usuario>($"api/usuarios/id?id={usuarioEmisorId}");
        if (responseHttp.Error)
        {

            Console.WriteLine("Ha ocurrido un error al traer usuario");
        }
        else
        {
            usuario = responseHttp.Response;
        }
    }

    public async Task getRol()
    {
        var responseHttp = await repository.Get<Rol>($"api/roles/id?id={derivacion.areadestino}");
        if (responseHttp.Error)
        {
            Console.WriteLine("Ha ocurrido un error al traer role.s");
        }
        else
        {

            rol = responseHttp.Response;
        }
    }

    public async Task getRolPro()
    {
        var responseHttp = await repository.Get<Rol>($"api/roles/id?id={derivacion.areaprocedencia}");
        if (responseHttp.Error)
        {
            Console.WriteLine("Ha ocurrido un error al traer role.s");
        }
        else
        {
            rolPro = responseHttp.Response;
        }
    }
}
