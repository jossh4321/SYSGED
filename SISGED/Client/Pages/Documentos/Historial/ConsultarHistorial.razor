@inject IRepository repository
@inject ISwalFireMessage swalfire
@using SISGED.Client.Pages.Samples.WorkEnvironment
@page "/historial" 
<style>
    p {
        display: block;
        color: black;
    }

    div {
        color: black;
    }
    .demo-mat-card {
        max-width: 250px;
    }
    .mdc-dialog__content{
        padding: 0 !important;
    }
    .demo-mat-card-content {
        padding: 1rem;
        margin: 0px;
    }

    .demo-mat-card-clean-margin {
        margin: 0px;
    }

    .demo-mat-card-text {
        color: black;
    }

    .demo-mat-card-text p, .demo-mat-card-text h5, .demo-mat-card-text h6 {
        text-align: left;
        font-weight: bolder;
        font-size: 15px;
        padding-left: 5px;
        color: black;
    }

    .demo-mat-card-text h5 {
        text-transform: capitalize;
        font-size: 19px !important;
        font-weight: normal;
    }

    .demo-mat-card-text button {
        display: flex;
        margin-bottom: 5px;
        margin-left: 5px;
    }

    .mat-color {
        color: skyblue;
    }

    .dialogo .mdc-dialog__surface {
        max-width: 800px !important;
    }

    .row-datos {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        justify-content: space-around;
    }

    .col-datos-6 {
        flex-grow: 1;
        margin-right: 10px;
        margin-bottom: 10px;
        flex-basis: calc((100%/2) - 10px);
    }

    .col-datos-6 div {
        border-radius: 5px;
    }

    .mbottom-5 {
        margin-bottom: 5px;
    }

    /*.pbottom-5 {
        padding-bottom: 5px;
    }

    .mtop-5 {
        margin-top: 5px;
    }*/
/*
    .limegreen {
        background-color: limegreen !important;
    }*/

    .col-datos-12 {
        flex-basis: 100%;
    }

    .row-perfil {
        display: flex;
        flex-direction: column;
        flex-wrap: wrap;
    }
    .card-derivaciones {
        margin: 5px;
        /*border: 1px solid;*/
        transition: all 0.3s ease-out;
        padding: 10px;
        border-radius: 10px;
        box-shadow: 0 14px 26px rgba(0, 0, 0, 0.04);
        overflow: hidden;
    }
</style>
@if (carga == false)
{
    <LoaderContent accion="Consultar historial documentario"></LoaderContent>
}
else
{
    <div class="mat-layout-grid">
        <div class="mat-layout-grid-inner">
            @foreach (ExpedienteDTO2 expediente in expedientes)
            {
                <div class="mat-layout-grid-cell-span-4">
                    <ExpedientesLista expediente="expediente" @key="expediente.id" listarDocumentos="VisualizarDocumentos" listarDerivaciones="VisualizarDerivaciones">
                    </ExpedientesLista>
                </div>
            }
        </div>
    </div>

    <MatDialog @bind-IsOpen="dialogoDocumentos" Class="dialogo">
        <MatDialogTitle>Documentos - @expediente.tipo</MatDialogTitle>
        <MatDialogContent>
            @if (expediente.documentos == null)
            {
                <LoaderContent accion="Documentos"></LoaderContent>
            }
            else
            {
                <div class="mat-layout-grid">
                    <div class="mat-layout-grid-inner">
                        @foreach (DocumentoExpediente documento in expediente.documentos)
                        {
                            <div class="mat-layout-grid-cell-span-4">
                                <DocumentosLista documento="documento" @key="documento.iddocumento"></DocumentosLista>
                            </div>
                        }
                    </div>
                </div>
            }

        </MatDialogContent>
        <MatDialogActions>
            <MatButton Icon="@MatIconNames.Arrow_left" @onclick="@((e) => { dialogoDocumentos = false; })">Volver</MatButton>
        </MatDialogActions>
    </MatDialog>

    <MatDialog @bind-IsOpen="dialogoderivaciones" Class="dialogo">
        <MatDialogTitle>Derivaciones </MatDialogTitle>
        <MatDialogContent>
            @if (listaderivaciones.Count == 0)
            {
                <div class="card-derivaciones">
                    <p>El expediente no cuenta con historial de derivaciones</p>
                </div>
            }
            else
            {

                foreach (var derivacion in listaderivaciones)
                {
                    <hr />
                    <div class="card-derivaciones">
                        <p>@derivacion.tipo</p>
                        <p>Usuario: @derivacion.usuarioemisor</p>
                        <p>Área destino: @derivacion.areadestino</p>
                        <p>Área procedencia: @derivacion.areaprocedencia</p>
                        <p>Fecha derivación: @derivacion.fechaderivacion</p>
                    </div>
                }
            }
            </MatDialogContent>
        <MatDialogActions>
            <MatButton Icon="@MatIconNames.Arrow_left" @onclick="@((e) => { dialogoderivaciones = false; })">Volver</MatButton>
        </MatDialogActions>
    </MatDialog>
}

@code {
    public bool dialogoDocumentos = false;
    public bool dialogoderivaciones = false;
    bool carga;
    public List<ExpedienteDTO2> expedientes = new List<ExpedienteDTO2>();
    private List<ExpedienteDTO2> listaexpedientesdto = new List<ExpedienteDTO2>();
    private List<Derivacion> listaderivaciones = new List<Derivacion>();
    public List<Proceso> listaHistorialProceso { get; set; }
    public ExpedienteDTO2 expediente = new ExpedienteDTO2();
    public Derivacion derivacion = new Derivacion();
    public List<Documento> docu = new List<Documento>();   
    protected async override Task OnInitializedAsync()
    {

        await getExpedientes();
    }
   

    #region getsRegion
    public async Task getExpedientes()
    {

        var httpResponse = await repository.Get<List<ExpedienteDTO2>>("api/expediente");
        if (httpResponse.Error)
        {
            carga = false;
            Console.WriteLine("Ha ocurrido un error al traer expedientes");
        }
        else
        {
            carga = true;
            expedientes = httpResponse.Response;           
        }
    }

    public void VisualizarDocumentos(ExpedienteDTO2 expediente)
    {
        dialogoDocumentos = true;
        this.expediente = expediente;
    }

    public void VisualizarDerivaciones(List<Derivacion> derivaciones)
    {
        dialogoderivaciones = true;
        listaderivaciones = derivaciones;
        dialogoderivaciones = true;

    }

    public void verHistorialProceso(List<Proceso> procesos)
    {
        dialogoDocumentos = true;
        this.listaHistorialProceso = procesos;
    }
    #endregion


}


