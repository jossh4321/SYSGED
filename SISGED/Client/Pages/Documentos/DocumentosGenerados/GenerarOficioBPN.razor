@inject IJSRuntime js
@inject IRepository repositorio
@inject ISwalFireMessage swalfire
@using SISGED.Client.Pages.Samples.WorkEnvironment
@using Newtonsoft.Json;

<style>
    * {
        color: black;
    }

    .contenedor-PDF {
        height: 400px;
        width: 600px;
    }

    .mat-success-c {
        color: green !important;
        border: 1px solid green !important;
        border-radius: 15px !important;
        font-size: 13px !important;
        transition: all 300ms !important;
        width: 100%;
    }

    .dialogo .mdc-dialog__surface {
        max-width: none !important;
        height: 800px !important;
    }
</style>
<MatButton Disabled="@faltaCargar" OnClick="@GenerarPDF" Class="mat-success-c"> Generar Documento</MatButton>

<MatDialog @bind-IsOpen="@generado" Class="dialogo">
    <MatDialogTitle>Previsualizar Documento</MatDialogTitle>
    <MatDialogContent Class="contenedor-PDF">
        <iframe id="docpdf" style="background-color:#EEE; height:650px; width:500px"></iframe>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton @onclick="@(()=>ConfirmacionGenerar())">Generar</MatButton>
        <MatButton @onclick="@((e) => { generado = false; })">Volver</MatButton>
    </MatDialogActions>
</MatDialog>
<div style="display: none">
    <table id="convertirPDF">
        <tbody>
            <tr>
                <th colspan="7">@documento.titulo</th>
            </tr>
            <tr><td colspan="7"> </td></tr>
            <tr><td colspan="7">Código de generación: @codigo</td></tr>
            <tr><td colspan="7">Descripción: </td></tr>
            <tr><td colspan="7">@documento.descripcion</td></tr>
            <tr><td colspan="7">Fecha de realización: @documento.fecharealizacion.ToString("dd-MM-yy")</td></tr>
            <tr><td colspan="7">Datos del Cliente: </td></tr>
            <tr><td></td><td>- Nombre: @usuario.datos.nombre</td><td></td><td></td><td></td><td></td><td></td></tr>
            <tr><td></td><td>- Apellidos: @usuario.datos.apellido</td><td></td><td></td><td></td><td></td><td></td></tr>
            <tr><td></td><td>- Tipo de documento: @usuario.datos.tipodocumento</td><td></td><td></td><td></td><td></td><td></td></tr>
            <tr><td></td><td>- Número de documento: @usuario.datos.numerodocumento</td><td></td><td></td><td></td><td></td><td></td></tr>
            <tr><td colspan="7">Datos del notario: </td></tr>
            <tr><td></td><td>- Nombre: @notario.nombre</td><td></td><td></td><td></td><td></td><td></td></tr>
            <tr><td></td><td>- Apellidos: @notario.apellido</td><td></td><td></td><td></td><td></td><td></td></tr>
            <tr><td></td><td>- DNI: @notario.dni</td><td></td><td></td><td></td><td></td><td></td></tr>
            <tr><td colspan="7">Dirección de oficio: </td></tr>
            <tr><td colspan="7">@documento.direccionoficio </td></tr>
            <tr><td colspan="7">Acto juridico: @documento.actojuridico </td></tr>
            <tr><td colspan="7">Tipo de protocolo: @documento.tipoprotocolo</td></tr>
            <tr><td colspan="7"> Otorgantes: </td></tr>
            @foreach (string i in documento.otorgantes)
            {
                <tr><td></td><td>- @i </td><td></td><td></td><td></td><td></td><td></td></tr>
            }
        </tbody>
    </table>
</div>

@code {
    [CascadingParameter] WorkEnvironment workspace { get; set; }
    [CascadingParameter(Name = "imagen")] string imagen { get; set; }
    [CascadingParameter(Name = "codigo")] string codigo { get; set; }
    [CascadingParameter(Name = "SesionUsuario")] protected Sesion sesion { get; set; }
    private DocumentoGenerarDTO generarD { get; set; }
    private ContenidoOficioBPN documento { get; set; }
    private Usuario usuario;
    private Notario notario;
    private bool generado = false;
    private bool faltaCargar = true;

    private async Task Generar()
    {
        generado = true;
        await js.InvokeVoidAsync("gPDF", imagen);
    }
    private async Task GenerarPDF()
    {
        if (imagen == null)
        {
            await swalfire.errorMessage("Debe insertar la imagen de su firma");
        }
        else
        {
            await Generar();
        }
    }
    protected async override Task OnInitializedAsync()
    {

        documento = JsonConvert.DeserializeObject<ContenidoOficioBPN>(workspace.expedienteseleccionado.documento.contenido.ToString());
        Console.WriteLine(documento.ToString());
        usuario = new Usuario();
        notario = new Notario();
        await getUsuario();
        await getNotario();
        faltaCargar = false;
    }

    private async Task getUsuario()
    {
        var responseHttp = await repositorio.Get<Usuario>("api/usuarios/id?id="+documento.idcliente);
        usuario = responseHttp.Response;
    }
    private async Task getNotario()
    {
        var responseHttp = await repositorio.Get<Notario>($"api/notarios/id?id={documento.idnotario}");
        notario = responseHttp.Response;
    }

    private async Task ConfirmacionGenerar()
    {
        /*generarD.iddocumento = workspace.expedienteseleccionado.documento.id;
        generarD.idexpediente = workspace.expedienteseleccionado.idexpediente;
        generarD.idusuario = sesion.usuario.id;*/
        Console.WriteLine("Metodo: ConfirmacionGenerar");
        await ConfirmacionG();


    }
    private async Task ConfirmacionG()
    {
        Console.WriteLine("Metodo: ConfirmacionG");
        DocumentoGenerarDTO docs = new DocumentoGenerarDTO();
        docs.iddocumento = workspace.expedienteseleccionado.documento.id;
        docs.idexpediente = workspace.expedienteseleccionado.idexpediente;
        docs.idusuario = sesion.usuario.id;
        var responseHttp = await repositorio.Put<Documento, DocumentoGenerarDTO>("api/Documentos/generardocumento", docs);
        if (responseHttp.Error)
        {
            await swalfire.errorMessage("Error en el servidor, intentelo de nuevo");
        }
        else
        {
            await swalfire.successMessage("Generado correctamente");
            generado = false;
        }
    }
}

