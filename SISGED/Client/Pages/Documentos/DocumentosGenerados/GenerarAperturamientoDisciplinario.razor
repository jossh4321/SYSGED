@inject IJSRuntime js
@inject ISwalFireMessage swalfire
@using SISGED.Client.Pages.Samples.WorkEnvironment
@using Newtonsoft.Json
@inject IRepository repositorio

    <style>
        * {
            color: black;
        }

        .contenedor-PDF {
            height: 400px;
            width: 600px;
        }

        .mat-success-c {
            color: green !important;
            border: 1px solid green !important;
            border-radius: 15px !important;
            font-size: 13px !important;
            transition: all 300ms !important;
            width: 100%;
        }

        .dialogo .mdc-dialog__surface {
            max-width: none !important;
            height: 800px !important;
        }
    </style>
    <MatButton Disabled="@faltaCargar" OnClick="@GenerarPDF" Class="mat-success-c"> Generar Documento</MatButton>
    <MatDialog @bind-IsOpen="@generado" Class="dialogo">
        <MatDialogTitle>Previsualizar Documento</MatDialogTitle>
        <MatDialogContent Class="contenedor-PDF">
            <iframe id="docpdf" style="background-color:#EEE; height:650px; width:500px"></iframe>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton @onclick="@ConfirmacionGenerar">Generar</MatButton>
            <MatButton @onclick="@((e) => { generado = false; })">Volver</MatButton>
        </MatDialogActions>
    </MatDialog>
    <div style="display: none">
        <table id="convertirPDF">
            <tbody>
                <tr>
                    <th colspan="7">@documento.titulo</th>
                </tr>
                <tr><td colspan="7"> </td></tr>
                <tr><td colspan="7">Código de generación: @codigo</td></tr>
                <tr><td colspan="7">Nombre del denunciante: @documento.nombredenunciante </td></tr>
                <tr><td colspan="7">Descripción: </td></tr>
                <tr><td colspan="7">@documento.descripcion</td></tr>
                <tr><td colspan="7">Datos del fiscal: </td></tr>
                <tr><td></td><td>- Nombre: @usuario.datos.nombre</td><td></td><td></td><td></td><td></td><td></td></tr>
                <tr><td></td><td>- Apellidos: @usuario.datos.apellido</td><td></td><td></td><td></td><td></td><td></td></tr>
                <tr><td></td><td>- Tipo de documento: @usuario.datos.tipodocumento</td><td></td><td></td><td></td><td></td><td></td></tr>
                <tr><td></td><td>- Número de documento: @usuario.datos.numerodocumento</td><td></td><td></td><td></td><td></td><td></td></tr>
                <tr><td colspan="7">Lugar de audiencia: </td></tr>
                <tr><td colspan="7"> @documento.lugaraudiencia </td></tr>
                <tr><td colspan="7">Datos del notario: </td></tr>
                <tr><td></td><td>- Nombre: @notario.nombre</td><td></td><td></td><td></td><td></td><td></td></tr>
                <tr><td></td><td>- Apellidos: @notario.apellido</td><td></td><td></td><td></td><td></td><td></td></tr>
                <tr><td></td><td>- DNI: @notario.dni</td><td></td><td></td><td></td><td></td><td></td></tr>
                <tr><td colspan="7">Fecha de audiencia: </td></tr>
                <tr><td></td><td>- Inicio: @documento.fechainicioaudiencia.ToString("dd-MM-yy")</td><td></td><td></td><td></td><td></td><td></td></tr>
                <tr><td></td><td>- Fin: @documento.fechafinaudiencia.ToString("dd-MM-yy")</td><td></td><td></td><td></td><td></td><td></td></tr>
                <tr><td colspan="7">Participantes: </td></tr>
                @foreach (string i in documento.participantes)
                {
                    <tr><td></td><td>- @i</td><td></td><td></td><td></td><td></td><td></td></tr>
                }
                <tr><td colspan="7">Hechos imputados: </td></tr>
                @foreach (string i in documento.hechosimputados)
                {
                    <tr><td></td><td>- @i</td><td></td><td></td><td></td><td></td><td></td></tr>
                }

            </tbody>
        </table>
    </div>
@code {
    [CascadingParameter] WorkEnvironment workspace { get; set; }
    [CascadingParameter(Name = "imagen")] string imagen { get; set; }
    [CascadingParameter(Name = "codigo")] string codigo { get; set; }
    private ContenidoAperturamientoDisciplinario documento { get; set; }
    private Usuario usuario;
    private Notario notario;
    private bool generado = false;
    private bool faltaCargar = true;
    [CascadingParameter(Name = "SesionUsuario")] protected Sesion sesion { get; set; }
    private DocumentoGenerarDTO generarD { get; set; }

    private async Task Generar()
    {
        generado = true;
        await js.InvokeVoidAsync("gPDF", imagen);
    }
    private async Task GenerarPDF()
    {
        if (imagen == null)
        {
            await swalfire.errorMessage("Debe insertar la imagen de su firma");
        }
        else
        {
            await Generar();
        }
    }

    protected async override Task OnInitializedAsync()
    {
        Console.WriteLine(workspace.expedienteseleccionado.documento.contenido.ToString());
        documento = JsonConvert.DeserializeObject<ContenidoAperturamientoDisciplinario>(workspace.expedienteseleccionado.documento.contenido.ToString());
        usuario = new Usuario();
        notario = new Notario();
        await getUsuario();
        faltaCargar = false;

    }

    private async Task getUsuario()
    {
        var responseHttp = await repositorio.Get<Usuario>($"api/usuarios/id?id={documento.idfiscal}");
        usuario = responseHttp.Response;
    }
    private async Task getNotario()
    {
        var responseHttp = await repositorio.Get<Notario>($"api/notarios/id?id={documento.idnotario}");
        notario = responseHttp.Response;
    }

    private async Task ConfirmacionGenerar()
    {
        generarD.iddocumento = workspace.expedienteseleccionado.documento.id;
        generarD.idexpediente = workspace.expedienteseleccionado.idexpediente;
        generarD.idusuario = sesion.usuario.id;
        await ConfirmacionG();

    }
    private async Task ConfirmacionG()
    {
        var responseHttp = await repositorio.Put<Documento, DocumentoGenerarDTO>("api/Documentos/generardocumento", generarD);
        if (responseHttp.Error)
        {
            await swalfire.errorMessage("Error en el servidor, intentelo de nuevo");
        }
        else
        {
            await swalfire.successMessage("Generado correctamente");
            generado = false;
        }
    }
}
