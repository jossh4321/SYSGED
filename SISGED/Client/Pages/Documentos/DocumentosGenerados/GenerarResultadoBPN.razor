@inject IJSRuntime js
@inject ISwalFireMessage swalfire
@using SISGED.Client.Pages.Samples.WorkEnvironment
@using Newtonsoft.Json
@inject IRepository repositorio

    <style>
        * {
            color: black;
        }

        .contenedor-PDF {
            height: 400px;
            width: 600px;
        }

        .mat-success-c {
            color: green !important;
            border: 1px solid green !important;
            border-radius: 15px !important;
            font-size: 13px !important;
            transition: all 300ms !important;
            width: 100%;
        }

        .dialogo .mdc-dialog__surface {
            max-width: none !important;
            height: 800px !important;
        }
    </style>
    <MatButton Disabled="@faltaCargar" OnClick="@GenerarPDF" Class="mat-success-c"> Generar Documento</MatButton>
    <MatDialog @bind-IsOpen="@generado" Class="dialogo">
        <MatDialogTitle>Previsualizar Documento</MatDialogTitle>
        <MatDialogContent Class="contenedor-PDF">
            <iframe id="docpdf" style="background-color:#EEE; height:650px; width:500px"></iframe>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton @onclick="@((e) => { generado = false; })">Volver</MatButton>
        </MatDialogActions>
    </MatDialog>

@code {
    [CascadingParameter] WorkEnvironment workspace { get; set; }
    [CascadingParameter(Name = "imagen")] string imagen { get; set; }
    private ContenidoResultadoBPN documento { get; set; }
    private EscrituraPublica escrituraPublica;
    private Notario notario;
    private bool generado = false;
    private bool faltaCargar = true;

    private async Task Generar()
    {
        generado = true;
        await js.InvokeVoidAsync("gPDF", imagen);
    }
    private async Task GenerarPDF()
    {
        if (imagen == null)
        {
            await swalfire.errorMessage("Debe insertar la imagen de su firma");
        }
        else
        {
            await Generar();
        }
    }

    protected async override Task OnInitializedAsync()
    {
        documento = JsonConvert.DeserializeObject<ContenidoResultadoBPN>(workspace.expedienteseleccionado.documento.contenido.ToString());
        escrituraPublica = new EscrituraPublica();
        notario = new Notario();
        await getEscritura();
        await getNotario();
        faltaCargar = false;
    }

    private async Task getEscritura()
    {
        var responseHttp = await repositorio.Get<EscrituraPublica>($"api/escrituraspublicas/id?id={documento.idescriturapublica}");
        escrituraPublica = responseHttp.Response;
    }
    private async Task getNotario()
    {
        var responseHttp = await repositorio.Get<Notario>($"api/notarios/id?id={escrituraPublica.idnotario}");
        notario = responseHttp.Response;
    }
}
