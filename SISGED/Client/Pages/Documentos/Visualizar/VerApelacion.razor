@inject IRepository repository
@inject ISwalFireMessage swalfire
@using Blazored.Typeahead
@using SISGED.Client.Pages.Samples.WorkEnvironment
@using Newtonsoft.Json;
<style>

    .modal-info-designacion-notario {
        display: flex;
        flex-direction: column;
        /*height: 700px;*/
        width: 500px;
        background-color: #808080;
    }

    .div-form {
        background-color: #a6a6a6;
        flex-basis: 100%;
        border-radius: 5px 5px 0px 0px;
        width: 100%;
    }

    .field-container {
        display: block;
        padding: 10px;
    }

    .text-field-style {
        display: block !important;
    }
    /*validacion*/
    .validation-message {
        display: inline;
    }

    div.invalid .correcto {
        display: none;
    }

    div.valid .incorrecto,
    div.valid:not(.modified) .correcto {
        display: none;
    }

    .correcto {
        color: green !important;
        font-family: sans-serif;
        font-size: 15px;
        display: flex;
        height: 18px;
    }

    .incorrecto {
        color: red !important;
        font-family: sans-serif;
        font-size: 15px;
        display: flex;
        height: 18px;
    }

    i.val-icon {
        font-size: 20px;
    }

    .good-msg, div.correcto i.good-icon {
        color: green !important;
    }

    div.incorrecto i.bad-icon {
        color: red !important;
    }
    .links {
        text-decoration: none;
        padding-top: 10px;
        padding-bottom: 10px;
        background-color: white;
        color: black;
        cursor: pointer;
    }

        .links:hover {
            text-decoration: none;
            color: white;
            background: #6200ee;
        }
</style>

<div class="div-form">
    @if (firstLoad == true)
    {
        <div class="loader-block">
            <div class="spinner-border spin" style="        width: 7rem;
        height: 7rem;
        color: #ccc" role="status">
                <span class="sr-only">Loading...</span>
            </div>

            <span style="color:white">CARGANDO...</span>
        </div>
    }
    else
    {

        <div class=".modal-info-designacion-notario">
            <MatTabGroup>
                <MatTab Label="Datos de la Apelación">

                    <div class="field-container input-group-2">
                        <MatTextField @bind-Value="@contenido.titulo" ReadOnly="true" Class="text-field-style" Label="Titulo de la Apelación"></MatTextField>
                    </div>

                    <div class="field-container input-group-2">
                        <MatTextField @bind-Value="@contenido.descripcion" Class="text-field-style" ReadOnly="true" Label="Descripción de la apelación"></MatTextField>
                    </div>

                </MatTab>
                <MatTab Label="Anexos" Style="text-align: center;">
                    @if (documento.urlanexo.Count > 0)
                    {
                        <div style="display:grid;">
                            <br />
                            @for (int a = 1; a < documento.urlanexo.Count + 1; a++)
                            {
                                string textito = "Anexo " + a + " de la apelacion.pdf";
                                <a class="links" href="@documento.urlanexo[a-1]" download="@textito" target="_blank">Descargar Anexo @a</a>
                                <br />
                            }
                        </div>
                    }
                    else
                    {
                        <p>No hay anexos para este documento</p>
                    }
                </MatTab>
            </MatTabGroup>
        </div>
    }
</div>

@code {
    private string imagenTemporal;
    private List<string> imagenTemporal2 = new List<string>();
    List<string> nombres = new List<string>();
    private bool firstLoad = true;
    ContenidoApelacion contenido = new ContenidoApelacion();
    [Parameter] public DocumentoDTO documento { get; set; }



    protected override async Task OnInitializedAsync()
    {
        firstLoad = true;
        /*
        contenido.Urlanexo = new List<string>();
        foreach (string u in contenido.Urlanexo)
        {
            if (!string.IsNullOrWhiteSpace(u))
            {
                imagenTemporal2.Add(u);
            }
        }
        contenido.Urlanexo.Clear();
        if (!string.IsNullOrEmpty(contenido.data))
        {
            imagenTemporal = contenido.data;
            contenido.data = null;
        }
        */
        contenido = JsonConvert.DeserializeObject<ContenidoApelacion>(documento.contenido.ToString());
        firstLoad = false;
    }

    /*
    private void ImagenSeleccionada(string imagenbase64)
    {
        contenido.data = imagenbase64;
    }

    private void ImagenSeleccionada2(string imagenbase64)
    {
        contenido.Urlanexo.Add(imagenbase64);
    }
    */

    private void FileName(string imagenbase64)
    {
        nombres.Add(imagenbase64);
    }


}

