@using Newtonsoft.Json;
@inject IRepository repository
<style>

    .field-container {
        display: block;
        padding: 10px;
    }

    .modal-info-designacion-notario {
        display: flex;
        flex-direction: column;
        /*height: 700px;*/
        width: 500px;
        background-color: #808080;
    }

    .text-field-style {
        display: block !important;
    }

    .mat-info-c {
        color: #3333ff !important;
        border: 1px solid #3333ff !important;
        border-radius: 15px !important;
        font-size: 13px !important;
        transition: all 300ms !important;
    }

    .otorgantes {
        border: 1px solid #ccc;
        background: #f2f2f2;
        display: flex;
        margin: 7px 10px;
        align-items: center;
        flex-direction: column;
        border-radius: 5px 5px 0px 0px;
        border-bottom: 1px solid black;
    }

    .title-ot {
        font-size: 16px;
        margin-bottom: 0px;
        margin-top: 5px;
        color: #595959;
    }
</style>
<div class="div-form">
    @if (firstLoad == true)
    {
        <div class="loader-block">
            <div class="spinner-border spin" style="        width: 7rem;
        height: 7rem;
        color: #ccc" role="status">
                <span class="sr-only">Loading...</span>
            </div>

            <span style="color:white">CARGANDO...</span>
        </div>
    }
    else if (nohayEvaluacion)
    {
        <div class=".modal-info-designacion-notario">
            <MatTabGroup>
                <MatTab Label="Evaluacion">
                    <div class="field-container input-group-2">
                        <h4>Aún no se ha realizado una evaluación a este documento</h4>
                    </div>
                </MatTab>

            </MatTabGroup>
        </div>
    }
    else
    {

        <div class=".modal-info-designacion-notario">
            <MatTabGroup>
                <MatTab Label="Evaluacion">
                    <div class="field-container input-group-2">
                        <h4>Participantes</h4>
                    </div>
                    <div class="field-container input-group-2">
                        <MatTextField @bind-Value="@participante.nombreYApe" ReadOnly="true" Class="text-field-style" Label="Nombre y Apellidos"></MatTextField>
                    </div>
                    <div class="field-container input-group-2">
                        <MatTextField @bind-Value="@participante.numerodocumento" ReadOnly="true" Class="text-field-style" Label="DNI"></MatTextField>
                    </div>
                    <div class="field-container input-group-2">
                        <MatTextField @bind-Value="@participante.status" ReadOnly="true" Class="text-field-style" Label="Estado"></MatTextField>
                    </div>
                    <div class="field-container input-group-2">
                        <MatTextField @bind-Value="@participante.descripcion" ReadOnly="true" Class="text-field-style" Label="Descripción"></MatTextField>
                    </div>
                    <div class="field-container input-group-2">
                        <PaginationBootstrap currentPage="paginaactual" totalPages="paginastotales()" radio="2" selectedPage="paginaSeleccionada"></PaginationBootstrap>
                    </div>
                    <div class="field-container input-group-2">
                        <MatTextField @bind-Value="@evaluacion.resultado" ReadOnly="true" Class="text-field-style" Label="Resultado de la Evaluacion"></MatTextField>
                    </div>
                </MatTab>

            </MatTabGroup>
        </div>
    }
</div>

@code {
    private bool firstLoad = true;
    private bool nohayEvaluacion = false;
    public int paginaactual = 1;
    Evaluacion evaluacion = new Evaluacion();
    List<EvaluacionDTO> participantes = new List<EvaluacionDTO>();
    EvaluacionDTO participante = new EvaluacionDTO();
    Usuario usuario = new Usuario();
    [Parameter] public DocumentoDTO documento { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (documento.evaluacion == null)
        {
            firstLoad = false;
            nohayEvaluacion = true;
        }
        else
        {
            evaluacion = JsonConvert.DeserializeObject<Evaluacion>(documento.evaluacion.ToString());
            if (!(evaluacion.resultado.Equals("pendiente") || evaluacion.evaluaciones == null || evaluacion.evaluaciones.Count == 0))
            {
                foreach (EvaluacionIndividual eva in evaluacion.evaluaciones)
                {
                    EvaluacionDTO parti = new EvaluacionDTO();
                    await getUsuario(eva.idparticipante);
                    parti.nombreYApe = usuario.datos.nombre + " " + usuario.datos.apellido;
                    parti.numerodocumento = usuario.datos.numerodocumento;
                    parti.status = eva.status;
                    parti.descripcion = eva.descripcion;
                    participantes.Add(parti);
                }
                paginaSeleccionada(1);
                firstLoad = false;
            }
            else
            {
                firstLoad = false;
                nohayEvaluacion = true;
            }
        }
    }
    private async Task getUsuario(string idusuario)
    {
        var responseHttp = await repository.Get<Usuario>($"api/usuarios/id?id={idusuario}");
        usuario = responseHttp.Response;
    }

    public void paginaSeleccionada(int pagina)
    {
        paginaactual = pagina;
        participante = new EvaluacionDTO();
        for (int i = 0; i < participantes.Count; i++)
        {
            if (i >= paginaactual - 1 && i < paginaactual)
            {
                participante = participantes.ElementAt(paginaactual - 1);
            }
        }
    }
    public int paginastotales()
    {
        return participantes.Count;
    }
}
