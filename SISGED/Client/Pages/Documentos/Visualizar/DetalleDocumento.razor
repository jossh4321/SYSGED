@inject IRepository repository
<style>
	.card-content-padding {
		padding: 15px;
		width: 400px;
	}

	.field-container {
		display: block;
		padding: 10px;
	}

	.text-field-style {
		display: block !important;
	}

	.button-input-style {
		display: block !important;
	}
	/*Validation*/
	.validation-message {
		display: inline;
	}

	div.invalid .correcto {
		display: none;
	}

	div.valid .incorrecto,
	div.valid:not(.modified) .correcto {
		display: none;
	}

	.correcto {
		color: green;
		font-family: sans-serif;
		font-size: 15px;
		display: flex;
		height: 18px;
	}

	.incorrecto {
		color: red;
		font-family: sans-serif;
		font-size: 15px;
		display: flex;
		height: 18px;
	}

	i.val-icon {
		font-size: 20px;
	}

	.sub-but {
		display: block !important;
		width: 100%;
	}

	.loader-container {
		display: flex;
		flex-direction: row;
		flex-wrap: wrap;
		justify-content: space-around
	}

	div.disabled-field input {
		text-decoration: none !important;
		color: black !important;
		border-bottom-color: black !important;
		background-color: #eee !important;
	}
</style>
<MatCard>
	<MatCardContent Class="card-content-padding">


		@if (carga == false)
		{

			<div class="spinner-border" style="width: 3rem; height: 3rem;" role="status">
				<span class="sr-only">Loading...</span>
			</div>
			<div class="spinner-border" style="width: 3rem; height: 3rem;" role="status">
				<span class="sr-only">Loading...</span>
			</div>
			<div class="spinner-border" style="width: 3rem; height: 3rem;" role="status">
				<span class="sr-only">Loading...</span>
			</div>

		}
		else
		{
			<MatHeadline6 Style="text-align:center">
				Detalle del Documento
			</MatHeadline6>

			<EditForm EditContext="@_editContext" Context="CurrentEditContext"
					  OnValidSubmit="handleValidSubmit" OnInvalidSubmit="handleInvalidSubmit">
				<FluentValidator></FluentValidator>
				<MatTabGroup>
					<MatTab Label="Datos">
						<div class="field-container input-group-2 @CurrentEditContext.FieldCssClass( () => documentodto.id)">
							<MatTextField @bind-Value="@documentodto.id" Class="text-field-style disabled-field" Label="Código del Documento"
										  Disabled="true"></MatTextField>

							<div class="incorrecto">
								<MatIcon Icon="@MatIconNames.Error" Class="val-icon"></MatIcon>
								<ValidationMessage For="@(() => documentodto.id)" />
							</div>
							<div class="correcto">
								<MatIcon Icon="@MatIconNames.Check" Class="val-icon"></MatIcon>
								<span>Correcto</span>
							</div>
						</div>

						<div class="field-container input-group-2 @CurrentEditContext.FieldCssClass( () => documentodto.tipo)">
							<MatTextField @bind-Value="@documentodto.tipo" Class="text-field-style disabled-field" Label="Descripción de Documento"
										  Disabled="true"></MatTextField>
							<div class="incorrecto">
								<MatIcon Icon="@MatIconNames.Error"></MatIcon>
								<ValidationMessage For="@(() => documentodto.tipo)" />
							</div>
							<div class="correcto">
								<MatIcon Icon="@MatIconNames.Check" Class="val-icon"></MatIcon>
								<span>Correcto</span>
							</div>
						</div>
						<div class="field-container input-group-2 @CurrentEditContext.FieldCssClass( () => documentodto.urlanexo)">
							<MatTextField @bind-Value="@documentodto.urlanexo" Class="text-field-style disabled-field" Label="Nombre del Cliente"
										  Disabled="true"></MatTextField>

							<div class="incorrecto">
								<MatIcon Icon="@MatIconNames.Error" Class="val-icon"></MatIcon>
								<ValidationMessage For="@(() => documentodto.urlanexo)" />
							</div>
							<div class="correcto">
								<MatIcon Icon="@MatIconNames.Check" Class="val-icon"></MatIcon>
								<span>Correcto</span>
							</div>
						</div>
						<div class="field-container input-group-2 @CurrentEditContext.FieldCssClass( () => documentodto.fechacreacion)">
							<MatDatePicker @bind-Value="@documentodto.fechacreacion" Format="MM/dd/yyyy" Class="text-field-style disabled-field" Label="Fecha de registro del Documento"
										   Disabled="true"></MatDatePicker>

							<div class="incorrecto">
								<MatIcon Icon="@MatIconNames.Error" Class="val-icon"></MatIcon>
								<ValidationMessage For="@(() => documentodto.fechacreacion)" />
							</div>
							<div class="correcto">
								<MatIcon Icon="@MatIconNames.Check" Class="val-icon"></MatIcon>
								<span>Correcto</span>
							</div>
						</div>
						<div class="field-container input-group-2 @CurrentEditContext.FieldCssClass( () => documentodto.estado)">
							<MatTextField @bind-Value="@documentodto.estado" Class="text-field-style disabled-field" Label="Estado del Documento"
										  Disabled="true"></MatTextField>

							<div class="incorrecto">
								<MatIcon Icon="@MatIconNames.Error" Class="val-icon"></MatIcon>
								<ValidationMessage For="@(() => documentodto.estado)" />
							</div>
							<div class="correcto">
								<MatIcon Icon="@MatIconNames.Check" Class="val-icon"></MatIcon>
								<span>Correcto</span>
							</div>
						</div>						
					</MatTab>
				</MatTabGroup>
			</EditForm>
		}
	</MatCardContent>
</MatCard>
@code{
	private List<Documento> listadocumento = new List<Documento>();
	private EditContext _editContext;
	private bool carga = true;
	[Parameter] public DocumentoDTO documentodto { get; set; }
	[Parameter] public EventCallback<bool> cerrarDialogo { get; set; }

	protected override async Task OnInitializedAsync()
	{
		_editContext = new EditContext(documentodto);
		await getDocumentos();
	}
	public async Task Cerrar()
	{
		await cerrarDialogo.InvokeAsync(false);
		StateHasChanged();
	}

	public async Task getDocumentos()
	{
		var httpResponse = await repository.Get<List<Documento>>("api/documentos/tododoc");
		if (httpResponse.Error)
		{
			Console.WriteLine("Ha ocurrido un error al traer roles");
		}
		else
		{
			listadocumento = httpResponse.Response;
		}
	}
	public void handleValidSubmit()
	{


	}

	public void handleInvalidSubmit()
	{

	}


}
