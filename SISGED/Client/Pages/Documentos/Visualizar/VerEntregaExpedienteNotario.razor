@inject IRepository repository
@inject ISwalFireMessage swalfire
@using Blazored.Typeahead
@using SISGED.Client.Pages.Samples.WorkEnvironment
<style>
    .field-container {
        display: block;
        padding: 10px;
    }

    .modal-info-designacion-notario {
        display: flex;
        flex-direction: column;
        width: 500px;
        background-color: #808080;
    }

    .text-field-style {
        display: block !important;
    }

    .mat-info-c {
        color: #3333ff !important;
        border: 1px solid #3333ff !important;
        border-radius: 15px !important;
        font-size: 13px !important;
        transition: all 300ms !important;
    }

    .otorgantes {
        border: 1px solid #ccc;
        background: #f2f2f2;
        display: flex;
        margin: 7px 10px;
        align-items: center;
        flex-direction: column;
        border-radius: 5px 5px 0px 0px;
        border-bottom: 1px solid black;
    }

    .title-ot {
        font-size: 16px;
        margin-bottom: 0px;
        margin-top: 5px;
        color: #595959;
    }
</style>

<div class="div-form">
    @if (firstLoad == true)
    {
        <div class="loader-block">
            <div class="spinner-border spin" style="        width: 7rem;
        height: 7rem;
        color: #ccc" role="status">
                <span class="sr-only">Loading...</span>
            </div>

            <span style="color:white">CARGANDO...</span>
        </div>
    }
    else
    {
        <div class=".modal-info-designacion-notario">
            <MatTabGroup>
                <MatTab Label="Entrega Expediente Notario">
                    <div class="field-container input-group-2">
                        <MatTextField @bind-Value="@entregaExpNotario.contenidoDTO.titulo" Class="text-field-style"
                                      Label="Titulo de la entrega de expediente notario" ReadOnly="true"></MatTextField>
                    </div>

                    <div class="field-container input-group-2">
                        <MatTextField @bind-Value="@entregaExpNotario.contenidoDTO.descripcion" Class="text-field-style"
                                      Label="Descripcion de la entrega de expediente notario" ReadOnly="true"></MatTextField>
                    </div>

                    <div class="field-container input-group-2">
                        <BlazoredTypeahead SearchMethod="match" @bind-Value="@entregaExpNotario.contenidoDTO.idnotario"
                                           Placeholder="Nombre del Notario" ReadOnly="true">
                            <SelectedTemplate>
                                <strong>Notario: @context.nombre @context.apellido  -  N° DNI: @context.dni</strong>
                            </SelectedTemplate>
                            <ResultTemplate>
                                <strong>Notario: @context.nombre @context.apellido  -  N° DNI: @context.dni</strong>
                            </ResultTemplate>
                            <NotFoundTemplate>
                                <span style="color:red;font-size:20px">NO SE ENCONTRARON RESULTADOS</span>
                            </NotFoundTemplate>
                        </BlazoredTypeahead>
                    </div>
                </MatTab>
            </MatTabGroup>
        </div>
    }
</div>

@code {
    EntregaExpedienteNotarioDTO entregaExpNotario = new EntregaExpedienteNotarioDTO();
    [CascadingParameter] WorkEnvironment workspace { get; set; }
    [Parameter] public string iddocumento { get; set; }
    private bool firstLoad = true;
    protected override async Task OnInitializedAsync()
    {
        firstLoad = true;
        var httpResponse = await repository.Get<EntregaExpedienteNotarioDTO>($"api/documentos/obtenerdocumentoEEN?iddoc={workspace.expedienteseleccionado.documento.id}");
        if (!httpResponse.Error)
        {
            entregaExpNotario = (EntregaExpedienteNotarioDTO)httpResponse.Response;
            StateHasChanged();
        }
        else
        {
            Console.WriteLine("Algo Mal");
        }
        firstLoad = false;
    }
    private async Task<IEnumerable<Notario>> match(string searchtext)
    {
        var httpResponse = await repository.Get<List<Notario>>($"api/notarios/filter?term={searchtext}");
        if (httpResponse.Error)
        {
            return new List<Notario>();
        }
        else
        {
            return httpResponse.Response;
        }
    }
}
