@using System.IO
@inject IRepository repository
@inject ISwalFireMessage swalfire

<style>
    .div-form {
        background-color: #a6a6a6;
        flex-basis: 100%;
        border-radius: 5px 5px 0px 0px;
        width: 100%;
    }

    .field-container {
        display: block;
        padding: 10px;
    }

    .text-field-style {
        display: block !important;
    }
    /*validacion*/
    .validation-message {
        display: inline;
    }

    div.invalid .correcto {
        display: none;
    }

    div.valid .incorrecto,
    div.valid:not(.modified) .correcto {
        display: none;
    }

    .correcto {
        color: green !important;
        font-family: sans-serif;
        font-size: 15px;
        display: flex;
        height: 18px;
    }

    .incorrecto {
        color: red !important;
        font-family: sans-serif;
        font-size: 15px;
        display: flex;
        height: 18px;
    }

    i.val-icon {
        font-size: 20px;
    }

    .good-msg, div.correcto i.good-icon {
        color: green !important;
    }

    div.incorrecto i.bad-icon {
        color: red !important;
    }
</style>
<div class="div-form">
    <EditForm EditContext="@_editContext" Context="CurrentEditContext"
              OnValidSubmit="handleValidSubmit" OnInvalidSubmit="handleInvalidSubmit">
        <FluentValidator></FluentValidator>
        <MatTabGroup>
            <MatTab Label="Datos Generales">
                <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass( () => solicitudexpedicionfirma.nombrecliente)">
                    <MatTextField @bind-Value="@solicitudexpedicionfirma.nombrecliente" Class="text-field-style"
                                  Label="Nombre del cliente" @oninput='@(e => KeyUp(e,"nombrecliente",solicitudexpedicionfirma))'></MatTextField>
                    <div class="incorrecto">
                        <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                        <ValidationMessage For="@(() => solicitudexpedicionfirma.nombrecliente)" />
                    </div>
                    <div class="correcto">
                        <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                        <span class="good-msg">Correcto</span>
                    </div>
                </div>

                <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass( () => solicitudexpedicionfirma.tipodocumento)">
                    <InputSelect @bind-Value="@solicitudexpedicionfirma.tipodocumento" class="text-field-style">
                        <option value="">--Seleccione Algo--</option>
                        <option value="CE">Carnet de Extranjeria</option>
                        <option value="DNI">D.N.I.</option>
                        <option value="pasaporte">Pasaporte</option>
                    </InputSelect>
                    <div class="incorrecto">
                        <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                        <ValidationMessage For="@(() => solicitudexpedicionfirma.tipodocumento)" />
                    </div>
                    <div class="correcto">
                        <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                        <span class="good-msg">Correcto</span>
                    </div>
                </div>

                <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass( () => solicitudexpedicionfirma.numerodocumento)">
                    <MatTextField @bind-Value="@solicitudexpedicionfirma.numerodocumento" Class="text-field-style"
                                  Label="N° de documento" @oninput='@(e => KeyUp(e,"numerodocumento",solicitudexpedicionfirma))'></MatTextField>
                    <div class="incorrecto">
                        <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                        <ValidationMessage For="@(() => solicitudexpedicionfirma.numerodocumento)" />
                    </div>
                    <div class="correcto">
                        <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                        <span class="good-msg">Correcto</span>
                    </div>
                </div>

                <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass( () => solicitudexpedicionfirma.contenidoDTO.codigo)">
                    <MatTextField @bind-Value="@solicitudexpedicionfirma.contenidoDTO.codigo" Class="text-field-style" Label="Código de solicitudexpedicionfirma"
                                  @oninput='@(e => KeyUp(e,"codigo",solicitudexpedicionfirma.contenidoDTO))'></MatTextField>

                    <div class="incorrecto">
                        <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                        <ValidationMessage For="@(() => solicitudexpedicionfirma.contenidoDTO.codigo)" />
                    </div>
                    <div class="correcto">
                        <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                        <span class="good-msg">Correcto</span>
                    </div>
                </div>

                <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass( () => solicitudexpedicionfirma.contenidoDTO.titulo)">
                    <MatTextField @bind-Value="@solicitudexpedicionfirma.contenidoDTO.titulo" Class="text-field-style" Label="Título del solicitudexpedicionfirma"
                                  @oninput='@(e => KeyUp(e,"titulo",solicitudexpedicionfirma.contenidoDTO))'></MatTextField>

                    <div class="incorrecto">
                        <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                        <ValidationMessage For="@(() => solicitudexpedicionfirma.contenidoDTO.titulo)" />
                    </div>
                    <div class="correcto">
                        <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                        <span class="good-msg">Correcto</span>
                    </div>
                </div>

                <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass( () => solicitudexpedicionfirma.contenidoDTO.descripcion)">
                    <MatTextField @bind-Value="@solicitudexpedicionfirma.contenidoDTO.descripcion" Class="text-field-style" Label="Descripción del solicitudexpedicionfirma"
                                  @oninput='@(e => KeyUp(e,"descripcion",solicitudexpedicionfirma.contenidoDTO))'></MatTextField>

                    <div class="incorrecto">
                        <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                        <ValidationMessage For="@(() => solicitudexpedicionfirma.contenidoDTO.descripcion)" />
                    </div>
                    <div class="correcto">
                        <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                        <span class="good-msg">Correcto</span>
                    </div>
                </div>

                <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass( () => solicitudexpedicionfirma.contenidoDTO.cliente)">
                    <MatTextField @bind-Value="@solicitudexpedicionfirma.contenidoDTO.cliente" Class="text-field-style" Label="Cliente"
                                  @oninput='@(e => KeyUp(e,"cliente",solicitudexpedicionfirma.contenidoDTO))'></MatTextField>

                    <div class="incorrecto">
                        <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                        <ValidationMessage For="@(() => solicitudexpedicionfirma.contenidoDTO.cliente)" />
                    </div>
                    <div class="correcto">
                        <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                        <span class="good-msg">Correcto</span>
                    </div>
                </div>

                <!--<div class="field-container">
    <MatFileUpload Style="padding: 15px; background-color: #6200ee;" OnChange="FilesReadyForContent"></MatFileUpload>
       if (list == "")
        {
            <div>Seleccione un archivo</div>
        }
        else
        {
            <div>list</div>
        }
    </div>-->

                <InputFile Label="Documento" ImagenSeleccionada="ImagenSeleccionada"></InputFile>

                <div class="field-container">
                    <MatButton type="submit"
                               Icon="@MatBlazor.MatIconNames.Check_circle_outline"
                               Class="button-input-style mat-success-c sub-but">Registrar</MatButton>
                </div>

            </MatTab>
        </MatTabGroup>
    </EditForm>
</div>
@code {
    private SolicitudExpedicionFirmaDTO solicitudexpedicionfirma = new SolicitudExpedicionFirmaDTO();
    private EditContext _editContext;
    private string documentoTemporal { get; set; } = null;
    private string imagenTemporal;

    /*
    string list = "";
    private string fileContent;
    private byte[] documentoBytes = null;
    async Task FilesReadyForContent(IMatFileUploadEntry[] files)
    {
        try
        {
            var file = files.FirstOrDefault();
            if (file == null)
            {
                return;
            }

            using (var stream = new MemoryStream())
            {
                var sw = System.Diagnostics.Stopwatch.StartNew();
                await file.WriteToStreamAsync(stream);
                sw.Stop();
                if (stream.Length > 1024 * 1024)
                {
                    fileContent = "";
                    fileContent += $"Name:\t{file.Name}\r\n";
                    fileContent += $"Type:\t{file.Type}\r\n";
                    fileContent += $"LastModified:\t{file.LastModified}\r\n";
                    fileContent += $"Size:\t{file.Size}\r\n";
                    fileContent += $"Time:\t{sw.Elapsed}\r\n";
                    fileContent += $"Speed:\t{(stream.Length / sw.Elapsed.TotalSeconds):N0}  b/s\r\n";
                }
                else
                {
                    stream.Seek(0, SeekOrigin.Begin);
                    using (var reader = new StreamReader(stream))
                    {
                        fileContent = await reader.ReadToEndAsync();
                    }
                    //documentoBytes = Convert.FromBase64String(fileContent);
                    //solicitudexpedicionfirma.contenidoDTO.datosurl = documentoBytes;

                    list = $"Nombre: {file.Name} - Tamaño: {file.Size}";
                }
            }
        }
        catch (Exception e)
        {
            fileContent = $"Error:\r\n{e.Message}\r\n{e.StackTrace}";
        }
    }*/

    protected override void OnInitialized()
    {
        _editContext = new EditContext(solicitudexpedicionfirma);
        if (!string.IsNullOrEmpty(solicitudexpedicionfirma.contenidoDTO.data))
        {
            imagenTemporal = solicitudexpedicionfirma.contenidoDTO.data;
            solicitudexpedicionfirma.contenidoDTO.data = null;
        }
    }

    private void ImagenSeleccionada(string imagenbase64)
    {
        solicitudexpedicionfirma.contenidoDTO.data = imagenbase64;
    }

    void KeyUp(ChangeEventArgs e, string memberName, object val)
    {
        var property = val.GetType().GetProperty(memberName);
        property.SetValue(val, e.Value.ToString());
        Console.WriteLine("Aqui Todo Bien: " + e.Value.ToString());
        var fi = new FieldIdentifier(val, memberName);
        _editContext.NotifyFieldChanged(fi);
    }

    public async Task handleValidSubmit()
    {
        var httpResponse = await repository.Post<SolicitudExpedicionFirmaDTO, SolicitudExpedicionFirma>("api/documentos/documentosef", solicitudexpedicionfirma);
        if (httpResponse.Error)
        {
            await swalfire.errorMessage("Error en el servidor, intentelo de nuevo");
        }
        else
        {
            await swalfire.successMessage("Solicitud de Expedicion de Firma Registrada Correctamente");
        }
        Console.WriteLine("Todo Bien");
    }

    public void handleInvalidSubmit()
    {
        swalfire.errorMessage("Por favor, Verifique los Datos Ingresados");
        Console.WriteLine("Algo Mal");
    }
}
