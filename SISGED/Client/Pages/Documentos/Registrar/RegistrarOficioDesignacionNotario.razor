@inject IRepository repository
@inject ISwalFireMessage swalfire
@using Blazored.Typeahead
<style>
    .div-form {
        background-color: #a6a6a6;
        flex-basis: 100%;
        border-radius: 5px 5px 0px 0px;
        width: 100%;
    }
    .field-container {
        display: block;
        padding: 10px;
    }
    .text-field-style {
        display: block !important;
    }
    /*validacion*/
    .validation-message {
        display: inline;
    }

    div.invalid .correcto {
        display: none;
    }



    div.valid .incorrecto,
    div.valid:not(.modified) .correcto {
        display: none;
    }
    .correcto {
        color: green !important;
        font-family: sans-serif;
        font-size: 15px;
        display: flex;
        height: 18px;
    }

    .incorrecto {
        color: red !important;
        font-family: sans-serif;
        font-size: 15px;
        display: flex;
        height: 18px;
    }

    i.val-icon {
        font-size: 20px;
    }
    .good-msg, div.correcto i.good-icon {
        color: green !important;
    }
    div.incorrecto i.bad-icon{
        color:red !important;
    }
</style>
<div class="div-form">
    <EditForm EditContext="@_editContext" Context="CurrentEditContext"
              OnValidSubmit="handleValidSubmit" OnInvalidSubmit="handleInvalidSubmit">
        <FluentValidator></FluentValidator>
        <MatTabGroup>
            <MatTab Label="Datos Generales">

                <BlazoredTypeahead SearchMethod="searchProducts" @bind-Value="SelectProduct">
                    <SelectedTemplate>
                        @context.ProductName
                    </SelectedTemplate>
                    <ResultTemplate>
                        @context.ProductName <strong>@context.Price</strong>
                    </ResultTemplate>
                </BlazoredTypeahead>

                <div class="field-container">
                    <MatButton type="submit"
                               Icon="@MatBlazor.MatIconNames.Check_circle_outline"
                               Class="button-input-style mat-success-c sub-but">Registrar Ahora</MatButton>
                </div>
            </MatTab>
        </MatTabGroup>
    </EditForm>

    @if(SelectProduct != null)
    {
        <p>Selected Product is: @SelectProduct.ProductName</p>
    }
</div>
@code {

    public class product{
        public string ProductName { get; set; }
        public double Price { get; set; }
        public product(string pn,double p)
        {
            this.ProductName = pn; this.Price = p;
        }
    }
    private List<product> products;
    private product SelectProduct;
    private async Task<IEnumerable<product>> searchProducts(string searchtext)
    {
        return await Task.FromResult(products.Where(x=> x.ProductName.ToLower().Contains(searchtext.ToLower())).ToList());
    }







    private OficioDesignacionNotario oficiodesignacion = new OficioDesignacionNotario();
    private EditContext _editContext;
    protected override void OnInitialized()
    {
        _editContext = new EditContext(oficiodesignacion);
        products = new List<product>()
        {
            new product("computer",2000),
            new product("tv",1000),
            new product("keyboard",500),
        };
    }


    void KeyUp(ChangeEventArgs e, string memberName, object val)
    {
        //var property = usuario2.GetType().GetProperty(memberName);
        var property = val.GetType().GetProperty(memberName); //GetProperty(memberName, usuario2);
        property.SetValue(val, e.Value.ToString());
        Console.WriteLine("Aqui Todo Bien: " + e.Value.ToString());
        var fi = new FieldIdentifier(val, memberName);
        _editContext.NotifyFieldChanged(fi);
    }

    public void handleValidSubmit()
    {
        swalfire.successMessage("Oficio de Designacion Registrada Correctamente");
        Console.WriteLine("Todo Bien");
    }

    public void handleInvalidSubmit()
    {
        swalfire.errorMessage("Por favor, Verifique los Datos Ingresados");
        Console.WriteLine("Algo Mal");
    }

}
