@inject IRepository repository
@inject ISwalFireMessage swalfire
@using Blazored.Typeahead
@using SISGED.Client.Pages.Samples.WorkEnvironment

<style>
    .div-form {
        background-color: #a6a6a6;
        flex-basis: 100%;
        border-radius: 5px 5px 0px 0px;
        width: 100%;
    }

    .field-container {
        display: block;
        padding: 10px;
    }

    .text-field-style {
        display: block !important;
    }
    /*validacion*/
    .validation-message {
        display: inline;
    }

    div.invalid .correcto {
        display: none;
    }

    div.valid .incorrecto,
    div.valid:not(.modified) .correcto {
        display: none;
    }

    .correcto {
        color: green !important;
        font-family: sans-serif;
        font-size: 15px;
        display: flex;
        height: 18px;
    }

    .incorrecto {
        color: red !important;
        font-family: sans-serif;
        font-size: 15px;
        display: flex;
        height: 18px;
    }

    i.val-icon {
        font-size: 20px;
    }

    .good-msg, div.correcto i.good-icon {
        color: green !important;
    }

    div.incorrecto i.bad-icon {
        color: red !important;
    }
</style>

<div class="div-form">
    <EditForm EditContext="@_editContext" Context="CurrentEditContext"
              OnValidSubmit="handleValidSubmit" OnInvalidSubmit="handleInvalidSubmit">
        <FluentValidator></FluentValidator>
        <MatTabGroup>
            <MatTab Label="Datos para conclusion de firma">

                <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass(() => conclusionFirma.contenidoDTO.idescriturapublica)">
                    <BlazoredTypeahead SearchMethod="match" @bind-Value="@conclusionFirma.contenidoDTO.idescriturapublica">
                        <SelectedTemplate>
                            <strong>@context.titulo</strong>
                        </SelectedTemplate>
                        <ResultTemplate>
                            <strong>@context.titulo</strong>
                        </ResultTemplate>
                    </BlazoredTypeahead>
                    <div class="incorrecto">
                        <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                        <ValidationMessage For="@(() => conclusionFirma.contenidoDTO.idescriturapublica)" />
                    </div>
                    <div class="correcto">
                        <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                        <span class="good-msg">Correcto</span>
                    </div>
                </div>
                <div class="field-container">
                    <MatButton type="submit"
                               Icon="@MatBlazor.MatIconNames.Check_circle_outline"
                               Class="button-input-style mat-success-c sub-but">Registrar Ahora</MatButton>
                </div>

            </MatTab>
        </MatTabGroup>
    </EditForm>
</div>

@code {
    //Datos de la sesion local
    [CascadingParameter] WorkEnvironment workspace { get; set; }
    [CascadingParameter(Name = "SesionUsuario")] protected Sesion sesion { get; set; }

    private ConclusionFirmaDTO conclusionFirma = new ConclusionFirmaDTO();

    private EditContext _editContext;

    public List<EscrituraPublica> escriturapublicasseleccionados = new List<EscrituraPublica>();
    public EscrituraPublica escriturapublicaselect;
    private async Task<IEnumerable<EscrituraPublica>> match(string searchtext)
    {
        var httpResponse = await repository.Get<List<EscrituraPublica>>($"api/escrituraspublicas/filter?term={searchtext}");
        if (httpResponse.Error)
        {
            Console.WriteLine("error en el autocomplete");
            return new List<EscrituraPublica>();
        }
        else
        {
            return httpResponse.Response;
        }
    }

    protected override void OnInitialized()
    {
        _editContext = new EditContext(conclusionFirma);
    }

    void KeyUp(ChangeEventArgs e, string memberName, object val)
    {
        var property = val.GetType().GetProperty(memberName);
        property.SetValue(val, e.Value.ToString());
        Console.WriteLine("Aqui Todo Bien: " + e.Value.ToString());
        var fi = new FieldIdentifier(val, memberName);
        _editContext.NotifyFieldChanged(fi);
    }

    public async Task handleValidSubmit()
    {
        Console.WriteLine("Expediente: " + workspace.expedienteseleccionado + " Documento: " + conclusionFirma.contenidoDTO.idescriturapublica);
        ExpedienteWrapper expedienteWrapper = new ExpedienteWrapper();
        expedienteWrapper.documento = conclusionFirma;
        expedienteWrapper.idexpediente = workspace.expedienteseleccionado.idexpediente;

        var httpResponse = await repository.Post<ExpedienteWrapper, ConclusionFirma>($"api/documentos/documentocf", expedienteWrapper);
        if (httpResponse.Error)
        {
            await swalfire.errorMessage("Error en el servidor, intentelo de nuevo");
        }
        else
        {
            ExpedienteBandejaDTO expedientebandeja = new ExpedienteBandejaDTO();
            expedientebandeja = workspace.expedienteseleccionado;
            ConclusionFirma oficioconclusionfirma = new ConclusionFirma();
            oficioconclusionfirma = httpResponse.Response;
            expedientebandeja.documento.id = oficioconclusionfirma.id;
            expedientebandeja.documento.tipo = oficioconclusionfirma.tipo;
            expedientebandeja.documento.historialcontenido = oficioconclusionfirma.historialcontenido;
            expedientebandeja.documento.historialproceso = oficioconclusionfirma.historialproceso;
            expedientebandeja.documento.contenido = oficioconclusionfirma.contenido;
            expedientebandeja.documento.estado = oficioconclusionfirma.estado;
            expedientebandeja.documentosobj.Add(expedientebandeja.documento);
            Item itemSalida = new Item()

            {

                nombre = expedientebandeja.tipo,
                valor = expedientebandeja,
                icono = "alarm_add",
                descripcion = ((DocumentoDTO)expedientebandeja.documento).tipo,
                currentPlace = "outputs",
                originPlace = "outputs",
                cliente = expedientebandeja.cliente
            };
            workspace.UpdateComponentBandeja(itemSalida);
            await swalfire.successMessage("Conclusión de Firma registrada Correctamente");
        }
        Console.WriteLine("Todo Bien");
    }

    public void handleInvalidSubmit()
    {
        swalfire.errorMessage("Por favor, Verifique los Datos Ingresados");
        Console.WriteLine("Algo Mal");
    }
}
