@inject IRepository repository
@inject ISwalFireMessage swalfire
@using Blazored.Typeahead
@using SISGED.Client.Pages.Samples.WorkEnvironment
@using Newtonsoft.Json;
<style>
    .div-form {
        background-color: #a6a6a6;
        flex-basis: 100%;
        border-radius: 5px 5px 0px 0px;
        width: 100%;
    }

    .field-container {
        display: block;
        padding: 10px;
    }

    .text-field-style {
        display: block !important;
    }
    /*validacion*/
    .validation-message {
        display: inline;
    }

    div.invalid .correcto {
        display: none;
    }

    div.valid .incorrecto,
    div.valid:not(.modified) .correcto {
        display: none;
    }

    .correcto {
        color: green !important;
        font-family: sans-serif;
        font-size: 15px;
        display: flex;
        height: 18px;
    }

    .incorrecto {
        color: red !important;
        font-family: sans-serif;
        font-size: 15px;
        display: flex;
        height: 18px;
    }

    i.val-icon {
        font-size: 20px;
    }

    .good-msg, div.correcto i.good-icon {
        color: green !important;
    }

    div.incorrecto i.bad-icon {
        color: red !important;
    }

    div.mat-date-picker {
        width: 100% !important;
    }

    .contenedor-participantes {
        padding-top: 10px;
        margin: 20px;
        border: 2px solid #666666;
        border-radius: 5px;
    }

    .titulo-paticipantes {
        border: 1px solid black;
        margin: 0px 5px 0px 5px;
        border-radius: 5px 5px 0px 0px;
        background-color: #404040;
        color: white;
        display: flex;
        flex-direction: row;
        justify-content: center;
        align-items: center;
    }

    .titulo {
        color: #d9d9d9;
    }

    .icono {
        margin-left: 20px;
    }

        .icono i {
            margin: 5px;
        }

    .single-textfield-container {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
    }

    .base-field {
        flex-basis: 90%;
    }

    .base-icon {
        display: flex;
        flex-basis: 8%;
        justify-content: center;
        align-items: center;
        margin: 10px 2px;
        background: #ff1a1a;
        border-radius: 3px;
        border: 1px solid #800000
    }
</style>

<div class="div-form">
    <EditForm EditContext="@_editContext" Context="CurrentEditContext"
              OnValidSubmit="handleValidSubmit" OnInvalidSubmit="handleInvalidSubmit">
        <FluentValidator></FluentValidator>
        <MatTabGroup>
            <MatTab Label="General">




                <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass( () => dictamen.contenidoDTO.titulo)">
                    <MatTextField @bind-Value="@dictamen.contenidoDTO.titulo" Class="text-field-style"
                                  Label="Titulo del dictamen" @oninput='@(e => KeyUp(e,"titulo",dictamen.contenidoDTO))'></MatTextField>
                    <div class="incorrecto">
                        <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                        <ValidationMessage For="@(() => dictamen.contenidoDTO.titulo)" />
                    </div>
                    <div class="correcto">
                        <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                        <span class="good-msg">Correcto</span>
                    </div>
                </div>

                <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass( () => dictamen.contenidoDTO.descripcion)">
                    <MatTextField @bind-Value="@dictamen.contenidoDTO.descripcion" Class="text-field-style"
                                  Label="Descripcion del dictamen" @oninput='@(e => KeyUp(e,"descripcion",dictamen.contenidoDTO))'></MatTextField>
                    <div class="incorrecto">
                        <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                        <ValidationMessage For="@(() => dictamen.contenidoDTO.descripcion)" />
                    </div>
                    <div class="correcto">
                        <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                        <span class="good-msg">Correcto</span>
                    </div>
                </div>

                <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass( () => dictamen.contenidoDTO.nombredenunciante)">
                    <MatTextField @bind-Value="@dictamen.contenidoDTO.nombredenunciante" Class="text-field-style"
                                  Label="Nombre del denunciante" @oninput='@(e => KeyUp(e,"nombredenunciante",dictamen.contenidoDTO))'></MatTextField>
                    <div class="incorrecto">
                        <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                        <ValidationMessage For="@(() => dictamen.contenidoDTO.nombredenunciante)" />
                    </div>
                    <div class="correcto">
                        <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                        <span class="good-msg">Correcto</span>
                    </div>
                </div>

                <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass( () => dictamen.contenidoDTO.conclusion)">
                    <MatTextField @bind-Value="@dictamen.contenidoDTO.conclusion" Class="text-field-style"
                                  Label="Conclusion" @oninput='@(e => KeyUp(e,"conclusion",dictamen.contenidoDTO))'></MatTextField>
                    <div class="incorrecto">
                        <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                        <ValidationMessage For="@(() => dictamen.contenidoDTO.conclusion)" />
                    </div>
                    <div class="correcto">
                        <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                        <span class="good-msg">Correcto</span>
                    </div>
                </div>

            </MatTab>
            <MatTab Label="Observaciones y Recomendaciones">

                <div class="contenedor-participantes">
                    <div class="titulo-paticipantes">
                        <div><span class="titulo">Observaciones</span></div>
                        <div class="icono" @onclick="@(addObservaciones)">
                            <MatIcon Icon="add_circle_outline"></MatIcon>
                        </div>
                    </div>
                    @for (int i = 0; i < dictamen.contenidoDTO.observaciones.Count; i++)
                    {
                        int index = i;
                        <div class="single-textfield-container">
                            <div class="field-container base-field input-group-2 @CurrentEditContext.FieldCssClass(() => dictamen.contenidoDTO.observaciones[index].descripcion)">
                                <MatTextField @bind-Value="@dictamen.contenidoDTO.observaciones[index].descripcion" Class="text-field-style"
                                              Label="Ingrese una observación"
                                              @oninput='@(e => KeyUp(e, "descripcion", dictamen.contenidoDTO.observaciones[index]))'></MatTextField>
                                <div class="incorrecto">
                                    <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                                    <ValidationMessage For="@(() => dictamen.contenidoDTO.observaciones[index].descripcion)" />
                                </div>
                                <div class="correcto">
                                    <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                                    <span class="good-msg">Correcto</span>
                                </div>
                            </div>
                            <div class="base-icon" @onclick="@(() => removeObservaciones(index))">
                                <MatIcon Icon="remove_circle_outline"></MatIcon>
                            </div>
                        </div>
                    }
                    <div class="field-container base-field input-group-2 @CurrentEditContext.FieldCssClass(() => dictamen.contenidoDTO.observaciones)">
                        <div class="incorrecto">
                            <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                            <ValidationMessage For="@(() => dictamen.contenidoDTO.observaciones)" />
                        </div>
                        <div class="correcto">
                            <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                            <span class="good-msg">Correcto</span>
                        </div>
                    </div>
                </div>
                <!--**************************************************************************************-->
                <div class="contenedor-participantes">
                    <div class="titulo-paticipantes">
                        <div><span class="titulo">Recomendaciones</span></div>
                        <div class="icono" @onclick="@(addRecomendaciones)">
                            <MatIcon Icon="add_circle_outline"></MatIcon>
                        </div>
                    </div>
                    @for (int i = 0; i < dictamen.contenidoDTO.recomendaciones.Count; i++)
                    {
                        int index = i;
                        <div class="single-textfield-container">
                            <div class="field-container base-field input-group-2 @CurrentEditContext.FieldCssClass(() => dictamen.contenidoDTO.recomendaciones[index].descripcion)">
                                <MatTextField @bind-Value="@dictamen.contenidoDTO.recomendaciones[index].descripcion" Class="text-field-style"
                                              Label="Contenido de la recomendación"
                                              @oninput='@(e => KeyUp(e, "descripcion", dictamen.contenidoDTO.recomendaciones[index]))'></MatTextField>
                                <div class="incorrecto">
                                    <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                                    <ValidationMessage For="@(() => dictamen.contenidoDTO.recomendaciones[index].descripcion)" />
                                </div>
                                <div class="correcto">
                                    <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                                    <span class="good-msg">Correcto</span>
                                </div>
                            </div>
                            <div class="base-icon" @onclick="@(() => removeRecomendaciones(index))">
                                <MatIcon Icon="remove_circle_outline"></MatIcon>
                            </div>
                        </div>
                    }

                    <div class="field-container base-field input-group-2 @CurrentEditContext.FieldCssClass(() => dictamen.contenidoDTO.recomendaciones)">
                        <div class="incorrecto">
                            <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                            <ValidationMessage For="@(() => dictamen.contenidoDTO.recomendaciones)" />
                        </div>
                        <div class="correcto">
                            <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                            <span class="good-msg">Correcto</span>
                        </div>
                    </div>
                </div>
                
            </MatTab>
            <MatTab Label="Subir Anexo">
                <DragnDrop Label="" ImagenSeleccionada="ImagenSeleccionada2"></DragnDrop>
                <div class="field-container">
                    <MatButton type="submit"
                               Disabled="@loadprocess"
                               Icon="@MatBlazor.MatIconNames.Check_circle_outline"
                               Class="button-input-style mat-success-c sub-but">Registrar Ahora</MatButton>
                </div>
            </MatTab>
        </MatTabGroup>
    </EditForm>
</div>

@code {
    //Variables de sesion
    [CascadingParameter] WorkEnvironment workspace { get; set; }
    [CascadingParameter(Name = "SesionUsuario")] protected Sesion sesion { get; set; }

    //Datos del formulario
    [Parameter] public EventCallback<ExpedienteBandejaDTO> AumentarBandeja { get; set; }
    private DictamenDTO dictamen = new DictamenDTO();
    private string imagenTemporal2;
    private EditContext _editContext;
    private string imagenTemporal;
    private bool loadprocess = false;

    protected override void OnInitialized()
    {
        dictamen.contenidoDTO.observaciones = new List<Observaciones>() { new Observaciones() { index = 0, descripcion = "" } };
        dictamen.contenidoDTO.recomendaciones = new List<Recomendaciones>() { new Recomendaciones() { index = 0, descripcion = "" } };
        dictamen.contenidoDTO.Urlanexo = new List<string>();
        _editContext = new EditContext(dictamen);
        foreach (string u in dictamen.contenidoDTO.Urlanexo)
        {
            if (!string.IsNullOrWhiteSpace(u))
            {
                imagenTemporal2 = u;
                dictamen.contenidoDTO.Urlanexo = null;
            }
        }
    }
    private void addObservaciones()
    {
        dictamen.contenidoDTO.observaciones.Add(new Observaciones() { index = (dictamen.contenidoDTO.observaciones.Count) });
        StateHasChanged();
    }
    private void removeObservaciones(int index)
    {
        dictamen.contenidoDTO.observaciones.RemoveAt(index);
        StateHasChanged();
    }
    private void addRecomendaciones()
    {
        dictamen.contenidoDTO.recomendaciones.Add(new Recomendaciones() { index = (dictamen.contenidoDTO.recomendaciones.Count) });
        StateHasChanged();
    }
    private void removeRecomendaciones(int index)
    {
        dictamen.contenidoDTO.recomendaciones.RemoveAt(index);
        StateHasChanged();
    }
    private void ImagenSeleccionada2(string imagenbase64)
    {
        dictamen.contenidoDTO.Urlanexo.Add(imagenbase64);
    }

    void KeyUp(ChangeEventArgs e, string memberName, object val)
    {
        var property = val.GetType().GetProperty(memberName);
        property.SetValue(val, e.Value.ToString());
        var fi = new FieldIdentifier(val, memberName);
        _editContext.NotifyFieldChanged(fi);
    }

    public async Task handleValidSubmit()
    {
        ExpedienteWrapper expedienteWrapper = new ExpedienteWrapper();
        expedienteWrapper.documento = dictamen;
        expedienteWrapper.idexpediente = workspace.expedienteseleccionado.idexpediente;
        expedienteWrapper.idusuarioactual = sesion.usuario.id;
        expedienteWrapper.documentoentrada = workspace.expedienteseleccionado.documento.id;
        var httpResponse = await repository.Post<ExpedienteWrapper, Dictamen>("api/documentos/documentod", expedienteWrapper);
        if (!httpResponse.Error)
        {
            ExpedienteBandejaDTO expedientebandeja = new ExpedienteBandejaDTO();
            expedientebandeja = workspace.expedienteseleccionado;
            Dictamen dictamen = new Dictamen();
            dictamen = httpResponse.Response;
            expedientebandeja.documento.id = dictamen.id;
            expedientebandeja.documento.tipo = dictamen.tipo;
            expedientebandeja.documento.historialcontenido = dictamen.historialcontenido;
            expedientebandeja.documento.historialproceso = dictamen.historialproceso;
            expedientebandeja.documento.contenido = JsonConvert.SerializeObject(dictamen.contenido);
            expedientebandeja.documento.estado = dictamen.estado;
            expedientebandeja.documentosobj.Add(expedientebandeja.documento);
            Item itemSalida = new Item()
            {
                nombre = expedientebandeja.tipo,
                valor = expedientebandeja,
                icono = "alarm_add",
                descripcion = ((DocumentoDTO)expedientebandeja.documento).tipo,
                currentPlace = "workspace",
                originPlace = "inputs",
                cliente = expedientebandeja.cliente,
                itemstatus = "registrado"
            };
            workspace.UpdateDocRegistrado(itemSalida);
            workspace.UpdateTools("Registrar Documento");
            DocumentoDTO documentoDTO = new DocumentoDTO();
            documentoDTO.id = dictamen.id;
            documentoDTO.tipo = dictamen.tipo;
            documentoDTO.estado = dictamen.estado;
            documentoDTO.contenido = dictamen.contenido;
            documentoDTO.historialcontenido = dictamen.historialcontenido;
            documentoDTO.historialproceso = dictamen.historialproceso;
            documentoDTO.urlanexo = dictamen.urlanexo;
            workspace.expedienteseleccionado.documentosobj.Add(documentoDTO);
            workspace.expedienteseleccionado.documento = documentoDTO;

            StateHasChanged();
            await swalfire.successMessage("Dictamen registrado correctamente");
        }
        else
        {
            await swalfire.errorMessage("Error en el Servidor[505]");
        }
    }

    public void handleInvalidSubmit()
    {
        swalfire.errorMessage("Por favor, Verifique los Datos Ingresados");
    }
}