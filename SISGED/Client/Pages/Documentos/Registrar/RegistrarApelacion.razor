@inject IRepository repository
@inject ISwalFireMessage swalfire
@using Blazored.Typeahead
@using SISGED.Client.Pages.Samples.WorkEnvironment
@using Newtonsoft.Json;
<style>
    .div-form {
        background-color: #a6a6a6;
        flex-basis: 100%;
        border-radius: 5px 5px 0px 0px;
        width: 100%;
    }

    .field-container {
        display: block;
        padding: 10px;
    }

    .text-field-style {
        display: block !important;
    }
    /*validacion*/
    .validation-message {
        display: inline;
    }

    div.invalid .correcto {
        display: none;
    }

    div.valid .incorrecto,
    div.valid:not(.modified) .correcto {
        display: none;
    }

    .correcto {
        color: green !important;
        font-family: sans-serif;
        font-size: 15px;
        display: flex;
        height: 18px;
    }

    .incorrecto {
        color: red !important;
        font-family: sans-serif;
        font-size: 15px;
        display: flex;
        height: 18px;
    }

    i.val-icon {
        font-size: 20px;
    }

    .good-msg, div.correcto i.good-icon {
        color: green !important;
    }

    div.incorrecto i.bad-icon {
        color: red !important;
    }
</style>

<div class="div-form">
    <EditForm EditContext="@_editContext" Context="CurrentEditContext"
              OnValidSubmit="handleValidSubmit" OnInvalidSubmit="handleInvalidSubmit">
        <FluentValidator></FluentValidator>
        <MatTabGroup>
            <MatTab Label="Datos de la Apelación">

                <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass( () => apelacion.contenidoDTO.titulo)">
                    <MatTextField @bind-Value="@apelacion.contenidoDTO.titulo" Class="text-field-style"
                                  Label="Titulo de la Apelación" @oninput='@(e => KeyUp(e,"titulo",apelacion.contenidoDTO))'></MatTextField>
                    <div class="incorrecto">
                        <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                        <ValidationMessage For="@(() => apelacion.contenidoDTO.titulo)" />
                    </div>
                    <div class="correcto">
                        <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                        <span class="good-msg">Correcto</span>
                    </div>
                </div>

                <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass( () => apelacion.contenidoDTO.descripcion)">
                    <MatTextField @bind-Value="@apelacion.contenidoDTO.descripcion" Class="text-field-style"
                                  Label="Descripción de la apelación" @oninput='@(e => KeyUp(e,"descripcion",apelacion.contenidoDTO))'></MatTextField>
                    <div class="incorrecto">
                        <MatIcon Icon="@MatIconNames.Error" Class="val-icon bad-icon"></MatIcon>
                        <ValidationMessage For="@(() => apelacion.contenidoDTO.descripcion)" />
                    </div>
                    <div class="correcto">
                        <MatIcon Icon="@MatIconNames.Check" Class="val-icon good-icon"></MatIcon>
                        <span class="good-msg">Correcto</span>
                    </div>
                </div>

                <InputFileV2 datosFile="@apelacion.contenidoDTO.data" archivoSeleccionado="ArchivoSeleccionada"></InputFileV2>

                @*<div class="field-container">
                    <MatButton type="submit"
                       Disabled="@loadprocess"
                       Icon="@MatBlazor.MatIconNames.Check_circle_outline"
                       Class="button-input-style mat-success-c sub-but">Registrar Ahora</MatButton>
                    </div>*@
            </MatTab>
            <MatTab Label="Subir Anexo">
                <DragnDrop Label="" ImagenSeleccionada="ImagenSeleccionada2" FileNames="FileName"></DragnDrop>
                @if (nombres != null && nombres.Count > 0)
                {
                    @for (int i = 0; i < nombres.Count; i++)
                    {
                        int index = i;
                        string a = nombres[i];
                        <div>
                            @nombres[i]

                            <button class="btn btn-link text-danger p-0 pl-1" type="button"
                                    @onclick="@(e => RemoveFile(a,index))">
                                <small class="RedText">Eliminar</small>
                            </button>
                        </div>
                    }
                }
                <div class="field-container">
                    <MatButton type="submit"
                               Disabled="@loadprocess"
                               Icon="@MatBlazor.MatIconNames.Check_circle_outline"
                               Class="button-input-style mat-success-c sub-but">Registrar Ahora</MatButton>
                </div>
            </MatTab>
        </MatTabGroup>
    </EditForm>
</div>

@code {
    //Variables de sesion
    [CascadingParameter] WorkEnvironment workspace { get; set; }
    [CascadingParameter(Name = "SesionUsuario")] protected Sesion sesion { get; set; }

    //Datos del formulario
    [Parameter] public EventCallback<ExpedienteBandejaDTO> AumentarBandeja { get; set; }
    private ApelacionDTO apelacion = new ApelacionDTO();
    private EditContext _editContext;
    private string imagenTemporal;
    List<string> nombres = new List<string>();
    private string imagenTemporal2;
    private bool loadprocess = false;
    int paso = 0;
    int subpaso = 0;

    protected override void OnInitialized()
    {
        apelacion.contenidoDTO.Urlanexo = new List<string>();
        _editContext = new EditContext(apelacion);
        foreach (string u in apelacion.contenidoDTO.Urlanexo)
        {
            if (!string.IsNullOrWhiteSpace(u))
            {
                imagenTemporal2 = u;
                apelacion.contenidoDTO.Urlanexo = null;
            }
        }
        if (!string.IsNullOrEmpty(apelacion.contenidoDTO.data))
        {
            imagenTemporal = apelacion.contenidoDTO.data;
            apelacion.contenidoDTO.data = null;
        }
        subpaso = 1;
        //Enviar paso=0,subpaso=1,idexp
    }

    private void ArchivoSeleccionada(string imagenbase64)
    {
        apelacion.contenidoDTO.data = imagenbase64;
    }

    private void ImagenSeleccionada2(string imagenbase64)
    {
        apelacion.contenidoDTO.Urlanexo.Add(imagenbase64);
    }
    private void FileName(string imagenbase64)
    {
        nombres.Add(imagenbase64);
    }

    private async Task RemoveFile(string file, int imagen64)
    {
        nombres.Remove(file);
        apelacion.contenidoDTO.Urlanexo.RemoveAt(imagen64);
        StateHasChanged();

    }
    void KeyUp(ChangeEventArgs e, string memberName, object val)
    {
        var property = val.GetType().GetProperty(memberName);
        property.SetValue(val, e.Value.ToString());
        var fi = new FieldIdentifier(val, memberName);
        _editContext.NotifyFieldChanged(fi);
    }

    public async Task handleValidSubmit()
    {
        loadprocess = true;
        //aperturamientodisciplinario.contenidoDTO.idusuario = sesion.usuario.id;
        ExpedienteWrapper expedienteWrapper = new ExpedienteWrapper();
        expedienteWrapper.documento = apelacion;
        expedienteWrapper.idexpediente = workspace.expedienteseleccionado.idexpediente;
        expedienteWrapper.idusuarioactual = sesion.usuario.id;
        expedienteWrapper.documentoentrada = workspace.expedienteseleccionado.documento.id;

        var httpResponse = await repository.Post<ExpedienteWrapper, Apelacion>($"api/documentos/documentoAPE", expedienteWrapper);
        if (!httpResponse.Error)
        {
            ExpedienteBandejaDTO expedientebandeja = new ExpedienteBandejaDTO();
            expedientebandeja = workspace.expedienteseleccionado;
            Apelacion apelacionact = new Apelacion();
            apelacionact = httpResponse.Response;
            expedientebandeja.documento.id = apelacionact.id;
            expedientebandeja.documento.tipo = apelacionact.tipo;
            expedientebandeja.documento.historialcontenido = apelacionact.historialcontenido;
            expedientebandeja.documento.historialproceso = apelacionact.historialproceso;
            expedientebandeja.documento.contenido = apelacionact.contenido;
            expedientebandeja.documento.estado = apelacionact.estado;
            //expedientebandeja.documentosobj.Add(expedientebandeja.documento);
            Item itemSalida = new Item()
            {
                nombre = expedientebandeja.tipo,
                valor = expedientebandeja,
                icono = "alarm_add",
                descripcion = ((DocumentoDTO)expedientebandeja.documento).tipo,
                currentPlace = "workspace",
                originPlace = "inputs",
                cliente = expedientebandeja.cliente,
                itemstatus = "registrado"
            };
            workspace.UpdateDocRegistrado(itemSalida);
            workspace.UpdateTools("Registrar Documento");
            DocumentoDTO documentoDTO = new DocumentoDTO();
            documentoDTO.id = apelacionact.id;
            documentoDTO.tipo = apelacionact.tipo;
            documentoDTO.estado = apelacionact.estado;
            documentoDTO.contenido = JsonConvert.SerializeObject(apelacionact.contenido);
            documentoDTO.historialcontenido = apelacionact.historialcontenido;
            documentoDTO.historialproceso = apelacionact.historialproceso;
            documentoDTO.urlanexo = apelacionact.urlanexo;
            workspace.expedienteseleccionado.documentosobj.Add(documentoDTO);
            workspace.expedienteseleccionado.documento = documentoDTO;
            foreach (DocumentoDTO i in workspace.expedienteseleccionado.documentosobj)
            {
                Console.WriteLine(i.id);
            }
            StateHasChanged();
            //workspace.UpdateComponentBandeja(itemSalida);
            await swalfire.successMessage("Apelación registrado correctamente");
            subpaso = 2;
            //Enviar paso=0,subpaso=2,idexp
        }
        else
        {
            await swalfire.errorMessage("Error en el servidor, intentelo de nuevo");
        }
        loadprocess = false;
    }

    public void handleInvalidSubmit()
    {
        loadprocess = false;
        swalfire.errorMessage("Por favor, Verifique los Datos Ingresados");
    }

}

