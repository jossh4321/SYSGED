@page "/WorkFlowProto"
@layout MainLayout
@inject HttpClient Http
@inject IRepository repository
@inject IJSRuntime js
@inject ISwalFireMessage swalfire
<style>
    div.input {
        flex-grow: 1;
        height: inherit;
        text-align: center;
    }

    div.output {
        flex-grow: 1;
        text-align: center;
    }

    .container-ot {
        flex-grow: 1;
        display: flex;
        flex-direction: column;
        flex-wrap: wrap;
        height: inherit;
    }

    div.workspace {
        border-left: 0px;
        border-right: 0px;
        flex-grow: 10;
        height: inherit;
        text-align: center;
    }

    div.tools {
        border-top: 0px;
        flex-grow: 1;
        text-align: center;
        display: block;
    }

    .common-box-style {
        border: 3px solid #808080;
        background-color: #1a1a1a;
    }

    .wfe-container {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        justify-content: space-around;
        height: 550px;
    }

    .box-title-style {
        background-color: black;
        margin: 6px 4px 10px 4px;
        border: 2px solid #4d4d4d;
        border-radius: 7px 7px 0px 0px;
    }

        .box-title-style span {
            color: #808080;
            font-size: 20px;
        }

    .work-box-title-style span {
        color: #808080;
        font-size: 23px;
    }

    .work-box-title-style {
        background-color: black;
        margin: 6px 0px 0px 0px;
        padding: 3px;
        border: 2px solid #808080;
        text-align: center;
        border-bottom: none;
        border-radius: 8px 8px 0px 0px;
    }
</style>
<div style="flex-basis:100%">
    <div class="work-box-title-style"><span>Area de Trabajo Especializada</span></div>
    <CascadingValue Value="this">
        <div class="wfe-container">
            <div class="input common-box-style">
                <div class="box-title-style"><span>Bandeja de Entrada</span></div>
            </div>
            <div class="workspace common-box-style">
                <ToolList place="workspace">
                    <WindowTool itemArrastrado="@(listaherramientas.SingleOrDefault(x => x.currentPlace.Equals("workspace")))"></WindowTool>
                </ToolList>

            </div>
            <div class="container-ot">
                <div class="output common-box-style">
                    <div class="box-title-style"><span>Bandeja de Salida</span></div>

                </div>
                <div class="tools common-box-style">
                    <div class="box-title-style"><span>HERRAMIENTAS</span></div>
                    <ToolList place="tools"></ToolList>
                </div>
            </div>
        </div>
    </CascadingValue>
</div>
@code {

    public List<Tool> listaherramientas = new List<Tool>() {
        new Tool(){
            nombre="Busqueda",
            descripcion="Permite realizar una busqueda de Protocolos Juridicos mediante filtros especificos",
            icono="search",currentPlace="tools",componentName="ContenidoPrueba"
            },
         new Tool(){
            nombre="Firma y Sello",
            descripcion="Permitefirmar digital mente con la misma validez que una firma manuscrita",
            icono="search",currentPlace="tools",componentName="ContenidoPrueba"
            },
         new Tool(){
            nombre="Codificar y Registrar",
            descripcion="Genera un codigo especifico en un doc y permite el registro de un descripcion",
            icono="search",currentPlace="tools",componentName="ContenidoPrueba"
            },
         new Tool(){
            nombre="Enviar a mesa de Partes",
            descripcion="Envia el documento a mesa de partes",
            icono="search",currentPlace="tools",componentName="ContenidoPrueba"
            }
        };
    public List<Documento> bandejasalida = new List<Documento>();
    public List<Tool> listavacia = new List<Tool>();
    public Tool currentToolDragged;
    public string valor = "<WindowTool></WindowTool>";
    protected override async Task OnInitializedAsync()
    {

        var httpResponse = await repository.Get<List<Documento>>("api/documentos");
        if (!httpResponse.Error)
        {
            bandejasalida = httpResponse.Response;
            bandejasalida.ForEach(x => Console.WriteLine(x.id));
        }
        else
        {
            Console.WriteLine("Ocurrio un error");
        }

    }
    public void UpdateDraggableComponents(string newCurrentPlace)
    {
        var tool = listaherramientas.SingleOrDefault(x => x.nombre == currentToolDragged.nombre);
        if (tool != null /*&& listaherramientas.Where(x => x.currentPlace == "workspace").Count() == 0*/)
        {
            Console.WriteLine("ESTOY EN EL CAMBIO");
            tool.currentPlace = newCurrentPlace;
            listaherramientas[listaherramientas.FindIndex(ind => ind.nombre.Equals(currentToolDragged.nombre))] = tool;
            StateHasChanged();
        }
    }
}
