@page "/WorkFlowProto"
@layout MainLayout
@inject HttpClient Http
@inject IRepository repository
@inject IJSRuntime js
@inject ISwalFireMessage swalfire
<style>
    div.input {
        flex-grow: 1;
        height: inherit;
        text-align: center;
    }

    div.output {
        flex-grow: 1;
        text-align: center;
    }

    .container-ot {
        flex-grow: 1;
        display: flex;
        flex-direction: column;
        flex-wrap: wrap;
        height: inherit;
    }

    div.workspace {
    border-left: 0px;
    border-right: 0px;
    flex-grow: 10;
    text-align: center;
    display: flex;
    max-height: 100%;
    flex-direction: column;
    }

    div.tools {
        border-top: 0px;
        flex-grow: 1;
        text-align: center;
        display: flex;
        flex-direction: column;
    }

    .common-box-style {
        border: 3px solid #808080;
        background-color: #1a1a1a;
    }

    .wfe-container {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        justify-content: space-around;
        height: 550px;
    }

    .box-title-style {
        background-color: black;
        margin: 6px 4px 10px 4px;
        border: 2px solid #4d4d4d;
        border-radius: 7px 7px 0px 0px;
        flex-basis: 9%;
    }

        .box-title-style span {
            color: #808080;
            font-size: 20px;
        }

    .work-box-title-style span {
        color: #808080;
        font-size: 23px;
    }

    .work-box-title-style {
        background-color: black;
        margin: 6px 0px 0px 0px;
        padding: 3px;
        border: 2px solid #808080;
        text-align: center;
        border-bottom: none;
        border-radius: 8px 8px 0px 0px;
    }
    .loader-block {
        display: flex;
        flex-basis: 91%;
        width: inherit;
        height: inherit;
        background-color: #4d4d4d;
        justify-content: center;
        justify-content: center;
        align-items: center;
        background: #1a1a1a;
    }
</style>
<div style="flex-basis:100%">
    <div class="work-box-title-style"><span>Area de Trabajo Especializada - Usuario: @sesion.usuario.datos.nombre @sesion.usuario.datos.apellido</span></div>
    <CascadingValue Value="this">
        <div class="wfe-container">
            <div class="input common-box-style">
                <div class="box-title-style"><span>Bandeja de Entrada</span></div>
            </div>
            <div class="workspace common-box-style">
                <ToolList place="workspace">
                    <WindowTool itemArrastrado="@(sesion.herramientasutilizables.SingleOrDefault(x => x.currentPlace.Equals("workspace")))"></WindowTool>
                </ToolList>

            </div>
            <div class="container-ot">
                <div class="output common-box-style">
                    <div class="box-title-style"><span>Bandeja de Salida</span></div>

                </div>
                <div class="tools common-box-style">
                    <div class="box-title-style"><span>HERRAMIENTAS</span></div>
                    @if (sesion.herramientasutilizables.Count == 0)
                    {
                        <div class="loader-block">
                            <div class="spinner-border" style="width: 3rem; height: 3rem;color:#ccc" role="status">
                                <span class="sr-only">Loading...</span>
                            </div>
                        </div>
                    }
                    else
                    {
                        <ToolList place="tools"></ToolList>
                    }

                </div>
            </div>
        </div>
    </CascadingValue>
</div>
@code {
    [CascadingParameter(Name = "SesionUsuario")] protected Sesion sesion { get; set; }

    public List<Tool> listaherramientas = new List<Tool>();
    public List<Documento> bandejasalida = new List<Documento>();
    public List<Tool> listavacia = new List<Tool>();
    public Tool currentToolDragged;
    public string valor = "<WindowTool></WindowTool>";
    public Bandeja bandejaUsuario = new Bandeja();
    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("INICIE: WorkEnvironment");
        /*var httpResponse = await repository.Get<List<Documento>>("api/documentos");
        if (!httpResponse.Error)
        {
            bandejasalida = httpResponse.Response;
            bandejasalida.ForEach(x => Console.WriteLine(x.id));
        }
        else
        {
            Console.WriteLine("Ocurrio un error");
        }*/
        List<ExpedienteDTO> lexdto = new List<ExpedienteDTO>();
        var httpResponse = await repository.Get<List<ExpedienteDTO>>("api/expediente/getall");
        var httpResponseBnadeja = await repository.Get<Bandeja>($"api/bandejas/getBandeja/");
        if (!httpResponse.Error)
        {
            lexdto = httpResponse.Response;
        }
        else
        {
            Console.WriteLine("Ocurrio un error");
        }*/
    }

    public void UpdateDraggableComponents(string newCurrentPlace)
    {
        var tool = sesion.herramientasutilizables.SingleOrDefault(x => x.nombre == currentToolDragged.nombre);
        if (tool != null /*&& listaherramientas.Where(x => x.currentPlace == "workspace").Count() == 0*/)
        {
            Console.WriteLine("ESTOY EN EL CAMBIO");
            tool.currentPlace = newCurrentPlace;
            sesion.herramientasutilizables[sesion.herramientasutilizables.FindIndex(ind => ind.nombre.Equals(currentToolDragged.nombre))] = tool;
            StateHasChanged();
        }
    }

    /*public ExpedienteDTO expedientedto = new ExpedienteDTO()
    {
        id="111",
        tipo="Denuncia",
        cliente =
        {
            nombre="Pedro Paredes",
            numerodocumento="",
            tipodocumento="Pedro Paredes",
        }
    }
    [BsonId]
    [BsonRepresentation(BsonType.ObjectId)]
    public string id { get; set; }
    public string tipo { get; set; }
    public Cliente cliente { get; set; }
    public DateTime fechainicio { get; set; }
    public DateTime fechafin { get; set; }
    public List<DocumentoExpediente> documentos { get; set; }
    public List<Documento> documentosobj { get; set; }
    public List<Derivacion> derivaciones { get; set; }
    public string estado { get; set; }*/

}
