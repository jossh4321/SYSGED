@page "/WorkFlowProto"
@layout MainLayout
@inject HttpClient Http
@inject IRepository repository
@inject IJSRuntime js
@inject ISwalFireMessage swalfire
@using System.Timers
<style>
    div.input {
        flex-grow: 1;
        height: inherit;
        text-align: center;
        overflow: auto;
    }

    div.output {
        flex-grow: 1;
        text-align: center;
        overflow: auto;
    }

    .container-ot {
        flex-grow: 1;
        display: flex;
        flex-direction: column;
        flex-wrap: wrap;
        height: inherit;
    }

    div.workspace {
        border-left: 0px;
        border-right: 0px;
        flex-grow: 10;
        text-align: center;
        display: flex;
        max-height: 100%;
        flex-direction: column;
    }

    div.tools {
        border-top: 0px;
        flex-grow: 1;
        text-align: center;
        display: flex;
        flex-direction: column;
    }

    .common-box-style {
        border: 3px solid #808080;
        background-color: #1a1a1a;
    }

    .wfe-container {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        justify-content: space-around;
        height: 550px;
    }

    .box-title-style {
        background-color: black;
        margin: 6px 4px 10px 4px;
        border: 2px solid #4d4d4d;
        border-radius: 7px 7px 0px 0px;
        flex-basis: 9%;
    }

        .box-title-style span {
            color: #808080;
            font-size: 20px;
        }

    .work-box-title-style span {
        color: #808080;
        font-size: 23px;
    }

    .work-box-title-style {
        background-color: black;
        margin: 6px 0px 0px 0px;
        padding: 3px;
        border: 2px solid #808080;
        text-align: center;
        border-bottom: none;
        border-radius: 8px 8px 0px 0px;
    }

    .loader-block {
        display: flex;
        flex-basis: 91%;
        width: inherit;
        height: inherit;
        background-color: #4d4d4d;
        justify-content: center;
        justify-content: center;
        align-items: center;
        background: #1a1a1a;
    }
    /* Estilos del dragableList*/
    .div-style {
        display: flex;
        flex-direction: column;
        flex-basis: 100%;
        max-height: 100%;
        min-height: 100%;
        overflow-y: auto;
        overflow-x: hidden;
    }

    .div-view {
        display: flex;
        flex-basis: 100%;
        flex-direction: column;
        overflow-y: scroll !important;
    }

    .div-tool-list {
        flex-basis: 15%;
    }

    /*Estilos del dragableItem*/

    .tool-container {
        display: flex;
        padding: 6px 5px 6px 15px;
        color: white;
        text-align: left;
        justify-content: left;
        flex-direction: row;
        align-items: center;
    }

    .tool-name {
        font-size: 16px;
        font-family: sans-serif;
    }

    .li-tool {
        list-style: none;
    }

    .li-drag-style {
        border: 2px solid #808080 !important;
        margin: 6px;
        border-radius: 15px;
        background-color: #404040 !important;
        transition: 300ms all;
    }

        .li-drag-style:hover {
            transform: scale(1.05);
            border: 2px solid #0066ff !important;
        }

            .li-drag-style:hover .tool-name, .li-drag-style:hover i.material-icons {
                transform: scale(1);
                color: #0066ff !important;
            }

    .tool-name {
        display: block;
        margin: 0px 0px 0px 7px;
        color: #b3b3b3;
    }

    i.material-icons {
        color: #b3b3b3 !important;
    }

    .tool-sub-container {
        display: flex;
        flex-direction: column;
    }

    .tool-description {
        display: block;
        margin: 0px 0px 0px 7px;
        color: #b3b3b3;
    }

    .tool-client-name {
        display: block;
        margin: 0px 0px 0px 7px;
        color: #b3b3b3;
    }

    .modal-info-solicitudBPN {
        display: flex;
        flex-direction: column;
        /*height: 700px;*/
        width: 500px;
        background-color: #808080;
    }
</style>
<div style="flex-basis:100%">
    <div class="work-box-title-style">
        <span>Área de Trabajo Especializada - Usuario: @sesion.usuario.datos.nombre @sesion.usuario.datos.apellido </span>
    </div>
    <CascadingValue Value="this">
        <dBiv class="wfe-container">
            <div class="input common-box-style">
                <div class="box-title-style">
                    <span>Bandeja de Entrada</span>
                </div>
                <DraggableList place="inputs">
                </DraggableList>
            </div>
            <div class="workspace common-box-style">
                <DraggableList place="workspace">
                    <WindowTool itemArrastrado="@(sesion.herramientasutilizables.SingleOrDefault(x => x.currentPlace.Equals("workspace")))"></WindowTool>
                </DraggableList>
            </div>
            <div class="container-ot">
                <div class="output common-box-style">
                    <div class="box-title-style">
                        <span>Bandeja de Salida</span>
                    </div>
                    <DraggableList place="outputs"></DraggableList>
                </div>
                <div class="tools common-box-style">
                    <div class="box-title-style">
                        <span>HERRAMIENTAS</span>
                    </div>
                    @if (sesion.herramientasutilizables.Count == 0)
                    {
                        <div class="loader-block">
                            <div class="spinner-border" style="width: 3rem; height: 3rem;color:#ccc" role="status">
                                <span class="sr-only">Loading...</span>
                            </div>
                        </div>
                    }
                    else
                    {
                        <DraggableList place="tools"></DraggableList>
                    }
                </div>
            </div>
            <VirtualMessage message="@messageSend"></VirtualMessage>
        </dBiv>
    </CascadingValue>
    @if (expedienteseleccionado != null)
    {
        <MatDialog @bind-IsOpen="@abrirDialogo">
            <div class="modal-info-solicitudBPN">
                @if (ChildContent != null)
                {
                    @ChildContent
                }
                else
                {
                    <div>En construccion...</div>
                }
            </div>
        </MatDialog>
        <MatDialog @bind-IsOpen="@abrirDialogoEva">
            <div class="modal-info-solicitudBPN">
                @if (ChildContent != null)
                {
                    @ChildContent
                }
                else
                {
                    <div>En construccion...</div>
                }
            </div>
        </MatDialog>
    }

</div>
@code{
    [CascadingParameter(Name = "SesionUsuario")] protected Sesion sesion { get; set; }
    public List<Item> listaherramientas = new List<Item>();
    public bool abrirDialogo = false;
    public bool abrirDialogoEva = false;
    public ExpedienteBandejaDTO expedienteseleccionado = null;
    public EscrituraPublicaRDTO escrituraPublicaseleccionada = null;
    public Item currentItemDragged;
    public Bandeja bandejaUsuario = new Bandeja();
    public Usuario miusuario = new Usuario();
    public Asistente asistente = new Asistente();
    public Timer timer;
    public String messageSend = "Seleccione un expediente de la bandeja de entrada al área de trabajo para procesarlo";
    public Int32 count = 0;
    public RenderFragment ChildContent = null;
    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine(sesion.rol);
        List<ConclusionFirmaDTO> listaexpediente = new List<ConclusionFirmaDTO>();
        Usuario usuario = new Usuario();
        List<Expediente_group> lista = new List<Expediente_group>();
        //var httpResponse = await repository.Get<List<Expediente_group>>($"api/documentos/ganttexpediente?dni=70477724");
        //if (!httpResponse.Error)
        //{
        //    lista = httpResponse.Response;

        //}
        await VoiceMessage(messageSend);
    }
    public void openDialog()
    {
        if (expedienteseleccionado.documento.tipo == "SolicitudDenuncia") ChildContent =@<VerSolicitudDenuncia documento="@expedienteseleccionado.documento"></VerSolicitudDenuncia>;
        if (expedienteseleccionado.documento.tipo == "Resolucion") ChildContent = @<VerResolucion documento="@expedienteseleccionado.documento"></VerResolucion>;
        if (expedienteseleccionado.documento.tipo == "OficioBPN") ChildContent = @<VerOficioBPN documento="@expedienteseleccionado.documento"></VerOficioBPN>;
        if (expedienteseleccionado.documento.tipo == "SolicitudBPN") ChildContent = @<VerSolicitudBPN documento="@expedienteseleccionado.documento"></VerSolicitudBPN>;
        if (expedienteseleccionado.documento.tipo == "SolicitudExpedicionFirma") ChildContent = @<VerSolicitudExpedicionFirma documento="@expedienteseleccionado.documento"></VerSolicitudExpedicionFirma>;
        if (expedienteseleccionado.documento.tipo == "OficioDesignacionNotario") ChildContent = @<VerOficioDesignacionNotario documento="@expedienteseleccionado.documento"></VerOficioDesignacionNotario>;
        if (expedienteseleccionado.documento.tipo == "ConclusionFirma") ChildContent = @<VerConclusionFirma documento="@expedienteseleccionado.documento"></VerConclusionFirma>;
        if (expedienteseleccionado.documento.tipo == "EntregaExpedienteNotario") ChildContent = @<VerEntregaExpedienteNotario documento="@expedienteseleccionado.documento"></VerEntregaExpedienteNotario>;
        if (expedienteseleccionado.documento.tipo == "Dictamen") ChildContent = @<VerDictamen documento="@expedienteseleccionado.documento"></VerDictamen>;
        if (expedienteseleccionado.documento.tipo == "Apelacion") ChildContent = @<VerApelacion documento="@expedienteseleccionado.documento"></VerApelacion>;
        if (expedienteseleccionado.documento.tipo == "AperturamientoDisciplinario") ChildContent = @<VerAperturamientoDisciplinario documento="@expedienteseleccionado.documento"></VerAperturamientoDisciplinario>;
        if (expedienteseleccionado.documento.tipo == "SolicitudExpedienteNotario") ChildContent = @<VerSolicitudExpedienteNotario documento="@expedienteseleccionado.documento"></VerSolicitudExpedienteNotario>;
        if (expedienteseleccionado.documento.tipo == "ResultadoBPN") ChildContent = @<VerResultadoBPN documento="@expedienteseleccionado.documento"></VerResultadoBPN>;
        if (expedienteseleccionado.documento.tipo == "SolicitudInicial") ChildContent = @<VerSolicitudInicial documento="@expedienteseleccionado.documento"></VerSolicitudInicial>;
        abrirDialogo = true;
        StateHasChanged();
    }

    public void openDialogEva()
    {
        ChildContent =@<VerEvaluacion documento="@expedienteseleccionado.documento"></VerEvaluacion>;
        abrirDialogoEva = true;
        StateHasChanged();
    }

    public void closeDialog() { abrirDialogo = false; }

    public async Task UpdateDraggableComponents(string newCurrentPlace)
    {
        if (currentItemDragged.originPlace == "tools")
        {
            var tool = sesion.herramientasutilizables.SingleOrDefault(x => x.nombre == currentItemDragged.nombre);
            if (tool != null /*&& listaherramientas.Where(x => x.currentPlace == "workspace").Count() == 0*/)
            {
                Console.WriteLine(" Cambiando de " + tool.currentPlace + " a " + newCurrentPlace);

                tool.currentPlace = newCurrentPlace;
                sesion.herramientasutilizables[sesion.herramientasutilizables.FindIndex(ind => ind.nombre.Equals(currentItemDragged.nombre))] = tool;
                StateHasChanged();
            }
        }
        else if (currentItemDragged.originPlace == "inputs")
        {
            var tool = sesion.listaentradas.SingleOrDefault(x => x.nombre == currentItemDragged.nombre && x.cliente == currentItemDragged.cliente);
            if (tool != null /*&& listaherramientas.Where(x => x.currentPlace == "workspace").Count() == 0*/)
            {
                if (newCurrentPlace == "workspace")
                {
                    expedienteseleccionado = (ExpedienteBandejaDTO)tool.valor;
                    await GetAsistenteByExpedientId(expedienteseleccionado.idexpediente);
                }
                if (newCurrentPlace == "inputs") { expedienteseleccionado = null; }
                if (newCurrentPlace == "outputs") { expedienteseleccionado = null; }

                Console.WriteLine("Es de la  entrada papu");
                Console.WriteLine(" Cambiando de " + tool.currentPlace+" a "+ newCurrentPlace);

                

                tool.currentPlace = newCurrentPlace;
                sesion.listaentradas[sesion.listaentradas.FindIndex(ind => ind.nombre.Equals(currentItemDragged.nombre) && ind.cliente.Equals(currentItemDragged.cliente))] = tool;
                //tool.itemstatus = "InSpace";
                StateHasChanged();
            }
        }
        else if (currentItemDragged.originPlace == "outputs")
        {
            var tool = sesion.listasalidas.SingleOrDefault(x => x.nombre == currentItemDragged.nombre && x.cliente == currentItemDragged.cliente);
            if (tool != null)
            {
                if (newCurrentPlace == "workspace") { expedienteseleccionado = (ExpedienteBandejaDTO)tool.valor; }
                if (newCurrentPlace == "outputs") { expedienteseleccionado = null; }
                if (newCurrentPlace == "inputs") { expedienteseleccionado = null; }
                tool.currentPlace = newCurrentPlace;
                Console.WriteLine(" Cambiando de " + tool.currentPlace + " a " + newCurrentPlace);
                sesion.listasalidas[sesion.listasalidas.FindIndex(ind => ind.nombre.Equals(currentItemDragged.nombre) && ind.cliente.Equals(currentItemDragged.cliente))] = tool;
                StateHasChanged();
            }
        }
    }
    public void UpdateComponentBandeja(Item itemnuevo)
    {
        sesion.listasalidas.Add(itemnuevo);
        StateHasChanged();
    }
    public void UpdateDocRegistrado(Item itemnuevo)
    {
        sesion.listaentradas[sesion.listaentradas.FindIndex(ind =>
        ind.originPlace == "inputs" &&
        ind.currentPlace == "workspace")] = itemnuevo;
        //sesion.herramientasutilizables[sesion.listaentradas.FindIndex(ind => ind.currentPlace == "workspace")].currentPlace = "tools";
        StateHasChanged();
    }
    public void UpdateTools(string nombre)
    {
        var tool = sesion.herramientasutilizables.SingleOrDefault(x => x.nombre == nombre);
        tool.currentPlace = "tools";
        sesion.herramientasutilizables[sesion.herramientasutilizables.FindIndex(ind => ind.nombre.Equals(nombre))] = tool;
        StateHasChanged();
    }
    public void RemoveExpedienteSeleccionado(Item itemsalida)
    {
        sesion.listaentradas[sesion.listaentradas.FindIndex(ind => ind.currentPlace == "workspace")].currentPlace = "inputs";

        sesion.listaentradas.RemoveAll(ind => ind.nombre.Equals(itemsalida.nombre) &&
        ind.cliente.tipodocumento.Equals(itemsalida.cliente.tipodocumento) &&
        ind.cliente.numerodocumento.Equals(itemsalida.cliente.numerodocumento));

        sesion.listasalidas.Add(itemsalida);
        StateHasChanged();
    }
    public void RemoveExpedienteSeleccionadoBandejas(Item itemsalida)
    {

        Int32 index = 0;

        if (sesion.listasalidas.Exists(ind => ind.currentPlace == "workspace"))
        {
            index = sesion.listasalidas.FindIndex(ind => ind.currentPlace == "workspace");

            sesion.listasalidas.RemoveAt(index);
        }
        else if (sesion.listaentradas.Exists(ind => ind.currentPlace == "workspace"))
        {
            index = sesion.listaentradas.FindIndex(ind => ind.currentPlace == "workspace");

            sesion.listaentradas.RemoveAt(index);
        }




        //sesion.listasalidas.RemoveAll(ind => ind.nombre.Equals(itemsalida.nombre) &&
        //ind.cliente.tipodocumento.Equals(itemsalida.cliente.tipodocumento) &&
        //ind.cliente.numerodocumento.Equals(itemsalida.cliente.numerodocumento));

        StateHasChanged();
    }

    public void ChangeMessage(String messageSend)
    {
        timer.Start();
        this.messageSend = messageSend;
        StateHasChanged();
    }

    public async Task VoiceMessage(String messageSend)
    {
        await js.InvokeVoidAsync("textSpeak", messageSend);
    }

    public async Task GetAsistenteByExpedientId(String expedienteId)
    {
        var httpResponse = await repository.Get<Asistente>($"api/Asistente/getbyexpedientID?expedientID={expedienteId}");
        if (!httpResponse.Error)
        {
            asistente = httpResponse.Response;
            String message = asistente.pasos.documentos.Find(x => x.tipo == asistente.tipodocumento).pasos.ElementAt(asistente.paso).subpaso.ElementAt(asistente.subpaso).descripcion;
            String submessage = asistente.pasos.documentos.Find(x => x.tipo == asistente.tipodocumento).pasos.ElementAt(asistente.paso).descripcion;

            Task voiceMessage = VoiceMessage(submessage);

            ChangeMessage(submessage);

            await voiceMessage;

            await UpdatePasoAndSubPaso(asistente.paso, asistente.subpaso, asistente.tipodocumento);
        }
    }

    public async Task UpdatePasoAndSubPaso(Int32 paso, Int32 subpaso, String tipodocumento)
    {

        Int32 dias = asistente.pasos.documentos.Find(x => x.tipo == tipodocumento).pasos.ElementAt(paso).dias;

        PasoDTO pasoDTO = new PasoDTO();
        pasoDTO.paso = paso;
        pasoDTO.subpaso = subpaso;
        pasoDTO.tipodocumento = tipodocumento;
        pasoDTO.idexpediente = asistente.idexpediente;
        pasoDTO.fechainicio = DateTime.UtcNow.AddHours(-5);
        pasoDTO.fechafin = null;
        pasoDTO.fechalimite = DateTime.UtcNow.AddHours(-5).AddDays(dias);

        asistente.pasos.documentos.Find(x => x.tipo == tipodocumento).pasos.ElementAt(paso).fechainicio = pasoDTO.fechainicio;
        asistente.pasos.documentos.Find(x => x.tipo == tipodocumento).pasos.ElementAt(paso).fechalimite = pasoDTO.fechalimite;
        asistente.paso = paso;
        asistente.subpaso = subpaso;
        asistente.tipodocumento = tipodocumento;

        var httpResponse = await repository.Put<Asistente, PasoDTO>($"api/Asistente/update", pasoDTO);
    }

    public async Task<String> UpdateSolicitudInitial(Int32 paso, Int32 subpaso, String tipodocumento, String nombreExpediente, Int32 pasoAntiguo)
    {
        String messageCambio = "";
        asistente.pasos.documentos.Find(x => x.tipo == asistente.tipodocumento).pasos.ElementAt(pasoAntiguo).fechafin = DateTime.UtcNow.AddHours(-5);
        asistente.paso = paso;
        asistente.subpaso = subpaso;
        asistente.tipodocumento = tipodocumento;

        var httpResponse = await repository.Put<Asistente, Asistente>($"api/Asistente/updateinicial?nombreExpediente={nombreExpediente}", asistente);
        if (!httpResponse.Error)
        {

            asistente = httpResponse.Response;
            messageCambio = asistente.pasos.documentos.Find(x => x.tipo == asistente.tipodocumento).pasos.ElementAt(asistente.paso).descripcion;

        }
        return messageCambio;
    }

    public async Task UpdatePasoAndSubPasoNormal(Int32 paso, Int32 subpaso, String tipodocumento)
    {

        Int32 dias = asistente.pasos.documentos.Find(x => x.tipo == tipodocumento).pasos.ElementAt(paso).dias;

        PasoDTO pasoDTO = new PasoDTO();
        pasoDTO.paso = paso;
        pasoDTO.subpaso = subpaso;
        pasoDTO.tipodocumento = tipodocumento;
        pasoDTO.idexpediente = asistente.idexpediente;

        asistente.paso = paso;
        asistente.subpaso = subpaso;
        asistente.tipodocumento = tipodocumento;

        var httpResponse = await repository.Put<Asistente, PasoDTO>($"api/Asistente/updateNormal", pasoDTO);
    }
    public async Task UpdatePasoAndSubPasoFinnally(Int32 paso, Int32 subpaso, String tipodocumento, Int32 pasoantiguo, String tipoDocumentoAntiguo)
    {

        Int32 dias = asistente.pasos.documentos.Find(x => x.tipo == tipodocumento).pasos.ElementAt(paso).dias;

        PasoDTO pasoDTO = new PasoDTO();
        pasoDTO.paso = paso;
        pasoDTO.subpaso = subpaso;
        pasoDTO.tipodocumento = tipodocumento;
        pasoDTO.idexpediente = asistente.idexpediente;
        pasoDTO.fechafin = DateTime.UtcNow.AddHours(-5);
        pasoDTO.pasoantiguo = pasoantiguo;
        pasoDTO.tipodocumentoAntiguo = tipoDocumentoAntiguo;

        asistente.pasos.documentos.Find(x => x.tipo == tipodocumento).pasos.ElementAt(paso).fechafin = pasoDTO.fechafin;
        asistente.paso = paso;
        asistente.subpaso = subpaso;
        asistente.tipodocumento = tipodocumento;

        var httpResponse = await repository.Put<Asistente, PasoDTO>($"api/Asistente/updateFinally", pasoDTO);
    }
}

