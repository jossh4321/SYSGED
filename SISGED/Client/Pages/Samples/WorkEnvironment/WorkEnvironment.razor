@page "/WorkFlowProto"
@layout MainLayout
@inject HttpClient Http
@inject IRepository repository
@inject IJSRuntime js
@inject ISwalFireMessage swalfire
<style>
    div.input {
        flex-grow: 1;
        height: inherit;
        text-align: center;
    }

    div.output {
        flex-grow: 1;
        text-align: center;
    }

    .container-ot {
        flex-grow: 1;
        display: flex;
        flex-direction: column;
        flex-wrap: wrap;
        height: inherit;
    }

    div.workspace {
        border-left: 0px;
        border-right: 0px;
        flex-grow: 10;
        text-align: center;
        display: flex;
        max-height: 100%;
        flex-direction: column;
    }

    div.tools {
        border-top: 0px;
        flex-grow: 1;
        text-align: center;
        display: flex;
        flex-direction: column;
    }

    .common-box-style {
        border: 3px solid #808080;
        background-color: #1a1a1a;
    }

    .wfe-container {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        justify-content: space-around;
        height: 550px;
    }

    .box-title-style {
        background-color: black;
        margin: 6px 4px 10px 4px;
        border: 2px solid #4d4d4d;
        border-radius: 7px 7px 0px 0px;
        flex-basis: 9%;
    }

        .box-title-style span {
            color: #808080;
            font-size: 20px;
        }

    .work-box-title-style span {
        color: #808080;
        font-size: 23px;
    }

    .work-box-title-style {
        background-color: black;
        margin: 6px 0px 0px 0px;
        padding: 3px;
        border: 2px solid #808080;
        text-align: center;
        border-bottom: none;
        border-radius: 8px 8px 0px 0px;
    }

    .loader-block {
        display: flex;
        flex-basis: 91%;
        width: inherit;
        height: inherit;
        background-color: #4d4d4d;
        justify-content: center;
        justify-content: center;
        align-items: center;
        background: #1a1a1a;
    }
    /* Estilos del dragableList*/
    .div-style {
        display: flex;
        flex-direction: column;
        flex-basis: 100%;
        max-height: 100%;
        min-height: 100%;
        overflow-y: auto;
        overflow-x: hidden;
    }

    .div-view {
        display: flex;
        flex-basis: 100%;
        flex-direction: column;
        overflow: auto;
    }

    .div-tool-list {
        flex-basis: 15%;
    }

    /*Estilos del dragableItem*/

    .tool-container {
        display: flex;
        padding: 6px 5px 6px 15px;
        color: white;
        text-align: left;
        justify-content: left;
        flex-direction: row;
        align-items: center;
    }

    .tool-name {
        font-size: 16px;
        font-family: sans-serif;
    }

    .li-tool {
        list-style: none;
    }

    .li-drag-style {
        border: 2px solid #808080 !important;
        margin: 6px;
        border-radius: 15px;
        background-color: #404040 !important;
        transition: 300ms all;
    }

        .li-drag-style:hover {
            transform: scale(1.05);
            border: 2px solid #0066ff !important;
        }

            .li-drag-style:hover .tool-name, .li-drag-style:hover i.material-icons {
                transform: scale(1);
                color: #0066ff !important;
            }

    .tool-name {
        display: block;
        margin: 0px 0px 0px 7px;
        color: #b3b3b3;
    }

    i.material-icons {
        color: #b3b3b3 !important;
    }

    .tool-sub-container {
        display: flex;
        flex-direction: column;
    }

    .tool-description {
        display: block;
        margin: 0px 0px 0px 7px;
        color: #b3b3b3;
    }

    .tool-client-name {
        display: block;
        margin: 0px 0px 0px 7px;
        color: #b3b3b3;
    }

    .modal-info-solicitudBPN {
        display: flex;
        flex-direction: column;
        /*height: 700px;*/
        width: 500px;
        background-color: #808080;
    }
</style>
<div style="flex-basis:100%">
    <div class="work-box-title-style">
        <span>Area de Trabajo Especializada - Usuario: @sesion.usuario.datos.nombre @sesion.usuario.datos.apellido</span>
    </div>
    <CascadingValue Value="this">
        <div class="wfe-container">
            <div class="input common-box-style">
                <div class="box-title-style">
                    <span>Bandeja de Entrada</span>
                </div>
                <DraggableList place="inputs">
                </DraggableList>
            </div>
            <div class="workspace common-box-style">
                <DraggableList place="workspace">
                    <WindowTool itemArrastrado="@(sesion.herramientasutilizables.SingleOrDefault(x => x.currentPlace.Equals("workspace")))"></WindowTool>
                </DraggableList>
            </div>
            <div class="container-ot">
                <div class="output common-box-style">
                    <div class="box-title-style">
                        <span>Bandeja de Salida</span>
                    </div>
                    <DraggableList place="outputs"></DraggableList>
                </div>
                <div class="tools common-box-style">
                    <div class="box-title-style">
                        <span>HERRAMIENTAS</span>
                    </div>
                    @if (sesion.herramientasutilizables.Count == 0)
                    {
                        <div class="loader-block">
                            <div class="spinner-border" style="width: 3rem; height: 3rem;color:#ccc" role="status">
                                <span class="sr-only">Loading...</span>
                            </div>
                        </div>
                    }
                    else
                    {
                        <DraggableList place="tools"></DraggableList>
                    }
                </div>
            </div>
        </div>
    </CascadingValue>
    @if (expedienteseleccionado != null)
    {
    <MatDialog @bind-IsOpen="@abrirDialogo">
        <div class="modal-info-solicitudBPN">
            @if (expedienteseleccionado.documento.tipo.Equals("OficioDesignacionNotario"))
            {
                <VerOficioDesignacionNotario iddocumento="@expedienteseleccionado.documento.id"></VerOficioDesignacionNotario>
            }
            else if (expedienteseleccionado.documento.tipo.Equals("ConclusionFirma"))
            {
                <!--VerConclusionFirma iddocumento="expedienteseleccionado.documento.id"> </!--VerConclusionFirma-->

            }
            else
            {

                <div>En construccion...</div>
            }

        </div>
    </MatDialog>
    }

</div>
@code {
    [CascadingParameter(Name = "SesionUsuario")] protected Sesion sesion { get; set; }
    public List<Item> listaherramientas = new List<Item>();
    public bool abrirDialogo = false;
    public ExpedienteBandejaDTO expedienteseleccionado = null;
    public EscrituraPublicaRDTO escrituraPublicaseleccionada = null;
    public Item currentItemDragged;
    public Bandeja bandejaUsuario = new Bandeja();
    public Usuario miusuario = new Usuario();
    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("INICIE: WorkEnvironment");
        List<ConclusionFirmaDTO> listaexpediente = new List<ConclusionFirmaDTO>();
        Usuario usuario = new Usuario();
        /*var httpResponse = await repository.Get<Usuario>($"api/usuarios/id?id={sesion.usuario.}");
        if (!httpResponse.Error)
        {
            miusuario = (Usuario)httpResponse.Response;
            Console.WriteLine("algo bien");
        }
        else
        {
            Console.WriteLine("algo mal");
        }*/
        /*var httpResponse = await repository.Get <List<Documento>>("api/documentos");
        if (!httpResponse.Error)
        {
            List<Documento> docs = new List<Documento>();
            foreach(Documento doc in docs)
            {
                Console.WriteLine("valor: "+doc.id);
            }
        }
        else
        {
            Console.WriteLine("algo mal");
        }*/
    }
    public void openDialog() { abrirDialogo = true; StateHasChanged(); }
    public void closeDialog() { abrirDialogo = false; }
    public void UpdateDraggableComponents(string newCurrentPlace)
    {
        if(currentItemDragged.originPlace == "tools")
        {
            var tool = sesion.herramientasutilizables.SingleOrDefault(x => x.nombre == currentItemDragged.nombre);
            if (tool != null /*&& listaherramientas.Where(x => x.currentPlace == "workspace").Count() == 0*/)
            {
                Console.WriteLine("ESTOY EN EL CAMBIO => ORIGIN: " + tool.originPlace);

                tool.currentPlace = newCurrentPlace;
                sesion.herramientasutilizables[sesion.herramientasutilizables.FindIndex(ind => ind.nombre.Equals(currentItemDragged.nombre))] = tool;
                StateHasChanged();
            }
        }
        else if(currentItemDragged.originPlace == "inputs")
        {
            var tool = sesion.listaentradas.SingleOrDefault(x => x.nombre == currentItemDragged.nombre && x.cliente == currentItemDragged.cliente);
            if (tool != null /*&& listaherramientas.Where(x => x.currentPlace == "workspace").Count() == 0*/)
            {
                if (newCurrentPlace == "workspace") {
                    expedienteseleccionado = (ExpedienteBandejaDTO)tool.valor;
                }
                if (newCurrentPlace == "inputs") { expedienteseleccionado = null; }
                if (newCurrentPlace == "outputs") { expedienteseleccionado = null; }
                Console.WriteLine("ESTOY EN EL CAMBIO => ORIGIN: " + tool.originPlace);

                tool.currentPlace = newCurrentPlace;
                sesion.listaentradas[sesion.listaentradas.FindIndex(ind => ind.nombre.Equals(currentItemDragged.nombre) && ind.cliente.Equals(currentItemDragged.cliente))] = tool;
                StateHasChanged();
            }
        }
        else if(currentItemDragged.originPlace == "outputs")
        {
            var tool = sesion.listasalidas.SingleOrDefault(x => x.nombre == currentItemDragged.nombre && x.cliente == currentItemDragged.cliente);
            if(tool != null)
            {
                if(newCurrentPlace == "workspace") { expedienteseleccionado = (ExpedienteBandejaDTO)tool.valor; }
                if(newCurrentPlace == "outputs") { expedienteseleccionado = null; }
                if (newCurrentPlace == "inputs") { expedienteseleccionado = null; }
                tool.currentPlace = newCurrentPlace;
                sesion.listasalidas[sesion.listasalidas.FindIndex(ind => ind.nombre.Equals(currentItemDragged.nombre) && ind.cliente.Equals(currentItemDragged.cliente))] = tool;
                StateHasChanged();
            }
        }
    }
    public void UpdateComponentBandeja(Item itemnuevo)
    {
        sesion.listasalidas.Add(itemnuevo);
        StateHasChanged();
    }
    public void UpdateDocRegistrado(Item itemnuevo)
    {
        sesion.listaentradas[sesion.listaentradas.FindIndex(ind =>
        ind.originPlace=="inputs" &&
        ind.currentPlace== "workspace")] = itemnuevo;
        //sesion.herramientasutilizables[sesion.listaentradas.FindIndex(ind => ind.currentPlace == "workspace")].currentPlace = "tools";
        StateHasChanged();
    }
    public void UpdateTools(string nombre)
    {
        var tool = sesion.herramientasutilizables.SingleOrDefault(x => x.nombre == nombre);
        tool.currentPlace = "tools";
        sesion.herramientasutilizables[sesion.herramientasutilizables.FindIndex(ind => ind.nombre.Equals(nombre))] = tool;
        StateHasChanged();
    }
    /* 
    public ExpedienteDTO expedientedto1 = new ExpedienteDTO()
    {
        id = "111",
        tipo = "Denuncia",
        cliente =
        {
            nombre="Pedro Paredes",
            numerodocumento="",
            tipodocumento="Pedro Paredes",
        },
        fechainicio = DateTime.Now,
        fechafin = null,
        documentos = new List<DocumentoExpediente>()
        {
            new DocumentoExpediente(){indice=1,iddocumento="1234",tipo="SolicitudDenuncia",fechacreacion=DateTime.Now,fechaexceso=DateTime.Now.AddDays(10),fechademora=null}
        },
        documentosobj = new List<Documento>(),
        derivaciones = new List<Derivacion>(),
        estado = "pendiente"
    };

    public ExpedienteDTO expedientedto2 = new ExpedienteDTO()
    {
        id = "222",
        tipo = "Denuncia",
        cliente =
        {
            nombre="Pedro Paredes",
            numerodocumento="",
            tipodocumento="Pedro Paredes",
        },
        fechainicio = DateTime.Now,
        fechafin = null,
        documentos = new List<DocumentoExpediente>()
        {
            new DocumentoExpediente(){indice=1,iddocumento="1234",tipo="SolicitudDenuncia",fechacreacion=DateTime.Now,fechaexceso=DateTime.Now.AddDays(10),fechademora=null}
        },
        documentosobj = new List<Documento>(),
        derivaciones = new List<Derivacion>(),
        estado = "pendiente"
    };

    public ExpedienteDTO expedientedto3 = new ExpedienteDTO()
    {
        id = "333",
        tipo = "Denuncia",
        cliente =
        {
            nombre="Pedro Paredes",
            numerodocumento="",
            tipodocumento="Pedro Paredes",
        },
        fechainicio = DateTime.Now,
        fechafin = null,
        documentos = new List<DocumentoExpediente>()
        {
            new DocumentoExpediente(){indice=1,iddocumento="1234",tipo="SolicitudDenuncia",fechacreacion=DateTime.Now,fechaexceso=DateTime.Now.AddDays(10),fechademora=null}
        },
        documentosobj = new List<Documento>(),
        derivaciones = new List<Derivacion>(),
        estado = "pendiente"
    };
    */
}
