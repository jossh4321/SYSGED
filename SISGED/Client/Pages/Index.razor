@page "/"
@inject HttpClient Http
@inject IRepository  repository
<!--attribute [Authorize(Roles="admin")]-->
@attribute [Authorize(Roles = "admin")]
@layout MainLayout
<style>
    * {
        color: white
    }
</style>
<h1>Hello, World</h1>
Welcome to your new app.
<MatAutocompleteList Items="@options" TItem="string" Label="Pick one"></MatAutocompleteList>
<button @onclick="guardarPersona">prueba de POST</button>
<button @onclick="modificarPersona">prueba de PUT</button>

<PaginationBootstrap currentPage="paginaActual" selectedPage="paginaSeleccionada"
                     totalPages="paginasTotales"></PaginationBootstrap>
<ListadoGenerico Listado="listapersonas">
    <HayRegistrosCompleto>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Funciones</th>
                    <th>Nombre</th>
                    <th>Edad</th>
                    <th>Numero Doc.</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in listapersonas)
                {
                    <tr>
                        <td>
                            <AuthorizeView Roles="admin">
                                <Authorized>
                                    <a class="btn btn-success">Editar</a>
                                    <button class="btn btn-danger">Borrar</button>
                                </Authorized>
                                <NotAuthorized>
                                    Vista Protegida
                                </NotAuthorized>
                            </AuthorizeView>
                        </td>
                        <td>
                            @item.nombre @item.apellido
                        </td>
                        <td>@item.edad.ToString()</td>
                        <td>@item.numerodocumento.ToString()</td>
                    </tr>
                }
            </tbody>
        </table>
    </HayRegistrosCompleto>
</ListadoGenerico>
@code{
    List<Persona> listapersonas = new List<Persona>();
    List<Usuario> listausuarios = new List<Usuario>();
    [CascadingParameter]
    private Task<AuthenticationState>
        authenticationState
    { get; set; }
    private int paginaActual = 1;
    private int paginasTotales;
    string[] options = new[]
            {
                "One",
                "Two",
                "Three"
            };

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationState;
        var usuario = authState.User;
        if (usuario.Identity.IsAuthenticated)
        {
            Console.WriteLine("Usuario autenticado");
        }
        else
        {
            Console.WriteLine("Usuario NO autenticado");
        }
        await cargar();
        //await pruebausuarios();

    }
    private async Task pruebausuarios()
    {
        var httpResponse = await repository.Get<List<Usuario>>($"api/usuarios");
        if (!httpResponse.Error)
        {
            listausuarios = httpResponse.Response;
            foreach (var usuario in listausuarios)
            {
                Console.WriteLine($"nombreusu:{usuario.usuario}, clave: {usuario.clave}");
            }

        }
    }


    private async Task paginaSeleccionada(int pagina)
    {
        paginaActual = pagina;
        await cargar(pagina);
    }
    private async Task cargar(int pagina = 1)
    {
        var httpResponse = await repository.Get<List<Persona>>($"api/personas/paginated?page={pagina}");
        if (!httpResponse.Error)
        {
            listapersonas = httpResponse.Response;
            var count = httpResponse.HttpResponseMessage.Headers.GetValues("conteo").FirstOrDefault();
            paginasTotales = int.Parse(httpResponse.HttpResponseMessage.Headers.GetValues("totalPaginas").FirstOrDefault());
        }
        else
        {
            Console.WriteLine(httpResponse.HttpResponseMessage.StatusCode);
        }
    }
    /*var httpResponse = await repository.Get<List<Persona>>("api/personas/paginated");
        if (!httpResponse.Error)
        {
            listapersonas = httpResponse.Response;
            foreach (var persona in listapersonas)
            {
                Console.WriteLine($"{persona.nombre} {persona.apellido} => dni: {persona.numerodocumento}");
            }
        }*/



    public async Task guardarPersona()
    {
        Persona persona = new Persona()
        {
            nombre = "Josue",
            apellido = "Colombo",
            edad = 900,
            tipodocumento = "DNI",
            numerodocumento = "74856434",
        };
        var httpResponse = await repository.Post<Persona, Persona>("api/personas", persona);
        if (httpResponse.Error)
        {
            Console.WriteLine("Algo ha sucedido");
        }
        else
        {
            persona = (Persona)httpResponse.Response;
            Console.WriteLine($"Todo bien[POST]=> Nombre: {persona.nombre} | ID: {persona.id}");
        }
    }
    public async Task modificarPersona()
    {
        Persona persona = new Persona()
        {
            id = "5e8236cba608e13a741aa23c"
        };
        var httpResponse = await repository.Put<Persona, Persona>("api/personas", persona);
        if (httpResponse.Error)
        {
            Console.WriteLine("Algo ha sucedido");
        }
        else
        {
            persona = (Persona)httpResponse.Response;
            Console.WriteLine($"Todo bien[PUT]=> Nombre: {persona.nombre} | ID: {persona.id}");
        }
    }
}
