@using System.IO
@using Blazor.FileReader
@inject IFileReaderService fileReaderService
<style>
    .img {
        max-width: 340px;
    }

    .img-container {
        width: 350px;
        max-width: 350px;
        border: 2px dashed #ccc;
    }

    .inputfile {
        width: 0.1px;
        height: 0.1px;
        opacity: 0;
        overflow: hidden;
        position: absolute;
        z-index: -1;
    }

    .not-selected {
        display: block;
        background: #ff3333;
        border: 2px solid black;
        border-radius: 4px;
        margin: 10px;
    }

    .selected {
        display: block;
        background: #00b33c;
        border: 2px solid black;
        border-radius: 4px;
        margin: 10px;
    }

    div.not-selected:hover, div.selected:hover {
        transform: scale(1.05,1.05);
    }
</style>
<div>
    <div class="form-group">
        <input type="file" name="file" id="file" class="inputfile" @ref="inputElement" @onchange="ImageFileSelected"
               accept=".pdf" />
        @if (string.IsNullOrEmpty(datosFile))
        {
            <label class="@estilo" for="file">@estado</label>
        }
        else
        {
            <label class="@estiloseleccionado" for="file">@estadoseleccionado</label>
        }
    </div>
</div>
@code {

    [Parameter] public string datosFile { get; set; }
    [Parameter] public string ImagenTemporal { get; set; }
    [Parameter] public EventCallback<string> archivoSeleccionado { get; set; }
    private string imagenBase64;
    public string estado = "Seleccione un Archivo";
    public string estilo = "not-selected";
    public string estadoseleccionado = "Archivo seleccionado";
    public string estiloseleccionado = "selected";
    ElementReference inputElement;

    async Task ImageFileSelected()
    {
        foreach (var file in await fileReaderService
            .CreateReference(inputElement)
            .EnumerateFilesAsync())
        {
            using (MemoryStream memoryStream = await file.CreateMemoryStreamAsync(4 * 1024))
            {
                var fileinfo = await file.ReadFileInfoAsync();
                //Console.WriteLine($"Archivo seleccionado: {fileinfo.Name}");

                var bytesImagen = new byte[memoryStream.Length];
                memoryStream.Read(bytesImagen, 0, (int)memoryStream.Length);
                imagenBase64 = Convert.ToBase64String(bytesImagen);
                estilo = imagenBase64 != null ? estiloseleccionado : estilo;
                estadoseleccionado = $"Archivo seleccionado: {fileinfo.Name}";
                estado = imagenBase64 != null ? estadoseleccionado : estado;
                await archivoSeleccionado.InvokeAsync(imagenBase64);
                ImagenTemporal = null;
                StateHasChanged();
            }
        }
    }
}
