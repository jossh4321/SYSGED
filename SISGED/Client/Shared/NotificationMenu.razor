@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
<style>
    .clase1{
    }
</style>
<MatCard Style="width:352px;background-color:rgb(68, 68, 68);">
    <span style="display: block;font-size: 12px;color: rgba(255, 255, 255, 0.54);font-family: sans-serif;padding:16px">
        Tienes 5 nuevas notificaciones
    </span>
    <MatDivider Style="margin:0px"></MatDivider>
    <MatListItem Class="notification-item-style">
        <div class="notification-avatar">
            <span style="font-size:19px;height:40px;line-height:40px;color:rgb(255, 255, 255)">AC</span>
        </div>
        <div style="display:inline-block;">
            <span class="notification-sender">Anderley Candela</span>
            <span class="notificatio-summary">Conflictos en el Merge</span>
        </div>
        <div style="display:inline-block;">
            <span style="display:block;
                                                        font-size:12px;
                                                        color:rgba(255, 255, 255, 0.54);
                                                        margin-left:70px;
                                                        font-family:sans-serif;vertical-align:middle">justo ahora</span>
        </div>
    </MatListItem>
    <MatDivider Style="margin:0px"></MatDivider>
    <MatListItem Class="notification-item-style">
        <div class="notification-avatar">
            <span style="font-size:19px;height:40px;line-height:40px;color:rgb(255, 255, 255)">JP</span>
        </div>
        <div style="display:inline-block">
            <span class="notification-sender">Jose Paredes</span>
            <span class="notificatio-summary">Ambiguedad de CUS</span>
        </div>
        <div style="display:inline-block;">
            <span style="display:block;
                                                        font-size:12px;
                                                        color:rgba(255, 255, 255, 0.54);
                                                        margin-left:70px;
                                                        font-family:sans-serif;vertical-align:middle">justo ahora</span>
        </div>
    </MatListItem>
    <MatDivider Style="margin:0px"></MatDivider>
    <MatListItem Class="notification-item-style">
        <div class="notification-avatar">
            <span style="font-size:19px;height:40px;line-height:40px;color:rgb(255, 255, 255)">JP</span>
        </div>
        <div style="display:inline-block">
            <span class="notification-sender">Piero Lavado</span>
            <span class="notificatio-summary">Despliegue V1.5 exitoso</span>
        </div>
        <div style="display:inline-block;">
            <span style="display:block;
                                                        font-size:12px;
                                                        color:rgba(255, 255, 255, 0.54);
                                                        margin-left:70px;
                                                        font-family:sans-serif;vertical-align:middle">justo ahora</span>
        </div>
    </MatListItem>
    <MatDivider Style="margin:0px"></MatDivider>
    <MatListItem Class="notification-item-style">
        <div class="notification-avatar">
            <span style="font-size:19px;height:40px;line-height:40px;color:rgb(255, 255, 255)">JL</span>
        </div>
        <div style="display:inline-block">
            <span class="notification-sender">Johan Lobaton</span>
            <span class="notificatio-summary">ECUS Finalizados</span>
        </div>
        <div style="display:inline-block;">
            <span style="display:block;
                                                        font-size:12px;
                                                        color:rgba(255, 255, 255, 0.54);
                                                        margin-left:70px;
                                                        font-family:sans-serif;vertical-align:middle">Hace 10 min</span>
        </div>
    </MatListItem>
    <MatDivider Style="margin:0px"></MatDivider>
    <MatListItem Class="notification-item-style">
        <div class="notification-avatar">
            <span style="font-size:19px;height:40px;line-height:40px;color:rgb(255, 255, 255)">JC</span>
        </div>
        <div style="display:inline-block">
            <span class="notification-sender">Josue Colombo</span>
            <span class="notificatio-summary">JWT Auth finalizada</span>
        </div>
        <div style="display:inline-block;">
            <span style="display:block;
                                                        font-size:12px;
                                                        color:rgba(255, 255, 255, 0.54);
                                                        margin-left:70px;
                                                        font-family:sans-serif;vertical-align:middle">hace 5 min</span>
        </div>
    </MatListItem>
    <MatDivider Style="margin:0px"></MatDivider>
    <div style="align-content:center;padding:16px,0px;margin-top:8px;margin-bottom:8px;">
        <MatButton Dense="true" Style="color:rgb(255, 255, 255);margin-left:16px;
                                            background-color:rgb(68, 68, 68);">VER TODOS LOS MENSAJES</MatButton>
    </div>
</MatCard>

@code {

    public string nombredeusuario = "";
    public bool disabled = false;
    public class Message
    {
        public string message { get; set; }
        public string connectionId { get; set; }
        public string sender { get; set; }
    }


    private HubConnection _hubConnection;
    //private List<string> _messages = new List<string>();
    private List<Message> _messages = new List<Message>();
    private string _messageInput;

    public async Task connect()
    {

        _hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            Message chatMessage = new Message()
            {
                message = encodedMsg,
                connectionId = _hubConnection.ConnectionId,
                sender = user
            };
            _messages.Add(chatMessage);
            StateHasChanged();
        });

        _hubConnection.On<string>("SomeoneJoinRoom", (user) =>
        {
            var someoneJoinMessage = $"el Usuario {user}, ha ingresado al Chat";
            Message chatMessage = new Message()
            {
                message = someoneJoinMessage,
                connectionId = _hubConnection.ConnectionId,
                sender = "system"
            };
            _messages.Add(chatMessage);
            StateHasChanged();
        });
        _hubConnection.On<string>("SomeoneLeftRoom", (user) =>
        {
            var someoneLeftMessage = $"el Usuario {user}, ha salido del Chat";
            Message chatMessage = new Message()
            {
                message = someoneLeftMessage,
                connectionId = _hubConnection.ConnectionId,
                sender = "system"
            };
            _messages.Add(chatMessage);
            StateHasChanged();
        });
        await _hubConnection.StartAsync();
        await ConnectToRoom();
        disabled = true;
    }

    public async Task disconnect()
    {
        await DisconnectToRoom();
        await _hubConnection.DisposeAsync();
        disabled = false;
    }
    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chatHub"))
            .Build();

        /*_hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            _messages.Add(encodedMsg);
            StateHasChanged();
        });

        await _hubConnection.StartAsync();*/
    }
    Task DisconnectToRoom() =>
        _hubConnection.SendAsync("DisconnectToRoom", _hubConnection.ConnectionId, nombredeusuario);
    Task ConnectToRoom() =>
        _hubConnection.SendAsync("ConnectToRoom", _hubConnection.ConnectionId, nombredeusuario);
    Task Send() =>
        _hubConnection.SendAsync("SendMessage", nombredeusuario, _messageInput);

    public bool IsConnected =>
        _hubConnection.State == HubConnectionState.Connected;



}
