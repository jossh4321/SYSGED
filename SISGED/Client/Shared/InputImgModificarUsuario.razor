@page  "/imagen"
@using System.IO
@using Blazor.FileReader
@inject IFileReaderService fileReaderService
<style>
    .img {
        max-width: 340px;
    }

    .img-container {
        width: 350px;
        max-width: 350px;
        border: 2px dashed #ccc;
    }
</style>
<div>
    <img  class src="https://www.softzone.es/app/uploads-softzone.es/2018/04/guest.png" width="300px" height="300px" alt="imgf" />
    <label>@Label</label>
    <div>
        <input type="file" @ref="inputElement" @onchange="ImageFileSelected"
               accept=".jpg,.jpeg,.png" />
    </div>
</div>
<div>
    <!--Cuando el usuario seleccione la imagen-->
    @if (imagenBase64 != null)
    {
        <div class="img-container">
            <div>
                <img src="data:image/jpeg;base64, @imagenBase64"
                      width="300px" height="300px"
                     class="img" />
            </div>
        </div>
    }
    <!--modo de edicion, imagen proviene del servidor de imagenes-->
    @if (ImagenTemporal != null)
    {
        <div class="img-container">
            <div>
                <img src="@ImagenTemporal"
                     class="img" />
            </div>
        </div>
    }
</div>
@code {

 
    [Parameter] public string Label { get; set; } = "Cambiar Foto de Perfil";
    [Parameter] public string ImagenTemporal { get; set; }
    [Parameter] public EventCallback<string> ImagenSeleccionada { get; set; }
    private string imagenBase64;
    ElementReference inputElement;
    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Valor desde el componente: " + ImagenTemporal);
    }

    async Task ImageFileSelected()
    {
        foreach (var file in await fileReaderService
            .CreateReference(inputElement)
            .EnumerateFilesAsync())
        {
            using (MemoryStream memoryStream = await file.CreateMemoryStreamAsync(4 * 1024))
            {
                var bytesImagen = new byte[memoryStream.Length];
                memoryStream.Read(bytesImagen, 0, (int)memoryStream.Length);
                imagenBase64 = Convert.ToBase64String(bytesImagen);
                await ImagenSeleccionada.InvokeAsync(imagenBase64);
                ImagenTemporal = null;
                Console.WriteLine(ImagenTemporal);
                StateHasChanged();
            }
        }
    }
}
