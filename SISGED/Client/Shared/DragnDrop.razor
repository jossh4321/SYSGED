@using System.IO
@using Blazor.FileReader
@inject IFileReaderService fileReaderService

<style>
    .@dropTargetClass {
        display: block;
        padding: 20px;
        margin-bottom: 10px;
        border: 1px dashed black;
        border-radius: 5px;
        position: relative;
    }

    .@dropTargetDragClass {
        border-color: orangered;
        font-weight: bold;
    }

    input.clickable {
        position: absolute;
        width: 100%;
        height: 100%;
        opacity: 0;
        margin-top: -20px;
        margin-left: -20px;
        cursor: pointer;
    }
    .RedText,
    .RedText:hover {
        color: red;
    }
</style>

<div class="@IpDropClass">
    <input type="file"
           class="clickable"
           @ref=dropTargetInput
           @onchange="OnInputChange"
           @ondragenter=OnIpDragEnter
           @ondragleave=OnIpDragLeave
           multiple />
    Arrastre los archivos aquí o haga clic en mí

    @foreach (var fileInfo in IpFileList)
    {
        <br />@fileInfo.Name
    }
</div>


@*<button @onclick="ReadClick" class="btn btn-primary">Read file</button>
<button @onclick="ClearClick" class="btn btn-primary">Clear</button>*@


@code {
    [Parameter] public string Label { get; set; } = "Documento";
    [Parameter] public string ImagenTemporal { get; set; }
    [Parameter] public EventCallback<string> ImagenSeleccionada { get; set; }
    [Parameter] public EventCallback<string> FileNames { get; set; }
    private string imagenBase64;
    ElementReference dropTargetElement;
    ElementReference dropTargetInput;
    IFileReaderRef dropReference;
    IFileReaderRef ipReference;
    bool Additive { get; set; }

    const string dropTargetDragClass = "droptarget-drag";
    const string dropTargetClass = "droptarget";

    private List<string> _dropClasses = new List<string>() { dropTargetClass };
    private List<string> _ipdropClasses = new List<string>() { dropTargetClass };

    string DropClass => string.Join(" ", _dropClasses);
    string IpDropClass => string.Join(" ", _ipdropClasses);

    string Output { get; set; }
    List<IFileInfo> DropFileList { get; } = new List<IFileInfo>();
    List<IFileInfo> IpFileList { get; } = new List<IFileInfo>();

    protected override async Task OnAfterRenderAsync(bool isFirstRender)
    {
        if (isFirstRender)
        {
            dropReference = fileReaderService.CreateReference(dropTargetElement);
            ipReference = fileReaderService.CreateReference(dropTargetInput);
            await dropReference.RegisterDropEventsAsync();
        }
    }

    public async Task OnAdditiveChange(ChangeEventArgs e)
    {
        Additive = (bool)e.Value;
        StateHasChanged();
        await dropReference.UnregisterDropEventsAsync();
        await dropReference.RegisterDropEventsAsync(Additive);
    }

    public async Task ClearDrop()
    {
        await dropReference.ClearValue();
        await this.RefreshDropFileList();
    }

    public async Task ClearClick()
    {
        await ipReference.ClearValue();
        await this.RefreshIpFileList();
    }

    public void OnDragEnter(EventArgs e)
    {
        _dropClasses.Add(dropTargetDragClass);
    }

    public void OnDragLeave(EventArgs e)
    {
        _dropClasses.Remove(dropTargetDragClass);
    }

    public void OnIpDragEnter(EventArgs e)
    {
        _ipdropClasses.Add(dropTargetDragClass);
    }

    public void OnIpDragLeave(EventArgs e)
    {
        _ipdropClasses.Remove(dropTargetDragClass);
    }

    public async Task OnDrop(EventArgs e)
    {
        Output += "Dropped a file.";
        _dropClasses.Remove(dropTargetDragClass);
        this.StateHasChanged();
        await this.RefreshDropFileList();
    }

    public async Task OnInputChange(EventArgs e)
    {
        Output += "Dropped a file on the Clickable.";
        _ipdropClasses.Remove(dropTargetDragClass);
        this.StateHasChanged();
        await this.RefreshIpFileList();
    }

    private Task RefreshDropFileList()
    {
        return RefreshFileList(dropReference, DropFileList);
    }

    private Task RefreshIpFileList()
    {
        return RefreshFileList(ipReference, IpFileList);
    }

    private async Task RefreshFileList(IFileReaderRef reader, List<IFileInfo> list)
    {
        list.Clear();
        foreach (var file in await reader.EnumerateFilesAsync())
        {
            var fileInfo = await file.ReadFileInfoAsync();
            //list.Add(fileInfo);
        }
        await ReadFile(ipReference);
        this.StateHasChanged();
    }

    public async Task ReadDrop(EventArgs e)
    {
        await ReadFile(dropReference);
    }
    public async Task ReadClick()
    {
        await ReadFile(ipReference);
    }



    public async Task ReadFile(IFileReaderRef list)
    {
        //_dropClasses.Add(dropTargetDragClass);
        //dropReference = fileReaderService.CreateReference(dropTargetElement);
        //await dropReference.RegisterDropEventsAsync();

        this.StateHasChanged();
        var nl = Environment.NewLine;
        foreach (var file in await list.EnumerateFilesAsync())
        {
            var fileInfo = await file.ReadFileInfoAsync();
            string FileName = fileInfo.Name;
            this.StateHasChanged();

            using (var fs = await file.OpenReadAsync())
            {
                var bufferSize = 20480;
                var buffer = new byte[bufferSize];
                int count;
                while ((count = await fs.ReadAsync(buffer, 0, buffer.Length)) != 0)
                {

                    this.StateHasChanged();
                }
                imagenBase64 = Convert.ToBase64String(buffer);

                await FileNames.InvokeAsync(FileName);
                await ImagenSeleccionada.InvokeAsync(imagenBase64);
                ImagenTemporal = null;
            }
            this.StateHasChanged();
        }

    }
}
