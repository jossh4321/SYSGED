@using System.IO
@using Blazor.FileReader
@inject IFileReaderService fileReaderService

<style>
    .@dropTargetClass {
        display: block;
        padding: 20px;
        margin-bottom: 10px;
        border: 1px dashed black;
        border-radius: 5px;
        position: relative;
    }

    .@dropTargetDragClass {
        border-color: orangered;
        font-weight: bold;
    }

    input.clickable {
        position: absolute;
        width: 100%;
        height: 100%;
        opacity: 0;
        margin-top: -20px;
        margin-left: -20px;
        cursor: pointer;
    }
    .RedText,
    .RedText:hover {
        color: red;
    }
</style>

<div class="@IpDropClass">
    <input type="file"
           class="clickable"
           @ref=dropTargetInput
           @onchange="OnInputChange"
           @ondragenter=OnIpDragEnter
           @ondragleave=OnIpDragLeave
           accept=".pdf"
           multiple />
    Arrastre los archivos aquí o haga clic en mí
    @foreach (var fileInfo in IpFileList)
    {
        <br />@fileInfo.Name
    }
</div>


@*<button @onclick="ReadClick" class="btn btn-primary">Read file</button>
<button @onclick="ClearClick" class="btn btn-primary">Clear</button>*@


@code {
    [Parameter] public string Label { get; set; } = "Documento";
    [Parameter] public List<string> ImagenTemporal { get; set; }
    [Parameter] public EventCallback<string> ImagenSeleccionada { get; set; }
    [Parameter] public EventCallback<string> FileNames { get; set; }
    private string imagenBase64;

    ElementReference dropTargetInput;

    IFileReaderRef ipReference;


    const string dropTargetDragClass = "droptarget-drag";
    const string dropTargetClass = "droptarget";

    private List<string> _ipdropClasses = new List<string>() { dropTargetClass };


    string IpDropClass => string.Join(" ", _ipdropClasses);

    List<IFileInfo> IpFileList { get; } = new List<IFileInfo>();

    protected override async Task OnAfterRenderAsync(bool isFirstRender)
    {
        if (isFirstRender)
        {

            ipReference = fileReaderService.CreateReference(dropTargetInput);
        }
    }


    public void OnIpDragEnter(EventArgs e)
    {
        _ipdropClasses.Add(dropTargetDragClass);
    }

    public void OnIpDragLeave(EventArgs e)
    {
        _ipdropClasses.Remove(dropTargetDragClass);
    }


    public async Task OnInputChange(EventArgs e)
    {

        _ipdropClasses.Remove(dropTargetDragClass);
        this.StateHasChanged();
        await this.RefreshIpFileList();
    }

    private Task RefreshIpFileList()
    {
        return RefreshFileList(ipReference, IpFileList);
    }

    private async Task RefreshFileList(IFileReaderRef reader, List<IFileInfo> list)
    {
        list.Clear();
        foreach (var file in await reader.EnumerateFilesAsync())
        {
            var fileInfo = await file.ReadFileInfoAsync();
        }
        await ReadFile(ipReference);
        this.StateHasChanged();
    }

    public async Task ReadClick()
    {
        await ReadFile(ipReference);
    }



    public async Task ReadFile(IFileReaderRef list)
    {

        this.StateHasChanged();
        var nl = Environment.NewLine;
        foreach (var file in await list.EnumerateFilesAsync())
        {
            var fileInfo = await file.ReadFileInfoAsync();
            if (fileInfo.Type== "application/pdf")
            {
                string FileName = fileInfo.Name;
                this.StateHasChanged();
                using (var fs = await file.OpenReadAsync())
                {
                    var bufferSize = 20480;
                    var buffer = new byte[bufferSize];
                    int count;
                    while ((count = await fs.ReadAsync(buffer, 0, buffer.Length)) != 0)
                    {

                        this.StateHasChanged();
                    }
                    imagenBase64 = Convert.ToBase64String(buffer);

                    await FileNames.InvokeAsync(FileName);
                    await ImagenSeleccionada.InvokeAsync(imagenBase64);
                    ImagenTemporal = null;
                }
                this.StateHasChanged();
            }
        }

    }
}
